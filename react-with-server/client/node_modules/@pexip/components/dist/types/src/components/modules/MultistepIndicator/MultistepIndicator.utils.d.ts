import type { TextVariant } from '../../../types/variants';
import type { MultistepItem } from './MultistepIndicator.types';
/**
 * Returns the current step within the bounds between 1 and the steps ceiling
 *
 * @param stepNumber - Current step index
 * @param maxStepIndex - Steps length
 */
export declare const getCurrentStepBounds: (stepIndex: number, maxStepIndex: number) => number;
/**
 * Returns the given step index if it's available or gets the
 * next step that is enabled.
 *
 * ```
 * {...step, isDisabled: false}
 * ```
 */
export declare const getAvailableStepIndex: ({ steps, stepIndex, }: {
    steps: MultistepItem[];
    stepIndex: number;
}) => number;
/**
 * Returns the `TextVariant` to be used for the `Text` in `MultistepIndicator`
 */
export declare const getTextVariant: ({ isActive, isDisabled, }: {
    isActive?: boolean | undefined;
    isDisabled?: boolean | undefined;
}) => Extract<TextVariant, 'standard' | 'disabled' | 'subtle'>;
//# sourceMappingURL=MultistepIndicator.utils.d.ts.map