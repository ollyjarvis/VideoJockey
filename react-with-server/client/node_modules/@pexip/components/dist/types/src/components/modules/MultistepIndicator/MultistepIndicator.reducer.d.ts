import type { MultistepItem } from './MultistepIndicator.types';
export type MultistepIndicatorActions = {
    type: 'set-all-steps';
    steps: MultistepItem[];
} | {
    type: 'set-step';
    stepIndex: number;
    step: MultistepItem;
} | {
    type: 'complete-step';
    stepIndex: number;
    options: {
        activateStep: boolean;
        isCompleted: boolean;
        isSelectable?: boolean;
    };
} | {
    type: 'fail-step';
    stepIndex: number;
    options: {
        activateStep: boolean;
        isFailed: boolean;
        isSelectable?: boolean;
    };
} | {
    type: 'disable-step';
    stepIndex: number;
    isDisabled: boolean;
} | {
    type: 'activate-step';
    stepIndex: number;
    isActive: boolean;
} | {
    type: 'leave-step';
    stepIndex: number;
    options: {
        activateStep?: boolean;
        isSelectable?: boolean;
        isCompleted?: boolean;
        isFailed?: boolean;
    };
};
export declare const multistepIndicatorReducer: (state: MultistepItem[] | undefined, action: MultistepIndicatorActions) => MultistepItem[];
//# sourceMappingURL=MultistepIndicator.reducer.d.ts.map