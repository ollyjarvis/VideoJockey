import React from 'react';
export interface FloatRootOverflow {
    overflow: boolean;
    top?: boolean;
    bottom?: boolean;
    left?: boolean;
    right?: boolean;
}
export type AlignWithFloatRootTrigger = React.MutableRefObject<(() => void) | null>;
export declare enum LockStyle {
    NONE = 0,
    VERTICAL = 1,
    HORIZONTAL = 2
}
export declare const Draggable: React.ForwardRefExoticComponent<Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    isDisabled?: boolean | undefined;
    floatRoot?: React.RefObject<HTMLDivElement> | undefined;
    beforeReposition?: ((element: HTMLDivElement) => void) | undefined;
    onReposition?: ((element: HTMLDivElement, floatRootOverflow: FloatRootOverflow) => void) | undefined;
    onPointerUpExtra?: ((element: HTMLDivElement) => void) | undefined;
    onPointerMoveExtra?: ((element: HTMLDivElement) => void) | undefined;
    shouldCaptureClick?: boolean | undefined;
    scrollElementRef?: React.RefObject<HTMLElement> | undefined;
    scrollOffset?: number | undefined;
    scrollTimer?: number | undefined;
    alignWithFloatRootTrigger?: AlignWithFloatRootTrigger | undefined;
    lockStyle?: LockStyle | undefined;
    pointerCapture?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement>>;
export type DraggableProps = React.ComponentProps<typeof Draggable>;
//# sourceMappingURL=Draggable.view.d.ts.map