import type { MultistepItem } from './MultistepIndicator.types';
/**
 * Convenience hook for using steps in MultistepIndicator
 */
export declare const useMultistepIndicator: ({ initialSteps, currentStepIndex: initialCurrentStepIndex, }: {
    initialSteps: MultistepItem[];
    currentStepIndex?: number | undefined;
}) => readonly [{
    allStepsCompleted: boolean;
    currentStepIndex: number;
    prevStepsCompleted: boolean;
    steps: MultistepItem[];
}, {
    moveToStep: (stepIndex: number, { forceStep }?: {
        forceStep?: boolean | undefined;
    }) => void;
    resetAllSteps: () => void;
    resetStep: (stepIndex: number) => void;
    updateStepActive: (stepIndex: number, isActive?: boolean) => void;
    updateStepCompleted: (stepIndex: number, { activateStep, isCompleted, isSelectable, }?: {
        activateStep?: boolean | undefined;
        isCompleted?: boolean | undefined;
        isSelectable?: boolean | undefined;
    }) => void;
    updateStepFailed: (stepIndex: number, { activateStep, isSelectable, isFailed, }?: {
        activateStep?: boolean | undefined;
        isSelectable?: boolean | undefined;
        isFailed?: boolean | undefined;
    }) => void;
    updateStepDisabled: (stepIndex: number, isDisabled?: boolean) => void;
    updateStepLeave: (stepIndex: number, { activateStep, isSelectable, }?: {
        activateStep?: boolean | undefined;
        isSelectable?: boolean | undefined;
    }) => void;
}];
//# sourceMappingURL=useMultistepIndicator.d.ts.map