import React from 'react';
export type TextLikeInputType = 'text' | 'password' | 'number' | 'email' | 'search' | 'tel' | 'url' | 'date';
export declare const Input: React.ForwardRefExoticComponent<Omit<Omit<Omit<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void) | React.RefObject<HTMLInputElement> | null | undefined;
}, "disabled"> & {
    clearButtonText?: string | undefined;
    colorScheme?: "dark" | "light" | undefined;
    enhancerEnd?: React.ReactNode;
    enhancerStart?: React.ReactNode;
    errorText?: string | undefined;
    hasError?: boolean | undefined;
    id?: string | undefined;
    isDisabled?: boolean | undefined;
    label: string;
    labelModifier?: "hidden" | "inline" | undefined;
    name: string;
    onClear?: ((value: string) => void) | undefined;
    onValueChange?: ((value: string) => void) | undefined;
    showClearButton?: boolean | undefined;
    sizeModifier?: "small" | "medium" | undefined;
    testId?: string | undefined;
    type?: TextLikeInputType | undefined;
    value?: string | undefined;
    variant?: "transparent" | "standard" | undefined;
}, "ref"> & React.RefAttributes<{
    focus: () => void;
}>>;
export type InputProps = React.ComponentProps<typeof Input>;
export declare const useInput: (props: InputProps) => [string, InputProps];
//# sourceMappingURL=Input.d.ts.map