import React from 'react';
import { FontVariant } from '../../../../design-tokens/constants';
import type { SimpleButtonProps } from '../SimpleButton/SimpleButton';
import { Text } from '../Text/Text';
export interface LoadingBoxProps {
    className?: string;
    isLoading?: boolean;
}
export declare const LoadingBox: React.FC<React.PropsWithChildren<LoadingBoxProps>>;
export interface EnhancerProps {
    className?: string;
    enhancerEnd?: React.ReactNode;
    enhancerEndClassName?: string;
    enhancerStart?: React.ReactNode;
    enhancerStartClassName?: string;
    noEnhancerPadding?: boolean;
}
export declare const Enhancers: React.FC<React.PropsWithChildren<EnhancerProps>>;
export declare const ButtonText: typeof Text;
export declare const Button: React.FC<SimpleButtonProps & EnhancerProps & LoadingBoxProps & Pick<ButtonTextProps, 'colorScheme' | 'fontVariant'> & {
    hideChildren?: boolean;
    textVariant?: ButtonTextProps['variant'];
    underlineText?: boolean;
    useTextComponent?: boolean;
}>;
export declare const RefButton: React.ForwardRefExoticComponent<((((Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    htmlTag?: import("../InteractiveElement/InteractiveElement").InteractiveElementHTMLTag | undefined;
    href?: string | undefined;
}) & {
    colorScheme?: "dark" | "light" | undefined;
    isActive?: boolean | undefined;
    isDisabled?: boolean | undefined;
    modifier?: "fullWidth" | "square" | "fluid" | "disc" | undefined;
    noBorderRadius?: boolean | undefined;
    noHover?: boolean | undefined;
    size?: "small" | "medium" | "compact" | "large" | "none" | undefined;
    variant?: "primary" | "secondary" | "tertiary" | "neutral" | "translucent" | "bordered" | "transparent" | "transparentAlternative" | "text" | "danger" | "dangerBordered" | "success" | "obvious" | undefined;
}) & EnhancerProps & LoadingBoxProps & Pick<(React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
    colorScheme?: "dark" | "light" | undefined;
    fontVariant?: FontVariant | undefined;
    htmlTag?: "p" | "span" | undefined;
    isTruncated?: boolean | undefined;
    isUnderlined?: boolean | undefined;
    isUppercase?: boolean | undefined;
    variant?: "danger" | "success" | "standard" | "hidden" | "warning" | "tinted" | "subtle" | "disabled" | "inherit" | "link" | undefined;
    whiteSpace?: "pre" | "normal" | "nowrap" | "preWrap" | "preLine" | undefined;
    wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
}, "colorScheme" | "fontVariant"> & {
    hideChildren?: boolean | undefined;
    textVariant?: ButtonTextProps['variant'];
    underlineText?: boolean | undefined;
    useTextComponent?: boolean | undefined;
}) & React.RefAttributes<HTMLDivElement | HTMLButtonElement | HTMLAnchorElement>>;
export type ButtonTextProps = React.ComponentProps<typeof ButtonText>;
export type ButtonProps = React.ComponentProps<typeof Button>;
//# sourceMappingURL=Button.d.ts.map