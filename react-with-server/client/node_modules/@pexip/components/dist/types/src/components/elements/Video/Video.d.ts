import React from 'react';
export interface VideoHandle {
    resume: () => void;
    focus: () => void;
}
export interface VideoElement extends HTMLVideoElement {
    setSinkId: (sinkId: string) => void;
}
/**
 * When the video element failed to run `play` as the purpose of resuming
 * a paused video element.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play#exceptions
 *
 * @param reason - Why did it fail
 */
export type FailedToResume = (reason: Error) => void;
/**
 * Resume a paused video element, and call `failedToPlay` when it failed to do
 * so
 *
 * @param video - video element
 * @param failedToPlay - a callback to be called when the play failed
 */
export declare const resume: (video: VideoElement | null, failedToPlay?: FailedToResume) => void;
export declare const Video: React.ForwardRefExoticComponent<Omit<React.ClassAttributes<HTMLVideoElement> & React.VideoHTMLAttributes<HTMLVideoElement> & {
    srcObject?: MediaStream | undefined;
    sinkId?: string | undefined;
    captionsSrc?: string | undefined;
    captionsSrcLang?: string | undefined;
    autoPlay?: boolean | undefined;
    isMirrored?: boolean | undefined;
    playsInline?: boolean | undefined;
    textTrackKind?: "captions" | "subtitles" | undefined;
    onPictureInPictureChange?: ((isPip: boolean) => void) | undefined;
    onFailedToResume?: FailedToResume | undefined;
}, "ref"> & React.RefAttributes<VideoHandle>>;
//# sourceMappingURL=Video.d.ts.map