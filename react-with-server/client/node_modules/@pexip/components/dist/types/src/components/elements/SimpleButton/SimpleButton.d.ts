import React from 'react';
import type { ButtonModifiersValues, ExtendedSizeModifier } from '../../../types/sizes';
import type { ButtonVariant, ColorScheme } from '../../../types/variants';
import type { InteractiveElementProps } from '../InteractiveElement/InteractiveElement';
/**
 * SimpleButton looks and acts mostly the same as a normal Button except it has
 * less features. The idea is to make it easy to do use composition (children
 * components) to add desired behaviour.
 */
export declare const SimpleButton: React.FC<InteractiveElementProps & {
    colorScheme?: ColorScheme;
    isActive?: boolean;
    isDisabled?: boolean;
    modifier?: ButtonModifiersValues;
    noBorderRadius?: boolean;
    noHover?: boolean;
    size?: ExtendedSizeModifier;
    variant?: ButtonVariant;
}>;
export declare const RefSimpleButton: React.ForwardRefExoticComponent<(((Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    htmlTag?: import("../InteractiveElement/InteractiveElement").InteractiveElementHTMLTag | undefined;
    href?: string | undefined;
}) & {
    colorScheme?: "dark" | "light" | undefined;
    isActive?: boolean | undefined;
    isDisabled?: boolean | undefined;
    modifier?: "fullWidth" | "square" | "fluid" | "disc" | undefined;
    noBorderRadius?: boolean | undefined;
    noHover?: boolean | undefined;
    size?: "small" | "medium" | "compact" | "large" | "none" | undefined;
    variant?: "primary" | "secondary" | "tertiary" | "neutral" | "translucent" | "bordered" | "transparent" | "transparentAlternative" | "text" | "danger" | "dangerBordered" | "success" | "obvious" | undefined;
}) & React.RefAttributes<HTMLDivElement | HTMLButtonElement | HTMLAnchorElement>>;
export type SimpleButtonProps = React.ComponentProps<typeof SimpleButton>;
//# sourceMappingURL=SimpleButton.d.ts.map