import fs from 'fs';
import path from 'path';

import {fetchWithAccessToken} from './fetchWithAccessToken.mjs';
import {FRAME_ID, RESOURCES_IDS} from './constants.mjs';
import {Content} from './content.mjs';

function floatToInt(float) {
    return Math.round(float * 255);
}

function intToHex(int) {
    return Number(int).toString(16).padStart(2, '0');
}

function rgbToHex(...rgb) {
    return `#${rgb.map(v => intToHex(floatToInt(v))).join('')}`;
}

function toRgbValue(...rgb) {
    return rgb.map(v => floatToInt(v)).join(',');
}

function normalizeColorName(color) {
    return color.split('/')[1].toLowerCase().replace(/ +/g, '-');
}

function convertKebabToPascalCase(color) {
    return color.replace(/(^\w|-\w)/g, text =>
        text.replace(/-/, '').toUpperCase(),
    );
}

export async function getColors() {
    const {
        nodes: {[RESOURCES_IDS.COLORS]: colorsFrame},
    } = await fetchWithAccessToken(
        `files/${FRAME_ID}/nodes?ids=${RESOURCES_IDS.COLORS}`,
    );
    return colorsFrame.document.children.reduce((acc, child) => {
        const childNodes = child.children || [];
        const newGroups = childNodes
            .filter(n => n.name.includes('Group'))
            .flatMap(c => c.children);

        const newColors = [child, ...newGroups, ...childNodes]
            .filter(s => !!s.styles)
            .map(c => ({
                ...c,
                styles: colorsFrame.styles[c.styles.fill],
            }))
            .reduce((c, current) => {
                const colorName = normalizeColorName(current.styles.name);
                const [colorObj] = current.fills;
                c[colorName] = colorObj.color;

                return c;
            }, {});

        return {
            ...acc,
            ...newColors,
        };
    }, {});
}

function exportColors(colors) {
    const content = new Content(
        `/* FILE GENERATED BY packages/components/design-tokens/build-scripts/colors.js DO NOT CHANGE */
        /* eslint-disable @typescript-eslint/no-duplicate-enum-values -- same colors with different names in figma */
        `,
    );
    content.push('export enum Color {');
    for (const key in colors) {
        const {r, g, b} = colors[key];
        content.push(
            `${convertKebabToPascalCase(key)} = '${rgbToHex(r, g, b)}',`,
        );
    }
    content.push('};');
    content.push('export enum RgbColor {');
    for (const key in colors) {
        const {r, g, b} = colors[key];
        content.push(
            `${convertKebabToPascalCase(key)} = '${toRgbValue(r, g, b)}',`,
        );
    }
    content.push('};');
    content.push(
        '/* eslint-enable @typescript-eslint/no-duplicate-enum-values -- same colors with different names in figma */',
    );
    fs.writeFileSync(
        path.resolve('..', 'generated', 'colors.ts'),
        content.print('typescript'),
    );
}

export function syncColors(colors) {
    const content = new Content(
        '/* FILE GENERATED BY packages/components/design-tokens/build-scripts/colors.js DO NOT CHANGE */',
    );
    content.push('$colors: (');
    for (const key in colors) {
        const {r, g, b} = colors[key];
        content.push(`'${key}': ${rgbToHex(r, g, b)},`);
    }
    content.push(');');
    fs.writeFileSync(
        path.resolve('..', 'generated', 'colors.variables.scss'),
        content.print('scss'),
    );

    exportColors(colors);
}
