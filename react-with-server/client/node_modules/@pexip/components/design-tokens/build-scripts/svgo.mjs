import {optimize as svgoOptimize} from 'svgo';

const CURRENT_COLOR = 'currentColor';
const TOKEN_KEY = 'data-token-name';

function getIsElemWithColor(item) {
    return (
        !item.attributes['stroke'] &&
        !item.attributes['fill'] &&
        !item.attributes['color']
    );
}
function getIsColorAttr(name) {
    return name === 'stroke' || name === 'fill' || name === 'color';
}
function getIsColorAttrNone(value) {
    return value === 'none';
}
function defaultToCurrentColor(item) {
    const overrideColor = item => {
        if (item.type !== 'element') return;
        if (getIsElemWithColor(item)) return;

        Object.entries(item.attributes).forEach(([name, value]) => {
            const isColorAttr = getIsColorAttr(name);
            if (!isColorAttr || getIsColorAttrNone(value)) return;

            item.attributes[name] = CURRENT_COLOR;
        });
    };

    const processItem = item => {
        if (item.children.length === 0) {
            overrideColor(item);
        } else {
            item.children.forEach(child => processItem(child));
        }
    };
    processItem(item);
}

function addTokenId(item, ...rest) {
    const svg = item.children[0];
    if (svg.name !== 'svg') return;

    const [params] = rest.reverse();
    svg.attributes[TOKEN_KEY] = params.path;
}

const config = {
    plugins: [
        {
            name: 'preset-default',
        },
        {
            type: 'perItem',
            name: 'defaultToCurrentColor',
            description:
                'Alter all the colors to be currentColor. Useful for monochrome icons mostly.',
            fn: defaultToCurrentColor,
        },
        {
            type: 'perItem',
            name: 'addTokenId',
            description: 'Token ids to be recognized for storybook',
            fn: addTokenId,
        },
        {
            name: 'removeViewBox',
            active: false,
        },
        {
            name: 'removeDimensions',
            active: true,
        },
        {
            name: 'prefixIds',
            active: true,
            params: {
                prefix(_, {path}) {
                    return path;
                },
            },
        },
        {
            name: 'addAttributesToSVGElement',
            params: {
                attributes: [
                    {
                        'aria-hidden': true,
                    },
                ],
            },
        },
    ],
};

export const optimize = (svgString, info = {}) =>
    svgoOptimize(svgString, {...info, ...config});
