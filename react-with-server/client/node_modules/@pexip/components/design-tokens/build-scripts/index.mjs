import {getColors, syncColors} from './colors.mjs';
import {getIcons} from './icons.mjs';
import {getFonts, syncFonts} from './fonts.mjs';
import {getBreakpoints, syncBreakpoints} from './breakpoints.mjs';
import {RESOURCES_IDS} from './constants.mjs';

if (!process.env.ACCESS_TOKEN) {
    throw new Error('Provide access token');
}

async function buildTokens() {
    const types = (process.argv[2] ?? 'colors,icons,fonts,breakpoints').split(
        ',',
    );
    try {
        console.log('Starting...');
        if (types.includes('colors')) {
            console.log('Fetching colors...');
            const colors = await getColors();
            syncColors(colors);
            console.log(colors);
        }
        if (types.includes('icons')) {
            console.log('Fetching icons...');
            await getIcons();
            console.log('Icons downloaded.');
        }
        if (types.includes('fonts')) {
            console.log('Fetching desktop fonts...');
            const fonts = await getFonts(RESOURCES_IDS.FONTS);
            syncFonts(fonts, 'fonts.desktop.variables.scss', 'desktop');
            console.log(fonts);
            console.log('Desktop fonts downloaded');

            console.log('Fetching mobile fonts...');
            const fontsMobile = await getFonts(RESOURCES_IDS.FONTS_MOBILE);
            syncFonts(fontsMobile, 'fonts.mobile.variables.scss', 'mobile');
            console.log(fontsMobile);
            console.log('Mobile fonts downloaded');
        }
        if (types.includes('breakpoints')) {
            const breakpoints = getBreakpoints();
            syncBreakpoints(breakpoints);
            console.log(breakpoints);
            console.log('Breakpoints generated');
        }
        console.log('All done');
    } catch (e) {
        console.error('Build tokens failed', e);
    }
}

buildTokens();
