import * as sdpTransform from 'sdp-transform';
import type { PexipMediaLine, MediaEncodingParameters } from './types';
export interface SdpOptions {
    allow1080p?: boolean;
    allow4kPreso?: boolean;
    allowVP9?: boolean;
    allowCodecSdpMunging?: boolean;
    contents?: string[];
    sendEncodings?: MediaEncodingParameters[][];
    videoAS?: number;
    videoTIAS?: number;
}
export interface SdpManager {
    setSdp: (sdp: RTCSessionDescriptionInit, enrichOptions?: SdpOptions) => void;
    getSdp: () => RTCSessionDescriptionInit;
    enrichSdp: (options: SdpOptions) => void;
}
export interface Fingerprint {
    type: string;
    hash: string;
}
export declare const TWCCExtensionUrl = "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions";
export declare class SdpTransformManager implements SdpManager {
    private sdp;
    constructor(sdp: RTCSessionDescriptionInit, enrichOptions?: SdpOptions);
    setSdp(sdp: RTCSessionDescriptionInit, enrichOptions?: SdpOptions): void;
    getSdp(): RTCSessionDescriptionInit;
    getFingerprints(): Fingerprint[];
    enrichSdp(options: SdpOptions): void;
    isTWCCsupported: () => boolean | undefined;
    addContentAttribute: (mid: string, content: string) => void;
    addMsidToMline: (transceiver: RTCRtpTransceiver, msid: string) => void;
    private shouldAddSupportForHighQualityStream;
    private setContentAttribute;
    private addBandwidthLine;
    private addSupportForHighQualityStream;
    private getVPXConfigOverrides;
    private getH264ConfigOverrides;
    /**
     * This method makes sure we pick set of supported codecs with the right order
     */
    private chooseVideoPTs;
    private shouldStripH264Line;
    private stripCodecs;
    private getVideoLines;
    private getMediaLine;
    private getCodecs;
}
export declare const hasICECandidates: (sdp?: string) => boolean;
export declare const getMediaLines: (sdp?: string) => ({
    type: string;
    port: number;
    protocol: string;
    payloads?: string | undefined;
} & sdpTransform.MediaDescription)[];
export declare const isPreso: (media: PexipMediaLine) => boolean;
