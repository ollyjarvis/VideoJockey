export interface ProcessEventOpen<T> {
    type: 'open';
    data: T;
}
export interface ProcessEventProcess<T> {
    type: 'process';
    data: T;
}
export interface ProcessEventUpdate<T> {
    type: 'update';
    data: T;
}
export interface ProcessEventClose {
    type: 'close';
}
export interface ProcessEventDestroy {
    type: 'destroy';
}
export type ProcessEvents<T, I> = ProcessEventOpen<T> | ProcessEventProcess<I> | ProcessEventUpdate<T> | ProcessEventClose | ProcessEventDestroy;
export interface ProcessWorkerEventError {
    type: 'error';
    error: Error;
}
export interface ProcessWorkerEventProcessed<T> {
    type: 'processed';
    data?: T;
}
export interface ProcessWorkerEventOpened {
    type: 'opened';
}
export type ProcessWorkerEvents<T> = ProcessWorkerEventError | ProcessWorkerEventProcessed<T> | ProcessWorkerEventOpened;
