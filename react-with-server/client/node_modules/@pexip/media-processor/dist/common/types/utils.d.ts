export type ExtractMessageEventType<T extends {
    type: string;
}> = T extends {
    type: infer O;
} ? O : never;
export type IncludeMessageEventDataType<E extends {
    type: string;
}, I> = E extends {
    type: infer A;
    data: infer D;
} ? A extends I ? D : never : E extends {
    type: infer B;
} ? B extends I ? void : never : never;
/**
 * From https://github.com/Microsoft/TypeScript/issues/26223#issuecomment-674500430
 */
export type TupleOf<T, N extends number> = N extends N ? number extends N ? T[] : _TupleOf<T, N, []> : never;
type _TupleOf<T, N extends number, R extends unknown[]> = R['length'] extends N ? R : _TupleOf<T, N, [T, ...R]>;
export {};
