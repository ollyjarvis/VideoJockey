import type { RenderEffects } from '../constants';
import type { MPMask } from './segmentation';
import type { VideoFrameLike, ImageRecord } from './media';
export interface RendererOptions {
    backgroundImageUrl: string;
    /**
     * Confident score threshold to be considered as the foreground between
     * 0 and 1
     * */
    foregroundThreshold: number;
    /**
     * Between 0 and 10
     */
    backgroundBlurAmount: number;
    /**
     * Range in between 0 and 20
     * @defaultValue `3`
     */
    edgeBlurAmount: number;
    /**
     * The ratio used for smoothing the mask between 0 and 1
     */
    maskCombineRatio: number;
    /**
     * Effects
     */
    effects: RenderEffects;
}
type Options = Partial<RendererOptions> & {
    backgroundImage?: ImageRecord;
};
export interface Renderer {
    init(options?: Options): void;
    render(mask: MPMask, frame: VideoFrameLike, options?: RendererOptions): void;
    update(options: Options): void;
    release(): void;
}
export {};
