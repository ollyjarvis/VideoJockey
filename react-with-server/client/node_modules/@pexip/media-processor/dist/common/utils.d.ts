import type { SegmentationModel } from './types/segmentation';
import type { ImageMapIterable } from './types/media';
type Assert = <T>(t: T, message?: string) => asserts t is NonNullable<T>;
export declare const assert: Assert;
export declare const isSegmentationModel: (t: unknown) => t is SegmentationModel;
export declare const createObjectUpdater: <T extends { [K in keyof T]: unknown; }>(original: T) => (another: Partial<T>) => void;
export declare const createRemoteImageBitmap: (map?: ImageMapIterable) => {
    tryFetchingImage: (uri: string) => Promise<ImageBitmap | null>;
    setImage: (uri: string, image: ImageBitmap) => void;
    getImage: (uri: string) => ImageBitmap | null;
    removeImage: (uri: string) => boolean;
    clear: () => void;
};
export declare const clamping: (min: number, max: number) => (value: number) => number;
export declare const calculateMaxBlurPass: (height: number) => number;
/**
 * Calculate the coordinates and size of the source and destination to fit the
 * target aspect ratio.
 *
 * @param fromWidth - The width of the source
 * @param fromHeight - The height of the source
 * @param toWidth - The width of the destination
 * @param toHeight - The height of the destination
 */
export declare const resize: (fromWidth: number, fromHeight: number, toWidth: number, toHeight: number) => {
    sx: number;
    sy: number;
    sw: number;
    sh: number;
    dx: number;
    dy: number;
    dw: number;
    dh: number;
};
export {};
