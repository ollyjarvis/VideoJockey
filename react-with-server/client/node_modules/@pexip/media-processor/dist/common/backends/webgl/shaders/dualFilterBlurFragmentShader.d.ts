export declare const dualFilterBlurFragmentShaderSource = "#version 300 es\nprecision mediump float;\n\n// our textures\nuniform sampler2D u_frame;\n\n// control flags\nuniform int u_downsampling;\n\nin vec2 v_texCoord;\n\n// we need to declare an output for the fragment shader\nout vec4 outColor;\n\nvec4 Downsample(sampler2D image, vec2 uv, vec2 halfpixel) {\n    vec4 sum = texture(image, uv) * 4.0;\n    sum += texture(image, uv - halfpixel.xy);\n    sum += texture(image, uv + halfpixel.xy);\n    sum += texture(image, uv + vec2(halfpixel.x, -halfpixel.y));\n    sum += texture(image, uv - vec2(halfpixel.x, -halfpixel.y));\n    return sum / 8.0;\n}\n\nvec4 Upsample(sampler2D image, vec2 uv, vec2 halfpixel) {\n    vec4 sum = texture(image, uv + vec2(-halfpixel.x * 2.0, 0.0));\n    sum += texture(image, uv + vec2(-halfpixel.x, halfpixel.y)) * 2.0;\n    sum += texture(image, uv + vec2(0.0, halfpixel.y * 2.0));\n    sum += texture(image, uv + vec2(halfpixel.x, halfpixel.y)) * 2.0;\n    sum += texture(image, uv + vec2(halfpixel.x * 2.0, 0.0));\n    sum += texture(image, uv + vec2(halfpixel.x, -halfpixel.y)) * 2.0;\n    sum += texture(image, uv + vec2(0.0, -halfpixel.y * 2.0));\n    sum += texture(image, uv + vec2(-halfpixel.x, -halfpixel.y)) * 2.0;\n    return sum / 12.0;\n}\n\nvoid main() {\n    vec2 halfpixel = 0.5 / vec2(textureSize(u_frame, 0));\n\n    if (u_downsampling == 1) {\n        outColor = Downsample(u_frame, v_texCoord, halfpixel);\n        return;\n    }\n    outColor = Upsample(u_frame, v_texCoord, halfpixel);\n}\n";
