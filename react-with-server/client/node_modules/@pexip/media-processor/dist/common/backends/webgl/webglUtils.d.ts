import type { MPMask } from '../../types/segmentation';
import type { TextureInfo } from './types';
/**
 * WebGL Shader type enum
 */
export declare const GL_SHADER_TYPE: {
    readonly VertexShader: 35633;
    readonly FragmentShader: 35632;
};
/**
 * WebGL Shader name enum for error output
 */
export declare const GL_SHADER_NAME: {
    readonly 35633: "VertexShader";
    readonly 35632: "FragmentShader";
};
/**
 * The type of WebGl shader:
 * `WebGLRenderingContext.VERTEX_SHADER` | `WebGLRenderingContext.FRAGMENT_SHADER`
 */
export type GLShaderType = (typeof GL_SHADER_TYPE)[keyof typeof GL_SHADER_TYPE];
/**
 * Brand string for type ensuring the shader source is a GLSL ES 3.00 shader
 */
type GLShaderSource = string & {
    __glShaderSource: true;
};
type Release = () => void;
/**
 * Ensure the shader source is WebGL2's shader language aka GLSL ES 3.00
 */
export declare const isShaderSource: (src: unknown) => src is GLShaderSource;
/**
 * Ensure the shader source is WebGL2's shader language aka GLSL ES 3.00
 */
export declare const assertShaderSource: (src: unknown) => asserts src is GLShaderSource;
/**
 * Load a shader
 * @param gl - WebGLRenderingContext
 * @param shaderType - The type of shader to load {@link GL_SHADER_TYPE}
 * @param shaderSource - The source of the shader
 */
export declare const loadShader: (gl: WebGLRenderingContext, shaderType: GLShaderType, shaderSource: GLShaderSource) => WebGLShader;
/**
 * Create a WebGL program from 2 provided shaders
 * @param gl - WebGLRenderingContext
 * @param shaders - The shader tuple of `[vertexShader, fragmentShader]`
 * @param attribs - An array of attribs names.
 *        Locations will be assigned by index if not passed in.
 * @param locations - The locations for the attribs.
 *        A parallel array to opt_attribs letting you assign locations.
 */
export declare const createProgram: (gl: WebGLRenderingContext, shaders: [WebGLShader, WebGLShader], attribs?: string[], locations?: number[]) => [WebGLProgram, Release];
/**
 * Create a WebGL program from 2 sources
 * @param gl - WebGLRenderingContext
 * @param shaderSources - The shader source tuple of `[vertexShaderSource, fragmentShaderSource]`
 * @param attribs - An array of attribs names.
 *        Locations will be assigned by index if not passed in.
 * @param locations - The locations for the attribs.
 *        A parallel array to opt_attribs letting you assign locations.
 */
export declare const createProgramFromSources: (gl: WebGLRenderingContext, [vs, fs]: [GLShaderSource, GLShaderSource], attribs?: string[], locations?: number[]) => [WebGLProgram, Release];
export declare const createAndSetupTexture: (gl: WebGL2RenderingContext) => WebGLTexture | null;
type Location<S extends string> = S extends `u_${string}` ? ReturnType<WebGL2RenderingContext['getUniformLocation']> : S extends `a_${string}` ? ReturnType<WebGL2RenderingContext['getAttribLocation']> : never;
export declare const getLocations: <T extends Record<string, string>>(gl: WebGL2RenderingContext, program: WebGLProgram, locations: T) => { [Key in keyof T]: Location<T[Key]>; };
export declare const createGLProgram: <A extends Record<string, string>, U extends Record<string, string>>(processCanvas: OffscreenCanvas, { attribs, uniforms, vertexSrc, fragmentSrc, }: {
    attribs: A;
    uniforms: U;
    vertexSrc: string;
    fragmentSrc: string;
}) => {
    gl: WebGL2RenderingContext;
    program: WebGLProgram;
    attribLocations: { [Key in keyof A]: Location<A[Key]>; };
    uniformLocations: { [Key_1 in keyof U]: Location<U[Key_1]>; };
    release: Release;
};
export declare const toTextureInfo: (mask: MPMask) => TextureInfo;
export {};
