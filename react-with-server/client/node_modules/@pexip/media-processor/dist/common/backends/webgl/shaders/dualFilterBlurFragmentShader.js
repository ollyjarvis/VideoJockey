export const dualFilterBlurFragmentShaderSource = `#version 300 es
precision mediump float;

// our textures
uniform sampler2D u_frame;

// control flags
uniform int u_downsampling;

in vec2 v_texCoord;

// we need to declare an output for the fragment shader
out vec4 outColor;

vec4 Downsample(sampler2D image, vec2 uv, vec2 halfpixel) {
    vec4 sum = texture(image, uv) * 4.0;
    sum += texture(image, uv - halfpixel.xy);
    sum += texture(image, uv + halfpixel.xy);
    sum += texture(image, uv + vec2(halfpixel.x, -halfpixel.y));
    sum += texture(image, uv - vec2(halfpixel.x, -halfpixel.y));
    return sum / 8.0;
}

vec4 Upsample(sampler2D image, vec2 uv, vec2 halfpixel) {
    vec4 sum = texture(image, uv + vec2(-halfpixel.x * 2.0, 0.0));
    sum += texture(image, uv + vec2(-halfpixel.x, halfpixel.y)) * 2.0;
    sum += texture(image, uv + vec2(0.0, halfpixel.y * 2.0));
    sum += texture(image, uv + vec2(halfpixel.x, halfpixel.y)) * 2.0;
    sum += texture(image, uv + vec2(halfpixel.x * 2.0, 0.0));
    sum += texture(image, uv + vec2(halfpixel.x, -halfpixel.y)) * 2.0;
    sum += texture(image, uv + vec2(0.0, -halfpixel.y * 2.0));
    sum += texture(image, uv + vec2(-halfpixel.x, -halfpixel.y)) * 2.0;
    return sum / 12.0;
}

void main() {
    vec2 halfpixel = 0.5 / vec2(textureSize(u_frame, 0));

    if (u_downsampling == 1) {
        outColor = Downsample(u_frame, v_texCoord, halfpixel);
        return;
    }
    outColor = Upsample(u_frame, v_texCoord, halfpixel);
}
`;
