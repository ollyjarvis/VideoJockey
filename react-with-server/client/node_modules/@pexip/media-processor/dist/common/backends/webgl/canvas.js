import { m3 } from '../../m3';
import { createGLProgram } from './webglUtils';
import { vertexShaderSource } from './shaders/vertexShader';
import { textureFragmentShaderSource } from './shaders/textureFragmentShader';
export const createCanvasRenderer = (processor) => {
    const { gl, program, attribLocations, uniformLocations, release } = createGLProgram(processor, {
        attribs: {
            position: 'a_position',
            texCoord: 'a_texCoord',
        },
        uniforms: {
            matrix: 'u_matrix',
            texture: 'u_texture',
        },
        vertexSrc: vertexShaderSource,
        fragmentSrc: textureFragmentShaderSource,
    });
    const vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    // Position
    const positionBuffer = gl.createBuffer();
    gl.enableVertexAttribArray(attribLocations.position);
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.vertexAttribPointer(attribLocations.position, 2, gl.FLOAT, false, 0, 0);
    // Put a unit quad in the buffer
    gl.bufferData(gl.ARRAY_BUFFER, 
    // prettier-ignore
    new Float32Array([
        0, 0,
        0, 1,
        1, 0,
        1, 0,
        0, 1,
        1, 1,
    ]), gl.STATIC_DRAW);
    // Texture coordinates for the rectangle
    const texCoordBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, 
    // prettier-ignore
    new Float32Array([
        0, 0,
        0, 1,
        1, 0,
        1, 0,
        0, 1,
        1, 1,
    ]), gl.STATIC_DRAW);
    gl.enableVertexAttribArray(attribLocations.texCoord);
    gl.vertexAttribPointer(attribLocations.texCoord, 2, gl.FLOAT, false, 0, 0);
    return {
        render: (texture) => {
            // Draw on the Canvas
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.viewport(0, 0, processor.width, processor.height);
            gl.clearColor(0, 0, 0, 1);
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.useProgram(program);
            gl.bindVertexArray(vao);
            // Texture Unit setup
            gl.uniform1i(uniformLocations.texture, 0);
            // Project, position and scale to full-size of the canvas
            const matrix = m3.projection(1, 1);
            gl.uniformMatrix3fv(uniformLocations.matrix, false, matrix);
            // Frame texture
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, texture.texture);
            gl.drawArrays(gl.TRIANGLES, 0, 6);
        },
        release: () => {
            gl.deleteBuffer(positionBuffer);
            gl.deleteBuffer(texCoordBuffer);
            gl.deleteVertexArray(vao);
            release();
        },
    };
};
