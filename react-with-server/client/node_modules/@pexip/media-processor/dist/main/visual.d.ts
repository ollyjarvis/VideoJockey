import type { Point } from './types';
/**
 * Calculate the distance between two Points
 *
 * @param p1 - Point 1
 * @param p2 - Point 2
 *
 * @internal
 */
export declare function calculateDistance(p1: Point, p2: Point): number;
/**
 * Spline Interpolation for Bezier Curve
 *
 * @param p1 - Starting point
 * @param p2 - Point between p1 and p3
 * @param p3 - Ending point
 * @param t - tension constant
 *
 * @remarks
 * Ref. http://scaledinnovation.com/analytics/splines/aboutSplines.html
 * Alt. https://www.particleincell.com/2012/bezier-splines/
 *
 * @internal
 */
export declare function getBezierCurveControlPoints({ p1, p2, p3, t, }: {
    p1: Point;
    p2: Point;
    p3: Point;
    t: number;
}): [Point, Point];
/**
 * Create a straight line path command
 *
 * @param data - An array of Points
 *
 * @example
 *
 * ```typescript
 * line([{x:0, y:0}, {x:2, y:2}]);
 * // Output:
 * // M 0,0 L 2,2
 * ```
 *
 * @alpha
 */
export declare const line: (data: Point[]) => string;
/**
 * Create a cubic Bezier curve path command
 *
 * @param data - An array of Points
 *
 * @example
 *
 * ```typescript
 * curve([{x:0, y:0}, {x:3, y:4}, {x:9, y:16}]);
 * // Output:
 * // M 0,0 C 0,0 1.778263374435667,1.8280237767745193 3,4 C 6.278263374435667,9.828023776774518 9,16 9,16
 * ```
 *
 * @alpha
 */
export declare const curve: (data: Point[]) => string;
/**
 * Create a cubic Bezier curve path then turning back to the starting point with
 * provided point of reference
 *
 * @param reference - reference coordinates, straight to y then x then the starting point
 * @param data - An array of Points
 *
 * @example
 *
 * ```typescript
 * closedCurve({x:0, y:20})([{x:0, y:0}, {x:3, y:4}, {x:9, y:16}]);
 * // Output:
 * // M 0,0 C 0,0 1.778263374435667,1.8280237767745193 3,4 C 6.278263374435667,9.828023776774518 9,16 9,16 V 20 H 0 Z
 * ```
 *
 * @alpha
 */
export declare const closedCurve: ({ x, y }: Point) => (data: Point[]) => string;
