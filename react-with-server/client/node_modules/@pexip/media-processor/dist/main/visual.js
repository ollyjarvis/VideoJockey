import { lineTo, moveTo, cubicCurveTo, verticalLineTo, horizontalLineTo, closePath, } from './path';
const toPoint = (t) => (t ? t : { x: 0, y: 0 });
/**
 * Calculate the distance between two Points
 *
 * @param p1 - Point 1
 * @param p2 - Point 2
 *
 * @internal
 */
export function calculateDistance(p1, p2) {
    return Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2);
}
/**
 * Spline Interpolation for Bezier Curve
 *
 * @param p1 - Starting point
 * @param p2 - Point between p1 and p3
 * @param p3 - Ending point
 * @param t - tension constant
 *
 * @remarks
 * Ref. http://scaledinnovation.com/analytics/splines/aboutSplines.html
 * Alt. https://www.particleincell.com/2012/bezier-splines/
 *
 * @internal
 */
export function getBezierCurveControlPoints({ p1, p2, p3, t, }) {
    const d12 = calculateDistance(p1, p2);
    const d23 = calculateDistance(p2, p3);
    const widthOfT = p3.x - p1.x;
    const heightOfT = p3.y - p1.y;
    const scaleA = (t * d12) / (d12 + d23);
    const scaleB = t - scaleA;
    const cp12 = {
        x: p2.x - scaleA * widthOfT,
        y: p2.y - scaleA * heightOfT,
    };
    const cp23 = {
        x: p2.x + scaleB * widthOfT,
        y: p2.y + scaleB * heightOfT,
    };
    return [cp12, cp23];
}
/**
 * Create a straight line path command
 *
 * @param data - An array of Points
 *
 * @example
 *
 * ```typescript
 * line([{x:0, y:0}, {x:2, y:2}]);
 * // Output:
 * // M 0,0 L 2,2
 * ```
 *
 * @alpha
 */
export const line = (data) => {
    if (data.length < 2) {
        return '';
    }
    const [start, ...rest] = data;
    return [moveTo(start), ...rest.map(lineTo)].join(' ');
};
/**
 * Create a cubic Bezier curve path command
 *
 * @param data - An array of Points
 *
 * @example
 *
 * ```typescript
 * curve([{x:0, y:0}, {x:3, y:4}, {x:9, y:16}]);
 * // Output:
 * // M 0,0 C 0,0 1.778263374435667,1.8280237767745193 3,4 C 6.278263374435667,9.828023776774518 9,16 9,16
 * ```
 *
 * @alpha
 */
export const curve = (data) => {
    if (data.length <= 2) {
        return line(data);
    }
    const [start, ...rest] = data;
    const knots = rest.slice(0, -1);
    const [end] = rest.slice(-1);
    const tension = 1 / 2;
    const cps = knots.map((current, idx, pts) => {
        const prev = pts[idx - 1] || start;
        const nxt = pts[idx + 1] || end;
        return getBezierCurveControlPoints({
            p1: toPoint(prev),
            p2: current,
            p3: toPoint(nxt),
            t: tension,
        });
    });
    const curveTo = (ep, idx) => {
        const [scp] = cps[idx - 1]?.slice(-1) || [start];
        const [ecp] = cps[idx] || [end];
        return cubicCurveTo({
            scp: toPoint(scp),
            ecp: toPoint(ecp),
            ep,
        });
    };
    return [moveTo(start), ...rest.map(curveTo)].join(' ');
};
/**
 * Create a cubic Bezier curve path then turning back to the starting point with
 * provided point of reference
 *
 * @param reference - reference coordinates, straight to y then x then the starting point
 * @param data - An array of Points
 *
 * @example
 *
 * ```typescript
 * closedCurve({x:0, y:20})([{x:0, y:0}, {x:3, y:4}, {x:9, y:16}]);
 * // Output:
 * // M 0,0 C 0,0 1.778263374435667,1.8280237767745193 3,4 C 6.278263374435667,9.828023776774518 9,16 9,16 V 20 H 0 Z
 * ```
 *
 * @alpha
 */
export const closedCurve = ({ x, y }) => (data) => {
    return [
        curve(data),
        verticalLineTo(y),
        horizontalLineTo(x),
        closePath(),
    ].join(' ');
};
