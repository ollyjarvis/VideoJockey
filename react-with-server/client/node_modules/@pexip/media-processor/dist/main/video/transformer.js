const wrapTransformController = (videoFrame, controller) => {
    return {
        get desiredSize() {
            return controller.desiredSize;
        },
        enqueue: frame => {
            if (!frame) {
                return;
            }
            if (frame instanceof VideoFrame) {
                return controller.enqueue(frame);
            }
            if (('OffscreenCanvas' in window &&
                frame instanceof OffscreenCanvas) ||
                frame instanceof HTMLCanvasElement ||
                frame instanceof HTMLVideoElement ||
                frame instanceof HTMLImageElement ||
                frame instanceof ImageBitmap) {
                const timestamp = videoFrame.timestamp ?? 0;
                videoFrame.close();
                return controller.enqueue(new VideoFrame(frame, { timestamp, alpha: 'discard' }));
            }
            throw new Error('Unexpected input frame');
        },
        error: reason => controller.error(reason),
        terminate: () => controller.terminate(),
    };
};
export const nullTransformController = (controller) => {
    return {
        get desiredSize() {
            return 0;
        },
        enqueue: frame => {
            if (('OffscreenCanvas' in window &&
                frame instanceof OffscreenCanvas) ||
                frame instanceof HTMLCanvasElement ||
                frame instanceof HTMLVideoElement ||
                frame instanceof HTMLImageElement ||
                frame instanceof ImageBitmap) {
                return controller.enqueue(frame);
            }
            throw new Error('Unexpected input frame');
        },
        error: reason => {
            throw new Error(reason);
        },
        terminate: () => controller.terminate(),
    };
};
export const adaptInputFrameTransformer = (transformer) => {
    const transform = (frame, controller) => {
        return transformer.transform?.(frame, wrapTransformController(frame, controller));
    };
    return { ...transformer, transform };
};
