import { stopStreamTracks } from '../utils';
import { AbortReason } from './constants';
export const createVideoProcessor = (transformers, processTrack) => {
    const props = {
        processing: false,
    };
    const open = async () => {
        await Promise.all(transformers.map(transformer => transformer.init()));
    };
    const process = async (source) => {
        const [track] = source.getVideoTracks();
        if (!track) {
            return source;
        }
        if (props.processing) {
            throw new Error('Cannot process when it is already processing');
        }
        props.abortController = new AbortController();
        const trackGenerated = await processTrack(track, transformers, {
            signal: props.abortController.signal,
        });
        props.outputStream = new MediaStream([
            trackGenerated,
            ...source.getAudioTracks().map(track => track.clone()),
        ]);
        props.processing = true;
        return props.outputStream;
    };
    const close = () => {
        if (!props.processing) {
            return;
        }
        props.abortController?.abort(AbortReason.Close);
        stopStreamTracks(props.outputStream);
        props.outputStream = undefined;
        props.processing = false;
        transformers.forEach(transformer => transformer.close());
    };
    const destroy = async () => {
        close();
        await Promise.all(transformers.map(transformer => transformer.destroy()));
    };
    return {
        open,
        process,
        close,
        destroy,
    };
};
