/**
 * Coordinates string
 *
 * @example
 *
 * ```
 * 30,90
 * ```
 */
export function toCoordinateString(p) {
    return p ? [p.x, p.y].join(',') : '';
}
/**
 * MoveTo Path Command
 *
 * @example
 *
 * ```
 * M 10,20
 * ```
 */
export function moveTo(p) {
    return p ? ['M', toCoordinateString(p)].join(' ') : '';
}
/**
 * Line to Path Command
 *
 * @example
 *
 * ```
 * L 10,20
 * ```
 */
export function lineTo(p) {
    return p ? ['L', toCoordinateString(p)].join(' ') : '';
}
/**
 * Draw a horizontal line from the current point to the end point, which is
 * specified by the x parameter and the current point's y coordinate.
 *
 * @example
 *
 * ```
 * H 10
 * ```
 */
export function horizontalLineTo(x) {
    return `H ${x}`;
}
/**
 * Draw a vertical line from the current point to the end point, which is
 * specified by the y parameter and the current point's x coordinate.
 *
 * @example
 *
 * ```
 * V 10
 * ```
 */
export function verticalLineTo(y) {
    return `V ${y}`;
}
/**
 * Cubic Bezier Curve Path Command
 *
 * @example
 *
 * ```
 * C 30,90 25,10 50,10
 * ```
 */
export function cubicCurveTo({ scp, ecp, ep }) {
    return scp && ecp && ep
        ? ['C', ...[scp, ecp, ep].map(toCoordinateString)].join(' ')
        : '';
}
/**
 * Smooth Cubic Bezier Curve Path Command
 *
 * @example
 *
 * ```
 * S 25,10 50,10
 * ```
 */
export function smoothCubicCurveTo({ ecp, ep, }) {
    return ecp && ep
        ? ['S', ...[ecp, ep].map(toCoordinateString)].join(' ')
        : '';
}
/**
 *  Close the current subpath by connecting the last point of the path with its
 *  initial point.
 *
 * @example
 *
 * ```
 * Z
 * ```
 */
export function closePath() {
    return 'Z';
}
