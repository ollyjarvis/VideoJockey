/// <reference types="audioworklet" />
/// <reference types="audioworklet" />
/**
 * Audio Processor Message to post to AudioWorkletProcessor
 */
export type AudioProcessorRelease = {
    type: 'release';
};
export type AudioProcessorEnable = {
    type: 'enable';
    value: boolean;
};
export type AudioProcessorMessageEvent = MessageEvent<AudioProcessorRelease | AudioProcessorEnable>;
type ChannelCountMode = 'clamped-max' | 'explicit' | 'max';
type ChannelInterpretation = 'discrete' | 'speakers';
interface AudioNodeOptions {
    channelCount?: number;
    channelCountMode?: ChannelCountMode;
    channelInterpretation?: ChannelInterpretation;
}
export interface AudioWorkletNodeOptions extends AudioNodeOptions {
    numberOfInputs?: number;
    numberOfOutputs?: number;
    outputChannelCount?: number[];
    parameterData?: Record<string, number>;
    processorOptions?: any;
}
/**
 * Pass the wasm module from `AudioWorkletNode` to `AudioWorkletProcessor` via
 * `AudioWorkletNodeOptions`
 *
 *  - data: The wasm module data
 *  - sampleRate: The sample rate for the context
 *  - shouldSendVAD: Should post VADs to main
 */
export interface WasmProcessorOptions {
    data: BufferSource;
    sampleRate: number;
    shouldSendVAD?: boolean;
}
export interface WasmWorkletNodeOptions extends AudioWorkletNodeOptions {
    processorOptions?: WasmProcessorOptions;
}
/**
 * A wrapper for the Denoise wasm module
 */
export interface Denoise {
    vad(channel: number): number;
    free(): void;
    pipe(inputs: Float32Array[][], outputs: Float32Array[][]): void;
}
export {};
