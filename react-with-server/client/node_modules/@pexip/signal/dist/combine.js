import { createSignal } from './signal';
export const combine = (...signals) => {
    const latest = Array.from(signals, _ => undefined);
    let detachCombinedSignals = [];
    const attach = () => {
        detachCombinedSignals = signals.map((signal, i) => signal.add(value => {
            latest[i] = value;
            combinedSignal.emit(latest);
        }));
    };
    const detach = () => {
        detachCombinedSignals.forEach(detach => detach());
    };
    const combinedSignal = createSignal();
    const combinedSignalProxy = new Proxy(combinedSignal, {
        get: (target, p, args) => {
            switch (p) {
                case 'add':
                    return (...args) => {
                        const value = target[p](...args);
                        if (detachCombinedSignals.length === 0 &&
                            combinedSignal.size > 0) {
                            attach();
                        }
                        return value;
                    };
                case 'remove':
                    return (...args) => {
                        const value = target[p](...args);
                        if (combinedSignal.size === 0) {
                            detach();
                        }
                        return value;
                    };
                default:
                    return Reflect.get(target, p, args);
            }
        },
    });
    return combinedSignalProxy;
};
