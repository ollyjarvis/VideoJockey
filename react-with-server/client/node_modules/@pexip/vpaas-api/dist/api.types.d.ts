/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/oauth/token': {
        /**
         * Exchange a client-signed JWT for an OAuth 2 access token
         * @description Get an access token
         */
        post: operations['getAccessToken'];
    };
    '/v1/orgs': {
        /** @description List organisations */
        get: operations['listOrgs'];
        /** @description Create an organisation */
        post: operations['createOrg'];
    };
    '/v1/orgs/{organisation_id}': {
        /** @description Get an organisation */
        get: operations['getOrg'];
        /** @description Patch an organisation */
        patch: operations['patchOrg'];
    };
    '/v1/orgs/{organisation_id}/projects': {
        /** @description List an organisation's projects */
        get: operations['listOrgProjects'];
    };
    '/v1/projects': {
        /** @description List projects */
        get: operations['listProjects'];
        /** @description Create a project */
        post: operations['createProject'];
    };
    '/v1/projects/{project_id}': {
        /** @description Get a project */
        get: operations['getProject'];
        /** @description Delete a project */
        delete: operations['deleteProject'];
        /** @description Patch a project */
        patch: operations['patchProject'];
    };
    '/v1/projects/{project_id}/keys': {
        /** @description List a project's keys */
        get: operations['listProjectKeys'];
        /** @description Create a key */
        post: operations['createProjectKey'];
    };
    '/v1/projects/{project_id}/keys/{key_id}': {
        /** @description Get a key */
        get: operations['getKey'];
        /** @description Delete a key */
        delete: operations['deleteKey'];
        /** @description Patch a key */
        patch: operations['patchKey'];
    };
    '/v1/meetings': {
        /** @description Get list of meetings */
        get: operations['listMeetings'];
        /** @description Create a meeting */
        post: operations['createMeeting'];
    };
    '/v1/meetings/{meeting_id}': {
        /** @description Get a meeting */
        get: operations['getMeeting'];
        /**
         * Terminate/cancel a meeting
         * @description Terminate the meeting (if it is running) and place it into a state where it cannot be (re)started.
         */
        delete: operations['deleteMeeting'];
        /** @description Edit a meeting */
        patch: operations['patchMeeting'];
    };
    '/v1/meetings/{meeting_id}/join': {
        /** @description Join a meeting */
        post: operations['joinMeeting'];
    };
    '/v1/meetings/{meeting_id}/participants': {
        /** @description List the participants of a meeting */
        get: operations['listMeetingParticipants'];
        /** @description Create a meeting participant */
        post: operations['createParticipant'];
    };
    '/v1/meetings/{meeting_id}/participants/{participant_id}': {
        /** @description Get a participant */
        get: operations['getParticipant'];
        /**
         * Remove a participant from a meeting
         * @description Remove a participant from a meeting.
         * If the meeting is already running, the participant will be removed from the running meeting and unable to rejoin.
         */
        delete: operations['deleteParticipant'];
    };
    '/v1/meetings/{meeting_id}/participants/{participant_id}/regenerate_secret': {
        /** @description Regenerate the participant's secret */
        post: operations['regenerateParticipantToken'];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccessToken: {
            /** @description Access token validity duration (in seconds) */
            expires_in: number;
            /** @enum {unknown} */
            token_type: 'Bearer';
            /** @description Space separated list of granted scopes */
            scope: string;
            /** @description The access token */
            access_token: string;
        };
        Pagination: {
            objects: unknown[];
            /**
             * @description Cursor for pagination, empty string when no more result
             * @example bb5h3heefq63m7dayhj5ibuapy
             */
            cursor: string;
        };
        Organisation: {
            /** @example abcdefghijklmnopqrstuvwxyz */
            id: string;
            /** @example ACME Org */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        Project: {
            /** @example abcdefghijklmnopqrstuvwxyz */
            id: string;
            /** @example abcdefghijklmnopqrstuvwxyz */
            organisation_id: string;
            /** @example Development App */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        Key: {
            /** @example abcdefghijklmnopqrstuvwxyz */
            id: string;
            /** @example abcdefghijklmnopqrstuvwxyz */
            project_id: string;
            /**
             * @example -----BEGIN PUBLIC KEY-----
             * MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC/SZrZ8OIhrpZuc/li7YZO850T
             * MpRHXYnlK+pMCFHMPVL3kYRwgwx7DUzqzcgeplC98MDYeT3T6F6pAUCJ8e7YqcUk
             * brWQxBZ883agHZxm9SI8/U9pXL27G5znEvfySyKM5FO0+kgMatvchacnqa9yDgU8
             * 9bjIg4jV36RbrCfPiwIDAQAB
             * -----END PUBLIC KEY-----
             */
            public_key: string;
            /** @enum {string} */
            key_type: 'rsa' | 'ec' | 'ed448' | 'ed25519';
            /** @example SHA256=00:11:22:33:44:55:66:77:88:99:aa:bb:cc:dd:ee:ff:00:11:22:33:44:55:66:77:88:99:aa:bb:cc:dd:ee:ff */
            fingerprint: string;
            /** Format: date-time */
            last_used?: string | null;
            use_count?: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        Meeting: {
            /** @example abcdefghijklmnopqrstuvwxyz */
            id: string;
            /**
             * @description current meeting status
             * @enum {string}
             */
            status?: 'unknown' | 'ready' | 'running' | 'ended';
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ParticipantWithSecret: {
            /** @example abcdefghijklmnopqrstuvwxyz */
            id: string;
            /** @example abcdefghijklmnopqrstuvwxyz */
            meeting_id: string;
            /** @enum {unknown} */
            status: 'ready' | 'joined' | 'left' | 'removed';
            participant_secret: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        Participant: {
            /** @example abcdefghijklmnopqrstuvwxyz */
            id: string;
            /** @example abcdefghijklmnopqrstuvwxyz */
            meeting_id: string;
            /** @enum {unknown} */
            status: 'ready' | 'joined' | 'left' | 'removed';
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        ParticipantJoinInfo: {
            participant_id: string;
            participant_secret: string;
        };
        JoinDetails: {
            /** Format: uri */
            location: string;
            token: string;
        };
        Error: {
            /** @example 400 */
            status: number;
            /** @example Reason */
            reason: string;
            description?: string;
            details?: {
                [key: string]: string[];
            };
        };
    };
    responses: {
        /** @description No Content */
        NoContent: {
            content: never;
        };
        /** @description Not Modified */
        NotModified: {
            content: never;
        };
        /** @description Client provided an invalid request */
        BadRequest: {
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Resource not found */
        NotFound: {
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Resource is gone */
        Gone: {
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Service is unavailable */
        ServiceUnavailable: {
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
    };
    parameters: {
        /** @description Organisation ID */
        OrganisationID: string;
        /** @description Project ID */
        ProjectID: string;
        /** @description Key ID */
        KeyID: string;
        /** @description Meeting ID */
        MeetingID: string;
        /** @description Participant ID */
        ParticipantID: string;
        /** @description Cursor for pagination */
        Cursor?: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type external = Record<string, never>;
export interface operations {
    /**
     * Exchange a client-signed JWT for an OAuth 2 access token
     * @description Get an access token
     */
    getAccessToken: {
        requestBody: {
            content: {
                'application/x-www-form-urlencoded': {
                    /** @enum {unknown} */
                    grant_type: 'client_credentials';
                    /** @enum {unknown} */
                    client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer';
                    /** Format: jwt */
                    client_assertion: string;
                };
            };
        };
        responses: {
            /** @description Newly created access token */
            200: {
                content: {
                    'application/json': components['schemas']['AccessToken'];
                };
            };
            400: components['responses']['BadRequest'];
        };
    };
    /** @description List organisations */
    listOrgs: {
        parameters: {
            query?: {
                cursor?: components['parameters']['Cursor'];
            };
        };
        responses: {
            /** @description List of organisations */
            200: {
                content: {
                    'application/json': components['schemas']['Pagination'] & {
                        objects?: Array<components['schemas']['Organisation']>;
                    };
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Create an organisation */
    createOrg: {
        requestBody: {
            content: {
                'application/json': {
                    /** @example ACME Org */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Newly created organisation */
            200: {
                content: {
                    'application/json': components['schemas']['Organisation'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Get an organisation */
    getOrg: {
        parameters: {
            path: {
                organisation_id: components['parameters']['OrganisationID'];
            };
        };
        responses: {
            /** @description Organisation */
            200: {
                content: {
                    'application/json': components['schemas']['Organisation'];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Patch an organisation */
    patchOrg: {
        parameters: {
            path: {
                organisation_id: components['parameters']['OrganisationID'];
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @example ACME Corp */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Updated Organisation */
            200: {
                content: {
                    'application/json': components['schemas']['Organisation'];
                };
            };
            304: components['responses']['NotModified'];
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description List an organisation's projects */
    listOrgProjects: {
        parameters: {
            query?: {
                cursor?: components['parameters']['Cursor'];
            };
            path: {
                organisation_id: components['parameters']['OrganisationID'];
            };
        };
        responses: {
            /** @description list of projects */
            200: {
                content: {
                    'application/json': components['schemas']['Pagination'] & {
                        objects?: Array<components['schemas']['Project']>;
                    };
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description List projects */
    listProjects: {
        parameters: {
            query?: {
                cursor?: components['parameters']['Cursor'];
            };
        };
        responses: {
            /** @description list of projects */
            200: {
                content: {
                    'application/json': components['schemas']['Pagination'] & {
                        objects?: Array<components['schemas']['Project']>;
                    };
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Create a project */
    createProject: {
        requestBody: {
            content: {
                'application/json': {
                    /** @example abcdefghijklmnopqrstuvwxyz */
                    organisation_id: string;
                    /** @example Example Project */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Newly created project */
            200: {
                content: {
                    'application/json': components['schemas']['Project'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Get a project */
    getProject: {
        parameters: {
            path: {
                project_id: components['parameters']['ProjectID'];
            };
        };
        responses: {
            /** @description Project */
            200: {
                content: {
                    'application/json': components['schemas']['Project'];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Delete a project */
    deleteProject: {
        parameters: {
            path: {
                project_id: components['parameters']['ProjectID'];
            };
        };
        responses: {
            204: components['responses']['NoContent'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Patch a project */
    patchProject: {
        parameters: {
            path: {
                project_id: components['parameters']['ProjectID'];
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @example Prod project */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Updated project */
            200: {
                content: {
                    'application/json': components['schemas']['Project'];
                };
            };
            304: components['responses']['NotModified'];
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description List a project's keys */
    listProjectKeys: {
        parameters: {
            query?: {
                cursor?: components['parameters']['Cursor'];
            };
            path: {
                project_id: components['parameters']['ProjectID'];
            };
        };
        responses: {
            /** @description Keys */
            200: {
                content: {
                    'application/json': components['schemas']['Pagination'] & {
                        objects?: Array<components['schemas']['Key']>;
                    };
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Create a key */
    createProjectKey: {
        parameters: {
            path: {
                project_id: components['parameters']['ProjectID'];
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @example Example Key */
                    name: string;
                    /**
                     * Format: public-key
                     * @example -----BEGIN PUBLIC KEY-----
                     * MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC/SZrZ8OIhrpZuc/li7YZO850T
                     * MpRHXYnlK+pMCFHMPVL3kYRwgwx7DUzqzcgeplC98MDYeT3T6F6pAUCJ8e7YqcUk
                     * brWQxBZ883agHZxm9SI8/U9pXL27G5znEvfySyKM5FO0+kgMatvchacnqa9yDgU8
                     * 9bjIg4jV36RbrCfPiwIDAQAB
                     * -----END PUBLIC KEY-----
                     */
                    public_key: string;
                };
            };
        };
        responses: {
            /** @description Newly created project key */
            200: {
                content: {
                    'application/json': components['schemas']['Key'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Get a key */
    getKey: {
        parameters: {
            path: {
                project_id: components['parameters']['ProjectID'];
                key_id: components['parameters']['KeyID'];
            };
        };
        responses: {
            /** @description Key */
            200: {
                content: {
                    'application/json': components['schemas']['Key'];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Delete a key */
    deleteKey: {
        parameters: {
            path: {
                project_id: components['parameters']['ProjectID'];
                key_id: components['parameters']['KeyID'];
            };
        };
        responses: {
            204: components['responses']['NoContent'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Patch a key */
    patchKey: {
        parameters: {
            path: {
                project_id: components['parameters']['ProjectID'];
                key_id: components['parameters']['KeyID'];
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * Format: public-key
                     * @example -----BEGIN PUBLIC KEY-----
                     * MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC/SZrZ8OIhrpZuc/li7YZO850T
                     * MpRHXYnlK+pMCFHMPVL3kYRwgwx7DUzqzcgeplC98MDYeT3T6F6pAUCJ8e7YqcUk
                     * brWQxBZ883agHZxm9SI8/U9pXL27G5znEvfySyKM5FO0+kgMatvchacnqa9yDgU8
                     * 9bjIg4jV36RbrCfPiwIDAQAB
                     * -----END PUBLIC KEY-----
                     */
                    public_key?: string;
                };
            };
        };
        responses: {
            /** @description Updated key */
            200: {
                content: {
                    'application/json': components['schemas']['Key'];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Get list of meetings */
    listMeetings: {
        parameters: {
            query?: {
                cursor?: components['parameters']['Cursor'];
            };
        };
        responses: {
            /** @description List of meetings */
            200: {
                content: {
                    'application/json': components['schemas']['Pagination'] & {
                        objects?: Array<components['schemas']['Meeting']>;
                    };
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Create a meeting */
    createMeeting: {
        /** @description Configuration for new meeting */
        requestBody: {
            content: {
                'application/json': Record<string, never>;
            };
        };
        responses: {
            /** @description Newly created meeting */
            200: {
                content: {
                    'application/json': components['schemas']['Meeting'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Get a meeting */
    getMeeting: {
        parameters: {
            path: {
                meeting_id: components['parameters']['MeetingID'];
            };
        };
        responses: {
            /** @description Meeting */
            200: {
                content: {
                    'application/json': components['schemas']['Meeting'];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /**
     * Terminate/cancel a meeting
     * @description Terminate the meeting (if it is running) and place it into a state where it cannot be (re)started.
     */
    deleteMeeting: {
        parameters: {
            path: {
                meeting_id: components['parameters']['MeetingID'];
            };
        };
        responses: {
            /** @description Meeting was successfully cancelled/terminated */
            200: {
                content: {
                    'application/json': components['schemas']['Meeting'];
                };
            };
            /** @description Meeting was already cancelled/terminated */
            304: {
                content: never;
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Edit a meeting */
    patchMeeting: {
        parameters: {
            path: {
                meeting_id: components['parameters']['MeetingID'];
            };
        };
        responses: {
            /** @description Updated meeting */
            200: {
                content: {
                    'application/json': components['schemas']['Meeting'];
                };
            };
            304: components['responses']['NotModified'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Join a meeting */
    joinMeeting: {
        parameters: {
            path: {
                meeting_id: components['parameters']['MeetingID'];
            };
        };
        /** @description Join information for participant */
        requestBody: {
            content: {
                'application/json': components['schemas']['ParticipantJoinInfo'];
            };
        };
        responses: {
            /** @description Join request successful */
            200: {
                content: {
                    'application/json': components['schemas']['JoinDetails'];
                };
            };
            400: components['responses']['BadRequest'];
            404: components['responses']['NotFound'];
            410: components['responses']['Gone'];
            503: components['responses']['ServiceUnavailable'];
        };
    };
    /** @description List the participants of a meeting */
    listMeetingParticipants: {
        parameters: {
            query?: {
                cursor?: components['parameters']['Cursor'];
            };
            path: {
                meeting_id: components['parameters']['MeetingID'];
            };
        };
        responses: {
            /** @description List of participants */
            200: {
                content: {
                    'application/json': components['schemas']['Pagination'] & {
                        objects?: Array<components['schemas']['Participant']>;
                    };
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Create a meeting participant */
    createParticipant: {
        parameters: {
            path: {
                meeting_id: components['parameters']['MeetingID'];
            };
        };
        /** @description Configuration for new participant */
        requestBody: {
            content: {
                'application/json': Record<string, never>;
            };
        };
        responses: {
            /** @description Newly created participant */
            200: {
                content: {
                    'application/json': components['schemas']['ParticipantWithSecret'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Get a participant */
    getParticipant: {
        parameters: {
            path: {
                meeting_id: components['parameters']['MeetingID'];
                participant_id: components['parameters']['ParticipantID'];
            };
        };
        responses: {
            /** @description Participant information */
            200: {
                content: {
                    'application/json': components['schemas']['Participant'];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /**
     * Remove a participant from a meeting
     * @description Remove a participant from a meeting.
     * If the meeting is already running, the participant will be removed from the running meeting and unable to rejoin.
     */
    deleteParticipant: {
        parameters: {
            path: {
                meeting_id: components['parameters']['MeetingID'];
                participant_id: components['parameters']['ParticipantID'];
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description Reason sent to the client explaining why they were removed
                     * @default An Administrator disconnected you from the meeting
                     */
                    reason?: string;
                };
            };
        };
        responses: {
            /** @description Participant was successfully removed */
            200: {
                content: {
                    'application/json': components['schemas']['Participant'];
                };
            };
            /** @description Participant was already removed */
            304: {
                content: never;
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
    /** @description Regenerate the participant's secret */
    regenerateParticipantToken: {
        parameters: {
            path: {
                meeting_id: components['parameters']['MeetingID'];
                participant_id: components['parameters']['ParticipantID'];
            };
        };
        responses: {
            /** @description Participant information */
            200: {
                content: {
                    'application/json': components['schemas']['ParticipantWithSecret'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
        };
    };
}
