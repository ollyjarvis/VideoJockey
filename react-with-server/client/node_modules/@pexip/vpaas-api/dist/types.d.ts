/**
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "ErrorType".
 */
export type ErrorType = 'authentication_failed' | 'unsupported_message' | 'invalid_json' | 'invalid_message' | 'sdp_offer_processing' | 'sdp_offer_update_processing' | 'server_error' | 'invalid_parameter' | 'resource_unavailable';
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 *
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "MediaStream".
 */
export type MediaStream = VideoStream | AudioStream;
/**
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "Codec".
 */
export type Codec = 'h264' | 'vp8' | 'vp9' | 'opus' | 'rtx';
/**
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "MediaSemantic".
 */
export type MediaSemantic = 'main' | 'presentation' | 'misc';
/**
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "ParticipantID".
 */
export type ParticipantID = string;
/**
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "VpaasWebsocketMessageTypesUnion".
 */
export type VpaasWebsocketMessageTypesUnion = (ServerError & {
    type: 'server_error';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (Error & {
    type: 'error';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (Ping & {
    type: 'ping';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (Pong & {
    type: 'pong';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (Success & {
    type: 'success';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (Auth & {
    type: 'authenticate';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (MediaOffer & {
    type: 'media_offer';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (AddNewCandidate & {
    type: 'add_new_candidate';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (RosterUpdate & {
    type: 'roster_update';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (RequestStream & {
    type: 'request_stream';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (RequestStreamResponse & {
    type: 'request_stream_response';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
}) | (DisconnectStream & {
    type: 'disconnect_stream';
    id?: string;
    ref?: string;
    trace?: {
        traceparent?: string;
        tracestate?: string;
    };
});
/**
 * Top properties represent message types. Additional types are referenced from definitions.
 */
export interface VpaasWebsocketMessageTypes {
    server_error?: ServerError;
    error?: Error;
    ping?: Ping;
    pong?: Pong;
    success?: Success;
    authenticate?: Auth;
    media_offer?: MediaOffer;
    add_new_candidate?: AddNewCandidate;
    roster_update?: RosterUpdate;
    request_stream?: RequestStream;
    request_stream_response?: RequestStreamResponse;
    disconnect_stream?: DisconnectStream;
    [k: string]: unknown;
}
/**
 * Server error
 */
export interface ServerError {
    error_message: string;
}
/**
 * Error message
 */
export interface Error {
    error_message: null | string;
    error_type: ErrorType;
    detail: {
        [k: string]: unknown;
    };
}
/**
 * Ping message
 */
export interface Ping {
}
/**
 * Pong ping reply message
 */
export interface Pong {
}
/**
 * Operation referred in ref was a success
 */
export interface Success {
    reason: string;
}
/**
 * Message sent from client to server to authenticate client
 */
export interface Auth {
    token: string;
    participant_id: string;
}
/**
 * Media offer message
 */
export interface MediaOffer {
    sdp: string;
}
/**
 * New remote transport candidate available message
 */
export interface AddNewCandidate {
    candidate: string;
    mid: string;
    ufrag: string;
    pwd: string;
}
/**
 * A new roster update is available
 */
export interface RosterUpdate {
    participants: {
        [k: string]: RosterEntry;
    };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 *
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "RosterEntry".
 */
export interface RosterEntry {
    streams: {
        [k: string]: MediaStream;
    };
}
/**
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "VideoStream".
 */
export interface VideoStream {
    codec: Codec;
    semantic: MediaSemantic;
    layers: Layer[];
    type: 'video';
}
/**
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "Layer".
 */
export interface Layer {
    rid: string;
    width: number;
    height: number;
}
/**
 * This interface was referenced by `VpaasWebsocketMessageTypes`'s JSON-Schema
 * via the `definition` "AudioStream".
 */
export interface AudioStream {
    codec: Codec;
    semantic: MediaSemantic;
    type: 'audio';
}
/**
 * Client request to receive a stream
 */
export interface RequestStream {
    producer_id: string;
    stream_id: string;
    rid: null | string;
    receive_mid: null | string;
}
/**
 * Response to RequestStream message
 */
export interface RequestStreamResponse {
    receive_mid: string;
}
/**
 * Client request to stop receiving on a given stream
 */
export interface DisconnectStream {
    receive_mid: string;
}
