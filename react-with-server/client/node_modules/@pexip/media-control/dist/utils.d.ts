import type { MediaDeviceInfoLike } from './types';
import { MediaDeviceKinds } from './types';
export declare const isSameDeviceKind: (kind: MediaDeviceKinds) => (device: MediaDeviceInfoLike) => boolean;
export declare const isAudioInput: (device: MediaDeviceInfoLike) => boolean;
export declare const isVideoInput: (device: MediaDeviceInfoLike) => boolean;
export declare const isAudioOutput: (device: MediaDeviceInfoLike) => boolean;
/**
 * Check if provided device is a permission-granted device by inspecting the
 * device label
 *
 * @param device - The device to check
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/label#value}
 **/
export declare const isDeviceGranted: (device: MediaDeviceInfoLike) => boolean;
export declare const not: <T = void>(fn: (arg: T) => boolean) => (arg: T) => boolean;
/**
 * Compare 2 devices to see if they are the same by `deviceId` or `label` as
 * a fallback
 *
 * @beta
 */
export declare const compareDevices: (deviceInfo: MediaDeviceInfoLike, key?: Exclude<keyof MediaDeviceInfoLike, 'kind' | 'settings'>) => (anotherDeviceInfo: MediaDeviceInfoLike) => boolean;
/**
 * Lookup the the `device` from `devices` list
 *
 * @remarks
 * When we cannot find the device by `deviceId`, we compare the label as last
 * resort, and return the first one.
 *
 * @param deviceToFind - Provide a device info to be used for the searching
 * @param useFallback - Whether to use `label` as a fallback when there is no
 * match from using `deviceId`
 *
 * @beta
 */
export declare const findDevice: (deviceToFind: MediaDeviceInfoLike, useFallback?: boolean) => (devices: readonly MediaDeviceInfoLike[]) => MediaDeviceInfoLike | undefined;
