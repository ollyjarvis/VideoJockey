import type { ConstraintDeviceParameters, DeviceConstraint, InputConstraintSet } from './types';
export declare const isBoolean: (t: unknown) => t is boolean;
export declare const isUndefined: (t: unknown) => t is undefined;
/**
 * Check if provided variable is of type number and is NOT NaN
 */
export declare const isNumber: (t: unknown) => t is number;
/**
 * Check if provided variable is of type integer
 */
export declare const isInteger: (t: unknown) => t is number;
/**
 * Check if provided variable is of type floating point
 */
export declare const isFloat: (t: unknown) => t is number;
/**
 * Reference https://w3c.github.io/mediacapture-main/#dom-mediatrackconstraintset
 */
export declare const CONSTRAIN_STRING_KEYS: readonly ["facingMode", "resizeMode", "deviceId", "groupId"];
export declare const EXTENDED_CONSTRAIN_STRING_KEYS: readonly ["videoSegmentation", "videoSegmentationModel", "backgroundImageUrl", "contentHint"];
export type ExtendedConstrainStringKeys = (typeof EXTENDED_CONSTRAIN_STRING_KEYS)[number];
export type ConstrainStringKeys = (typeof CONSTRAIN_STRING_KEYS)[number];
export declare const CONSTRAIN_U_LONG_KEYS: readonly ["width", "height", "sampleRate", "sampleSize", "channelCount"];
export declare const EXTENDED_CONSTRAIN_U_LONG_KEYS: readonly ["backgroundBlurAmount", "edgeBlurAmount"];
export type ExtendedConstrainULongKeys = (typeof EXTENDED_CONSTRAIN_U_LONG_KEYS)[number];
export type ConstrainULongKeys = (typeof CONSTRAIN_U_LONG_KEYS)[number];
export declare const CONSTRAIN_DOUBLE_KEYS: readonly ["aspectRatio", "frameRate", "latency"];
export declare const EXTENDED_CONSTRAIN_DOUBLE_KEYS: readonly ["foregroundThreshold", "maskCombineRatio"];
export type ExtendedConstrainDoubleKeys = (typeof EXTENDED_CONSTRAIN_DOUBLE_KEYS)[number];
export type ConstrainDoubleKeys = (typeof CONSTRAIN_DOUBLE_KEYS)[number];
export declare const CONSTRAIN_BOOLEAN_KEYS: readonly ["echoCancellation", "autoGainControl", "noiseSuppression", "pan", "tilt", "zoom"];
/**
 * Extends boolean constraint keys for our own implementation of the media
 * feature
 */
export declare const EXTENDED_CONSTRAIN_BOOLEAN_KEYS: readonly ["vad", "asd", "mixWithAdditionalMedia", "denoise"];
export type ExtendedConstrainBooleanKeys = (typeof EXTENDED_CONSTRAIN_BOOLEAN_KEYS)[number];
export type ConstrainBooleanKeys = (typeof CONSTRAIN_BOOLEAN_KEYS)[number];
/**
 * The keys from the `MediaTrackConstraintSet`
 */
export declare const CONSTRAINT_SET_KEYS: readonly ["aspectRatio", "frameRate", "latency", "width", "height", "sampleRate", "sampleSize", "channelCount", "facingMode", "resizeMode", "deviceId", "groupId", "echoCancellation", "autoGainControl", "noiseSuppression", "pan", "tilt", "zoom"];
export declare const isConstrainStringKeys: (t: unknown) => t is "deviceId" | "groupId" | "resizeMode" | "facingMode";
export declare const isExtendedConstrainStringKeys: (t: unknown) => t is "videoSegmentation" | "videoSegmentationModel" | "backgroundImageUrl" | "contentHint";
export declare const isConstrainULongKeys: (t: unknown) => t is "width" | "height" | "sampleRate" | "sampleSize" | "channelCount";
export declare const isExtendedConstrainULongKeys: (t: unknown) => t is "backgroundBlurAmount" | "edgeBlurAmount";
export declare const isConstrainDoubleKeys: (t: unknown) => t is "aspectRatio" | "frameRate" | "latency";
export declare const isExtendedConstrainDoubleKeys: (t: unknown) => t is "foregroundThreshold" | "maskCombineRatio";
export declare const isConstrainBooleanKeys: (t: unknown) => t is "pan" | "tilt" | "zoom" | "echoCancellation" | "autoGainControl" | "noiseSuppression";
export declare const isExtendedConstrainBooleanKeys: (t: unknown) => t is "denoise" | "vad" | "asd" | "mixWithAdditionalMedia";
export declare const isMediaTrackConstraintSetKey: (t: string) => t is keyof MediaTrackConstraintSet;
export declare const isMediaTrackConstraintsKey: (t: string) => t is keyof MediaTrackConstraints;
export declare const isMediaTrackConstraints: (t: unknown) => t is MediaTrackConstraints;
/**
 * Check if provided is `MediaDeviceInfo`
 *
 * @beta
 */
export declare const isMediaDeviceInfo: (t: unknown) => t is MediaDeviceInfo;
export declare const isMediaDeviceInfoArray: (t: unknown) => t is MediaDeviceInfo[];
export declare const isDeviceConstraint: (t: unknown) => t is DeviceConstraint;
export declare const isConstraintDOMString: (t: unknown) => t is string | string[];
declare const CONSTRAIN_PARAM_KEYS: readonly ["exact", "ideal"];
export type ConstrainParamKeys = (typeof CONSTRAIN_PARAM_KEYS)[number];
declare const CONSTRAIN_RANGE_KEYS: readonly ["min", "max"];
export type ConstrainRangeKeys = (typeof CONSTRAIN_RANGE_KEYS)[number];
export type ConstrainRangeParamKeys = ConstrainParamKeys | ConstrainRangeKeys;
export declare const isConstrainDOMParameters: <R>(isType: (x: unknown) => boolean, keys?: readonly ConstrainRangeParamKeys[]) => (t: unknown) => t is R;
export declare const isConstrainDOMStringParameters: (t: unknown) => t is ConstrainDOMStringParameters;
export declare const isConstrainBooleanParameters: (t: unknown) => t is ConstrainBooleanParameters;
/**
 * Check if provided var is a constraint object with `min` and/or `max` key only
 */
export declare const isConstrainRange: (t: unknown) => t is ConstrainDoubleRange;
export declare const isConstrainDoubleRange: (t: unknown) => t is ConstrainDoubleRange;
export declare const isConstrainULongRange: (t: unknown) => t is ConstrainULongRange;
export declare const isConstraintDeviceParameters: (t: unknown) => t is ConstraintDeviceParameters;
export declare const isConstraintSetDevice: (t: unknown) => t is DeviceConstraint | ConstraintDeviceParameters | undefined;
type ExtendedConstraintSet = Pick<InputConstraintSet, ExtendedConstrainULongKeys | ExtendedConstrainDoubleKeys | ExtendedConstrainStringKeys | ExtendedConstrainBooleanKeys | 'device'>;
export declare const isExtendedConstraint: (t: unknown) => t is ExtendedConstraintSet;
export declare const isInputConstraintSet: (t: unknown) => t is InputConstraintSet;
/**
 * Check if provided is `MediaStreamTrack`
 *
 * @beta
 */
export declare const isMediaStreamTrack: (m: unknown) => m is MediaStreamTrack;
export declare const isFacingMode: (s: unknown) => s is "user" | "environment" | "left" | "right";
export {};
