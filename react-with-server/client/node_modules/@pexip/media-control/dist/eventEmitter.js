/**
 * MediaStreamTrack Events
 *
 * @remarks
 * See MDN {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack#Events | Events}
 *
 * @beta
 */
export var MediaEventType;
(function (MediaEventType) {
    /**
     * Sent to the MediaStreamTrack when the value of the muted property is
     * changed to true, indicating that the track is unable to provide data
     * temporarily (such as when the network is experiencing a service
     * malfunction).
     */
    MediaEventType["Mute"] = "mute";
    /**
     * Sent to the track when data becomes available again, ending the muted state.
     */
    MediaEventType["Unmute"] = "unmute";
    /**
     * Sent when playback of the track ends (when the value readyState changes to
     * ended).
     */
    MediaEventType["Ended"] = "ended";
    /**
     * Fired when a media input or output device is attached to or removed from
     * the user's computer.
     *
     * @remarks
     * See MDN {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices#Events | Events}
     */
    MediaEventType["DevicesChanged"] = "devices:changed";
    /**
     * Found new devices from authorized device list
     */
    MediaEventType["DevicesFound"] = "devices:found";
    /**
     * Lost devices from authorized device list
     */
    MediaEventType["DevicesLost"] = "devices:lost";
    /**
     * Lost device from authorized device list
     */
    MediaEventType["DeviceLost"] = "device:lost";
    /**
     * Unauthorized devices
     */
    MediaEventType["DevicesUnauthorized"] = "devices:unauthorized";
    /**
     * No Input Devices, and no further device events will be emitted
     */
    MediaEventType["NoInputDevices"] = "devices:noinput";
    /**
     * Other errors
     */
    MediaEventType["Error"] = "error";
    /**
     * When stream
     */
    MediaEventType["Stream"] = "stream";
})(MediaEventType || (MediaEventType = {}));
export const eventEmitter = () => {
    const element = document.createElement('a');
    const createEvent = (data) => {
        return new CustomEvent('data', { detail: data });
    };
    return {
        dispatch(event) {
            element.dispatchEvent(createEvent(event));
        },
        subscriber(listener, onUnsubscribe) {
            element.addEventListener('data', listener, false);
            return () => {
                element.removeEventListener('data', listener, false);
                onUnsubscribe();
            };
        },
    };
};
