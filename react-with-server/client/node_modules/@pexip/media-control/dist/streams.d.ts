import type { MediaDeviceRequest, StreamTrackEventHandlers, Unsubscribe } from './types';
import type { Dispatch } from './eventEmitter';
import type { StreamTrackMap } from './streamTrackMap';
/**
 * Handle media streaming related functions and events
 *
 * @returns getUserMedia function to stream media
 *
 * @internal
 */
export declare const handleMediaStream: ({ dispatch, getDefaultConstraints, streamTrackMap, }: {
    dispatch: Dispatch;
    getDefaultConstraints: () => MediaStreamConstraints;
    streamTrackMap: StreamTrackMap;
}) => {
    getUserMedia: ({ audio, video, }: MediaDeviceRequest) => Promise<MediaStream>;
};
/**
 * Create a MediaStreamTrack's native events subscription
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack#events
 *
 * @param track - The track used for the subscription
 * @param handlers - An object contains the event handlers
 */
export declare const createStreamTrackEventSubscriptions: (track: MediaStreamTrack, handlers: StreamTrackEventHandlers) => Unsubscribe;
