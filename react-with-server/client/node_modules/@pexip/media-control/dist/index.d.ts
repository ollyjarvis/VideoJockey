/**
 * media-control is meant to extend the mediaDevices api methods such as
 * `getUserMedia`, `enumerateDevices` and events on media streams and tracks.
 * The final goal is to have a library that gives a stable and robust way to use
 * these methods while guaranteeing that the developer has better control over
 * which devices are delivered, fail, or exist.
 *
 * @packageDocumentation
 */
import { DeviceChangedChanges, areMultipleFacingModeSupported, areTracksEnabled, createTrackDevicesChanges, deviceChanged, findAudioInputDevices, findAudioOutputDevices, findCurrentAudioOutputId, findCurrentVideoInputDeviceIdFromStream, findDeviceWithDeviceId, findDevicesByKind, findMediaInputFromMediaStreamTrack, findMediaInputFromStream, findPermissionGrantedDevices, findVideoInputDevices, getDevices, getInputDevicePermissionState, hasAnyGrantedInput, hasAnyInputs, hasAudioInputs, hasAudioOrVideoInputs, hasChangedInput, hasRequestingDevice, hasVideoInputs, interpretCurrentFacingMode, isRequestedInputDevice, isRequestedInputTrack, isRequestedResolution, isStreamingRequestedDevices, isStreamingRequestedDevicesBase, muteStreamTrack, shouldRequestDevice, stopMediaStream, toKey, toMediaDeviceInfo, toMediaDeviceInfoLike } from './devices';
import { compareDevices, findDevice, isAudioOutput, isVideoInput, isAudioInput, isDeviceGranted } from './utils';
import { mergeConstraints, relaxInputConstraint, findDeviceFromConstraints, isExactDeviceConstraint, extractConstraintsWithKeys, applyConstraints, getValueFromConstrainNumber, getFacingModeFromConstraintString } from './constraints';
import { MediaEvent, Events, MediaEventType } from './eventEmitter';
import { createStreamTrackEventSubscriptions } from './streams';
import { MediaDeviceRequest, MediaDeviceFailure, MediaDeviceKinds, MediaDeviceInfoLike, MediaStreamTrackLike, MediaInput, Unsubscribe, StreamTrackEventHandlers, InputConstraintSet, FacingMode, DisplayMediaOptions } from './types';
import { isMediaDeviceInfo, isMediaDeviceInfoArray, isMediaStreamTrack, isFacingMode } from './typeGuards';
export { setLogger } from './logger';
declare const 
/**
 * Get MediaStream with provided {@link MediaDeviceRequest | input constraints}
 */
getUserMedia: ({ audio, video, }: MediaDeviceRequest) => Promise<MediaStream>, 
/**
 * Set default media stream constraints
 *
 * A {@link
 * https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints |
 * MediaStreamConstraints} object specifying the types of media to request, along with any requirements for each type.
 */
setDefaultConstraints: (newConstraints: MediaStreamConstraints) => void, 
/**
 * Subscribe media events
 */
subscribe: (listener: (event: MediaEvent) => void) => () => void;
export { getUserMedia, setDefaultConstraints, subscribe };
export { DeviceChangedChanges, DisplayMediaOptions, Events, FacingMode, InputConstraintSet, MediaDeviceFailure, MediaDeviceInfoLike, MediaDeviceKinds, MediaDeviceRequest, MediaEvent, MediaEventType, MediaInput, MediaStreamTrackLike, StreamTrackEventHandlers, Unsubscribe, applyConstraints, areMultipleFacingModeSupported, areTracksEnabled, compareDevices, createStreamTrackEventSubscriptions, createTrackDevicesChanges, deviceChanged, extractConstraintsWithKeys, findAudioInputDevices, findAudioOutputDevices, findCurrentAudioOutputId, findCurrentVideoInputDeviceIdFromStream, findDevice, findDeviceFromConstraints, findDeviceWithDeviceId, findDevicesByKind, findMediaInputFromMediaStreamTrack, findMediaInputFromStream, findPermissionGrantedDevices, findVideoInputDevices, getDevices, getFacingModeFromConstraintString, getInputDevicePermissionState, getValueFromConstrainNumber, hasAnyGrantedInput, hasAnyInputs, hasAudioInputs, hasAudioOrVideoInputs, hasChangedInput, hasRequestingDevice, hasVideoInputs, interpretCurrentFacingMode, isAudioInput, isAudioOutput, isDeviceGranted, isExactDeviceConstraint, isFacingMode, isMediaDeviceInfo, isMediaDeviceInfoArray, isMediaStreamTrack, isRequestedInputDevice, isRequestedInputTrack, isRequestedResolution, isStreamingRequestedDevices, isStreamingRequestedDevicesBase, isVideoInput, mergeConstraints, muteStreamTrack, relaxInputConstraint, shouldRequestDevice, stopMediaStream, toKey, toMediaDeviceInfo, toMediaDeviceInfoLike, };
export * from './constants';
export * from './displayMedia';
/**
 * MediaControl Interface
 *
 * @beta
 */
export interface MediaControl {
    /** {@inheritDoc deviceChanged} */
    deviceChanged: typeof deviceChanged;
    /** {@inheritDoc getDevices} */
    getDevices: typeof getDevices;
    /** {@inheritDoc MediaEventType} */
    MediaEventType: typeof MediaEventType;
    /** {@inheritDoc getUserMedia} */
    getUserMedia: typeof getUserMedia;
    /** {@inheritDoc setDefaultConstraints} */
    setDefaultConstraints: typeof setDefaultConstraints;
    /** {@inheritDoc subscribe} */
    subscribe: typeof subscribe;
}
export type { InputDevicePermission } from './types';
