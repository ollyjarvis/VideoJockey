import { hasOwn } from '@pexip/utils';
import { FACING_MODE } from './types';
export const isBoolean = (t) => typeof t === 'boolean';
export const isUndefined = (t) => typeof t === 'undefined';
/**
 * Check if provided variable is of type number and is NOT NaN
 */
export const isNumber = (t) => typeof t === 'number' && !Number.isNaN(t);
/**
 * Check if provided variable is of type integer
 */
export const isInteger = (t) => Number.isInteger(t);
/**
 * Check if provided variable is of type floating point
 */
export const isFloat = (t) => isNumber(t) && !Number.isInteger(t) && Number.isFinite(t);
/**
 * Reference https://w3c.github.io/mediacapture-main/#dom-mediatrackconstraintset
 */
export const CONSTRAIN_STRING_KEYS = [
    'facingMode',
    'resizeMode',
    'deviceId',
    'groupId',
];
export const EXTENDED_CONSTRAIN_STRING_KEYS = [
    'videoSegmentation',
    'videoSegmentationModel',
    'backgroundImageUrl',
    'contentHint',
];
export const CONSTRAIN_U_LONG_KEYS = [
    'width',
    'height',
    'sampleRate',
    'sampleSize',
    'channelCount',
];
export const EXTENDED_CONSTRAIN_U_LONG_KEYS = [
    'backgroundBlurAmount',
    'edgeBlurAmount',
];
export const CONSTRAIN_DOUBLE_KEYS = [
    'aspectRatio',
    'frameRate',
    'latency',
];
export const EXTENDED_CONSTRAIN_DOUBLE_KEYS = [
    'foregroundThreshold',
    'maskCombineRatio',
];
export const CONSTRAIN_BOOLEAN_KEYS = [
    'echoCancellation',
    'autoGainControl',
    'noiseSuppression',
    'pan',
    'tilt',
    'zoom',
];
/**
 * Extends boolean constraint keys for our own implementation of the media
 * feature
 */
export const EXTENDED_CONSTRAIN_BOOLEAN_KEYS = [
    // Voice Activity Detection
    'vad',
    // Audio Signal Detection
    'asd',
    // Mixing with another track
    'mixWithAdditionalMedia',
    // Noise Suppression using our own impl
    'denoise',
];
/**
 * The keys from the `MediaTrackConstraintSet`
 */
export const CONSTRAINT_SET_KEYS = [
    ...CONSTRAIN_DOUBLE_KEYS,
    ...CONSTRAIN_U_LONG_KEYS,
    ...CONSTRAIN_STRING_KEYS,
    ...CONSTRAIN_BOOLEAN_KEYS,
];
export const isConstrainStringKeys = (t) => CONSTRAIN_STRING_KEYS.includes(t);
export const isExtendedConstrainStringKeys = (t) => EXTENDED_CONSTRAIN_STRING_KEYS.includes(t);
export const isConstrainULongKeys = (t) => CONSTRAIN_U_LONG_KEYS.includes(t);
export const isExtendedConstrainULongKeys = (t) => EXTENDED_CONSTRAIN_U_LONG_KEYS.includes(t);
export const isConstrainDoubleKeys = (t) => CONSTRAIN_DOUBLE_KEYS.includes(t);
export const isExtendedConstrainDoubleKeys = (t) => EXTENDED_CONSTRAIN_DOUBLE_KEYS.includes(t);
export const isConstrainBooleanKeys = (t) => CONSTRAIN_BOOLEAN_KEYS.includes(t);
export const isExtendedConstrainBooleanKeys = (t) => EXTENDED_CONSTRAIN_BOOLEAN_KEYS.includes(t);
export const isMediaTrackConstraintSetKey = (t) => CONSTRAINT_SET_KEYS.includes(t);
export const isMediaTrackConstraintsKey = (t) => isMediaTrackConstraintSetKey(t) || t === 'advanced';
export const isMediaTrackConstraints = (t) => {
    if (!t || typeof t !== 'object' || Array.isArray(t) || t === null) {
        return false;
    }
    const keys = Object.keys(t);
    return (!!keys.length &&
        Object.keys(t).every(key => isMediaTrackConstraintsKey(key)));
};
/**
 * Check if provided is `MediaDeviceInfo`
 *
 * @beta
 */
export const isMediaDeviceInfo = (t) => {
    if (!t || typeof t !== 'object') {
        return false;
    }
    return !!t && 'deviceId' in t && 'kind' in t;
};
export const isMediaDeviceInfoArray = (t) => {
    if (Array.isArray(t) && t.length && t.some(isMediaDeviceInfo)) {
        return true;
    }
    return false;
};
export const isDeviceConstraint = (t) => {
    return isMediaDeviceInfo(t) || isMediaDeviceInfoArray(t);
};
export const isConstraintDOMString = (t) => (typeof t === 'string' && !!t) || (Array.isArray(t) && t.some(Boolean));
const CONSTRAIN_PARAM_KEYS = ['exact', 'ideal'];
const CONSTRAIN_RANGE_KEYS = ['min', 'max'];
const CONSTRAIN_KEYS = [
    ...CONSTRAIN_PARAM_KEYS,
    ...CONSTRAIN_RANGE_KEYS,
];
export const isConstrainDOMParameters = (isType, keys = CONSTRAIN_PARAM_KEYS) => (t) => {
    if (!t ||
        typeof t !== 'object' ||
        t === null ||
        Object.keys(t).length <= 0) {
        return false;
    }
    return keys.some(key => hasOwn(t, key) && isType(t[key]));
};
export const isConstrainDOMStringParameters = isConstrainDOMParameters(isConstraintDOMString);
export const isConstrainBooleanParameters = isConstrainDOMParameters(isBoolean);
/**
 * Check if provided var is a constraint object with `min` and/or `max` key only
 */
export const isConstrainRange = isConstrainDOMParameters(t => isFloat(t) || isInteger(t), CONSTRAIN_RANGE_KEYS);
export const isConstrainDoubleRange = isConstrainDOMParameters(isFloat, CONSTRAIN_KEYS);
export const isConstrainULongRange = isConstrainDOMParameters(isInteger, CONSTRAIN_KEYS);
export const isConstraintDeviceParameters = isConstrainDOMParameters(t => isMediaDeviceInfo(t) || isMediaDeviceInfoArray(t));
export const isConstraintSetDevice = (t) => isMediaDeviceInfo(t) ||
    isMediaDeviceInfoArray(t) ||
    isConstraintDeviceParameters(t);
export const isExtendedConstraint = (t) => {
    if (typeof t !== 'object' || t === null) {
        return false;
    }
    if (hasOwn(t, 'device')) {
        const { device } = t;
        return isConstraintSetDevice(device);
    }
    return [
        ...EXTENDED_CONSTRAIN_DOUBLE_KEYS,
        ...EXTENDED_CONSTRAIN_STRING_KEYS,
        ...EXTENDED_CONSTRAIN_U_LONG_KEYS,
        ...EXTENDED_CONSTRAIN_BOOLEAN_KEYS,
    ].some(key => hasOwn(t, key));
};
export const isInputConstraintSet = (t) => {
    if (typeof t !== 'object' || t === null) {
        return false;
    }
    return isExtendedConstraint(t) || isMediaTrackConstraints(t);
};
/**
 * Check if provided is `MediaStreamTrack`
 *
 * @beta
 */
export const isMediaStreamTrack = (m) => {
    if (m && typeof m === 'object') {
        return !!m && 'getSettings' in m;
    }
    return false;
};
export const isFacingMode = (s) => {
    if (typeof s === 'string' && FACING_MODE.includes(s)) {
        return true;
    }
    return false;
};
