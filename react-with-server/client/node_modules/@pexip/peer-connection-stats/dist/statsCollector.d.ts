import type { AnyStats, CacheStats, CallQualityStats, InboundAudio, InboundAudioMetrics, InboundVideo, InboundVideoMetrics, Metrics, NormalizedRTCStats, OutboundAudio, OutboundAudioMetrics, OutboundVideo, OutboundVideoMetrics, StatsCollector, StatsCollectorOptions } from './statsCollector.types';
import { Quality } from './statsCollector.types';
export declare const STATS_SIZE = 60;
/**
 * The WebRTC stats are given to us as a flat structure (an array of objects
 * that contain id-fields pointing to other objects in the same array).
 *
 * This class takes such an array as input and can expand an entry so that
 * references become nested objects.
 *
 * https://www.w3.org/TR/webrtc-stats/#summary
 * https://www.w3.org/TR/webrtc-stats/#rtctatstype-*
 */
export declare const createResolver: (statsReport: AnyStats[]) => {
    expand: {
        (audioIn: InboundAudio): InboundAudio;
        (audioOut: OutboundAudio): OutboundAudio;
        (videoIn: InboundVideo): InboundVideo;
        (videoOut: OutboundVideo): OutboundVideo;
    };
};
/**
 * Normalize inbound audio stats
 *
 * @param statsData - Raw inbound audio stats @see InboundAudio
 *
 * @returns normalized stats for inbound audio from PeerConnection
 */
export declare const inboundAudio: (statsData: InboundAudio) => InboundAudioMetrics;
/**
 * Normalize outbound audio stats
 *
 * @param statsData - Raw outbound audio stats @see OutboundAudio
 *
 * @returns normalized stats for outbound audio from PeerConnection
 */
export declare const outboundAudio: (statsData: OutboundAudio) => OutboundAudioMetrics;
/**
 * Normalize inbound video stats
 *
 * @param statsData - Raw inbound video stats @see InboundVideo
 *
 * @returns normalized stats for inbound video from PeerConnection
 */
export declare const inboundVideo: (statsData: InboundVideo) => InboundVideoMetrics;
/**
 * Normalize outbound video stats
 *
 * @param statsData - Raw outbound video stats @see OutboundVideo
 *
 * @returns normalized stats for outbound video from PeerConnection
 */
export declare const outboundVideo: (statsData: OutboundVideo) => OutboundVideoMetrics;
/**
 * Normalize stats into inbound and outbound video and audio stats
 *
 * @param statsReports - reports to for mapping
 *
 * @returns normalized stats for inbound, outbound audio and video
 */
export declare const statsFrom: (statsReports: AnyStats[]) => Metrics | undefined;
/**
 * Gets raw stats from peerConnection and normalized them
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_Statistics_API
 *
 * A RTCPeerConnection has getStats()
 * - getStats() returns promise which resolve to a RTCStatsReport
 * - RTCStatsReport behaves like an array of RTCStats objects, or more
 *   specific RTCRtpStreamStats objects
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport
 * https://developer.mozilla.org/en-US/docs/Web/API/RTCStats
 * https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpStreamStats
 *
 */
export declare const statsFromRTCPeer: (rtcPeer: {
    getStats: (selector?: MediaStreamTrack | null) => Promise<RTCStatsReport>;
}) => Promise<NormalizedRTCStats>;
export declare const getQuality: (stats: CallQualityStats) => {
    quality: Quality;
    goodOrOkQuality: number;
    qualityOverTime: Quality[];
};
export declare const addDeltaStats: (newStats: NormalizedRTCStats, cache: CacheStats) => readonly [{
    type: "inbound-rtp" | "outbound-rtp";
    kind: "audio" | "video";
    bitrate?: number | undefined;
    bytesTransmitted?: number | undefined;
    codec?: string | undefined;
    jitter?: number | undefined;
    packetsLost: number;
    packetsTransmitted: number;
    recentPercentageLost?: number | undefined;
    roundTripTime?: number | undefined;
    timestamp?: number | undefined;
    totalPercentageLost?: number | undefined;
} | {
    framesPerSecond?: number | undefined;
    resolution?: string | undefined;
    resolutionHeight?: number | undefined;
    resolutionWidth?: number | undefined;
    type: "inbound-rtp" | "outbound-rtp";
    kind: "audio" | "video";
    bitrate?: number | undefined;
    bytesTransmitted?: number | undefined;
    codec?: string | undefined;
    jitter?: number | undefined;
    packetsLost: number;
    packetsTransmitted: number;
    recentPercentageLost?: number | undefined;
    roundTripTime?: number | undefined;
    timestamp?: number | undefined;
    totalPercentageLost?: number | undefined;
} | {
    framesPerSecond?: number | undefined;
    resolution?: string | undefined;
    resolutionHeight?: number | undefined;
    resolutionWidth?: number | undefined;
    type: "inbound-rtp" | "outbound-rtp";
    kind: "audio" | "video";
    bitrate?: number | undefined;
    bytesTransmitted?: number | undefined;
    codec?: string | undefined;
    jitter?: number | undefined;
    packetsLost: number;
    packetsTransmitted: number;
    recentPercentageLost?: number | undefined;
    roundTripTime?: number | undefined;
    timestamp?: number | undefined;
    totalPercentageLost?: number | undefined;
    totalPacketSendDelay?: number | undefined;
    averagePacketSendDelay?: number | undefined;
}, Quality, CallQualityStats];
export declare const calculateQuality: (stats: number | [number, number]) => Quality;
/**
 * Creates stats collector
 *
 * @param input - input to get stats from
 * @param signal - Signal which distributes stats
 * @param interval - how often signal with fire with new stats
 *
 * @returns \{function to reset stats window, cleanup func\}
 */
export declare const createStatsCollector: ({ input, signals: { onCallQuality, onCallQualityStats, onRtcStats }, interval, }: StatsCollectorOptions) => StatsCollector;
