export declare const QUEUE_THROTTLE_IN_MS = 100;
export declare const QUEUE_DELAY_IN_MS = 0;
export type AsyncJob = () => Promise<void>;
export interface AsyncQueueOptions {
    /**
     * Throttle in mini-second
     */
    throttleInMS?: number;
    /**
     * How many mini-second to delay to run the next job
     */
    delayInMS?: number;
    /**
     * Max size of the queue, when it reaches this size, dropping mechanism
     * starts. Drop the first/last one when overflow
     */
    size?: number;
    /**
     * Drop the last one in the queue or the first one
     */
    dropLast?: boolean;
}
export declare const createAsyncQueue: ({ throttleInMS, delayInMS, size, dropLast, }?: AsyncQueueOptions) => {
    readonly busy: boolean;
    execute: () => Promise<void>;
    enqueue: (job: AsyncJob, runImmediately?: boolean) => void;
};
