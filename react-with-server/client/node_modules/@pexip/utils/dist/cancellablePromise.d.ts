type AsyncCallback<A extends unknown[], R> = (...args: A) => Promise<R>;
type Cleanup<R> = (result: R) => Promise<void> | void;
/**
 * Wrapping provided async callback to allow to resolve the async operation with
 * cleanup when the cancel function is called
 *
 * @param callback - An async callback to execute
 * @param cleanup - A cleanup callback to execute when the provided async
 * callback is canceled
 */
export declare const cancellablePromise: <A extends unknown[], R>(callback: AsyncCallback<A, R>, cleanup?: Cleanup<R> | undefined) => readonly [(...args: A) => Promise<void | Awaited<R>>, () => void];
export {};
