/**
 * An higher-order-function that debounce a given function to only invoke after `N` amount of time passes since its last call.
 *
 * Note: Can be extended in the future to allow `immediate` (leading) flag and `cancel` method options.
 *
 * @param fn - The function to throttle.
 * @param waitDuration - The number of milliseconds to wait before invoke.
 */
export const debounce = (fn, waitDuration) => {
    let timeoutId;
    const promiseRejects = [];
    const cancel = () => {
        promiseRejects.forEach(reject => reject());
        promiseRejects.splice(0);
    };
    const debounced = function (...args) {
        clearTimeout(timeoutId);
        const invoke = (resolve) => {
            timeoutId = window.setTimeout(() => {
                const results = fn.apply(this, args);
                resolve(results);
                cancel();
            }, waitDuration);
        };
        return new Promise((resolve, reject) => {
            promiseRejects.push(reject);
            invoke(resolve);
        });
    };
    debounced.cancel = cancel;
    return debounced;
};
