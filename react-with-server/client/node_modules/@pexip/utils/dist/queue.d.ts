/**
 * A Queue to serve first-in-first-out (FIFO)
 */
export interface Queue<T> {
    /**
     * Size of the queue
     */
    size: number;
    /**
     * Max size of the queue
     */
    maxSize: number;
    /**
     * Empty the queue
     */
    empty(): void;
    /**
     * Append the item to the end of the queue, drop when overflow
     */
    enqueue(item: T): number;
    /**
     * Put the item to the |start| position of the queue, drop when overflow
     */
    enqueueAt(start: number, item: T, replace: boolean): number;
    /**
     * Remove the first item from the queue and return it
     */
    dequeue(): T | undefined;
    /**
     * Remove all items from the queue and return them as an Array
     */
    dequeueAll(): T[];
}
export declare const QUEUE_SIZE = 5;
export declare const QUEUE_DROP_LAST = false;
export declare const createQueue: <T>(maxSize?: number, initial?: T[], dropLast?: boolean) => Queue<T>;
