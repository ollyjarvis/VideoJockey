export const QUEUE_SIZE = 5;
export const QUEUE_DROP_LAST = false;
export const createQueue = (maxSize = QUEUE_SIZE, initial = [], dropLast = QUEUE_DROP_LAST) => {
    if (initial.length > maxSize || 0 >= maxSize) {
        throw new Error('InvalidQueueSize');
    }
    let queue = initial;
    const enqueue = item => {
        if (queue.length >= maxSize) {
            if (dropLast) {
                queue.splice(-1, 1, item);
            }
            else {
                queue.shift();
                queue.push(item);
            }
            return queue.length;
        }
        return queue.push(item);
    };
    const enqueueAt = (start, item, replace = false) => {
        if (replace) {
            queue.splice(start, 1, item);
        }
        else {
            if (queue.length >= maxSize) {
                if (dropLast) {
                    queue.splice(-1, 1);
                }
                else {
                    queue.shift();
                }
            }
            queue.splice(start, 0, item);
        }
        return queue.length;
    };
    const dequeue = () => {
        return queue.shift();
    };
    const dequeueAll = () => {
        const tmp = queue;
        queue = [];
        return tmp;
    };
    const empty = () => {
        queue = [];
    };
    return {
        get size() {
            return queue.length;
        },
        get maxSize() {
            return maxSize;
        },
        empty,
        enqueue,
        enqueueAt,
        dequeue,
        dequeueAll,
    };
};
