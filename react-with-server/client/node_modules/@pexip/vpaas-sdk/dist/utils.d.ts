import { Backoff } from '@pexip/utils';
import type { TransceiverConfig } from '@pexip/peer-connection';
import type { ForbiddenError, InternalServerError, VpaasWebsocketMessageTypesUnion, NotModifiedError, ServiceUnavailableError, UnauthorizedError, UnknownError, Error as ResponseError, MediaOffer } from '@pexip/vpaas-api';
import { BadRequestError, GoneError, NotFoundError } from '@pexip/vpaas-api';
import type { VpaasError } from './types';
export declare const createVpaasSignals: () => {
    onRosterUpdate: import("@pexip/signal").Signal<{
        [k: string]: import("@pexip/vpaas-api").RosterEntry;
    }>;
    onMediaOffer: import("@pexip/signal").Signal<MediaOffer>;
    onReconnecting: import("@pexip/signal").Signal<undefined>;
    onReconnected: import("@pexip/signal").Signal<undefined>;
    onRemoteStreams: import("@pexip/signal").Signal<TransceiverConfig>;
    onError: import("@pexip/signal").Signal<VpaasError>;
};
export declare const createSocketSignals: () => Pick<Required<import("@pexip/socket-manager").SocketSignals<VpaasWebsocketMessageTypesUnion>>, "onConnecting" | "onConnected" | "onReconnecting" | "onReconnected" | "onDisconnected" | "onError" | "onMessage">;
export declare const createRecvTransceivers: (kind: 'audio' | 'video', length: number, content?: string) => {
    readonly direction: "recvonly";
    readonly kindOrTrack: "audio" | "video";
    readonly content: string | undefined;
}[];
export declare const sleep: (ms: number) => Promise<unknown>;
export declare const retriable: <T>(fn: () => Promise<T>, backoff?: Backoff, retries?: number) => Promise<T>;
export declare const isSendConfig: (config: TransceiverConfig) => boolean;
export declare const isInactiveConfig: (config: TransceiverConfig) => boolean;
export declare const isRecvConfig: (config: TransceiverConfig) => boolean;
export declare const isMainConfig: (config: TransceiverConfig) => boolean;
export declare const isPresoConfig: (config: TransceiverConfig) => boolean;
export declare const isAudioConfig: (config: TransceiverConfig) => boolean;
export declare const isVideoConfig: (config: TransceiverConfig) => boolean;
export declare const isMainSendConfig: (config: TransceiverConfig) => boolean;
export declare const isPresoInactiveConfig: (config: TransceiverConfig) => boolean;
export declare const isPresoRecvConfig: (config: TransceiverConfig) => boolean;
export declare const isPresoSendConfig: (config: TransceiverConfig) => boolean;
export declare const isPresoVideo: (config: TransceiverConfig) => boolean;
export declare class WebsocketError extends Error {
    constructor(message: string);
}
export declare class ResourceUnavailableError extends Error {
    constructor(message: string);
}
export declare class MeetingFullError extends Error {
    constructor(message: string);
}
export { BadRequestError, UnauthorizedError, ForbiddenError, GoneError, NotFoundError, ServiceUnavailableError, InternalServerError, NotModifiedError, UnknownError, };
export declare const getTraceparent: () => string;
export declare const isResponseError: (error: unknown) => error is ResponseError;
//# sourceMappingURL=utils.d.ts.map