export var LogLevels;
(function (LogLevels) {
    LogLevels[LogLevels["trace"] = 10] = "trace";
    LogLevels[LogLevels["debug"] = 20] = "debug";
    LogLevels[LogLevels["info"] = 30] = "info";
    LogLevels[LogLevels["warn"] = 40] = "warn";
    LogLevels[LogLevels["error"] = 50] = "error";
    LogLevels[LogLevels["fatal"] = 60] = "fatal";
    // eslint-disable-next-line @typescript-eslint/prefer-literal-enum-member -- needs infinity
    LogLevels[LogLevels["silent"] = Number.MAX_SAFE_INTEGER] = "silent";
})(LogLevels || (LogLevels = {}));
/**
 * Create a logger with console API, and map fatal to error, skipping trace
 * and silent, and there is no redaction
 */
export function createConsoleLogger() {
    return Object.freeze({
        /* eslint-disable no-console -- set logger to console */
        fatal: (meta, message) => console.error(message, meta),
        error: (meta, message) => console.error(message, meta),
        warn: (meta, message) => console.warn(message, meta),
        info: (meta, message) => console.info(message, meta),
        debug: (meta, message) => console.debug(message, meta),
        trace() { }, // Noop
        silent() { }, // Noop
        redact() { }, // Noop
        /* eslint-enable no-console -- set logger to console */
    });
}
//# sourceMappingURL=baseLogger.js.map