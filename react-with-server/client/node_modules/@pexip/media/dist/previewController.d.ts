import type { MediaDeviceRequest, MediaDeviceInfoLike } from '@pexip/media-control';
import type { AsyncQueueOptions } from '@pexip/utils';
import type { Media, Unsubscribe, MediaSignals, MediaProcessor } from './types';
type EventCallback<T> = (event: T) => void;
type EventErrorCallback = (error: Error) => void;
export type PreviewInput = MediaDeviceInfoLike | undefined;
export interface PreviewEventHandler {
    audioInput?: EventCallback<PreviewInput>;
    videoInput?: EventCallback<PreviewInput>;
    media?: EventCallback<Media>;
    videoInputError?: EventErrorCallback;
    audioInputError?: EventErrorCallback;
    applyChangesError?: EventErrorCallback;
    revertChangesError?: EventErrorCallback;
    updatingPreview?: EventCallback<boolean>;
    updatingMain?: EventCallback<boolean>;
    unsubscribeMain?: Unsubscribe;
}
export interface PreviewStreamParams {
    getCurrentDevices: () => MediaDeviceInfoLike[];
    getCurrentMedia: () => Media | undefined;
    updateMainStream: (request: MediaDeviceRequest) => Promise<void>;
    mediaSignal: MediaSignals['onMediaChanged'];
    onEnded?: () => void;
    fftSize?: number;
    queueOptions?: Partial<AsyncQueueOptions>;
    processors: MediaProcessor[];
}
export interface PreviewControllerProps {
    media: Media;
    audioInput?: MediaDeviceInfoLike;
    videoInput?: MediaDeviceInfoLike;
    updatingPreview: boolean;
    updatingMain: boolean;
    originalMainAudioInput?: MediaDeviceInfoLike;
    discardMedia: boolean;
    initialized: boolean;
}
export interface PreviewStreamController {
    media: Media;
    audioInputChanged: boolean;
    videoInputChanged: boolean;
    inputChanged: boolean;
    audioInput: PreviewInput;
    videoInput: PreviewInput;
    updatingPreview: boolean;
    updatingMain: boolean;
    updateAudioInput(input: PreviewInput): void;
    updateVideoInput(input: PreviewInput): void;
    applyChanges(force?: boolean): Promise<void>;
    revertChanges(): Promise<void>;
    cleanup: () => Promise<void>;
    onMediaChanged(callback: EventCallback<Media>): Unsubscribe;
    onAudioInputChanged(callback: EventCallback<PreviewInput>): Unsubscribe;
    onVideoInputChanged(callback: EventCallback<PreviewInput>): Unsubscribe;
    onUpdatingPreview(callback: EventCallback<boolean>): Unsubscribe;
    onUpdatingMain(callback: EventCallback<boolean>): Unsubscribe;
    onAudioInputError(callback: EventErrorCallback): Unsubscribe;
    onVideoInputError(callback: EventErrorCallback): Unsubscribe;
    onApplyChangesError(callback: EventErrorCallback): Unsubscribe;
    onRevertChangesError(callback: EventErrorCallback): Unsubscribe;
}
export declare const createPreviewStreamController: ({ getCurrentDevices, getCurrentMedia, updateMainStream, onEnded, mediaSignal, queueOptions, processors, }: PreviewStreamParams) => PreviewStreamController;
export type CreatePreviewStreamController = typeof createPreviewStreamController;
export {};
