import type { VideoProcessor, SegmentationTransform, SegmentationModel } from '@pexip/media-processor';
import type { MediaDeviceRequest } from '@pexip/media-control';
import type { Process, Media, VideoRenderParams, Segmenters, VideoStreamTrackProcessorAPIs, VideoContentHint } from './types';
interface ProcessorDeps {
    videoProcessor?: () => VideoProcessor;
    transformer?: SegmentationTransform;
    segmenters: Partial<Segmenters>;
    videoSegmentationModel?: SegmentationModel;
}
interface VideoStreamProcessOptions extends Partial<VideoRenderParams>, Omit<ProcessorDeps, 'videoProcessor'> {
    /**
     * What API to use for processing the MediaStreamTrack
     * `stream` - Use MediaStreamTrackProcessor, when available
     * `canvas` - Use Canvas
     */
    trackProcessorAPI?: () => VideoStreamTrackProcessorAPIs;
    /**
     * Whether or to enable this processor
     */
    shouldEnable: () => boolean;
    /**
     * Callback when error occurs
     */
    onError?: (error: Error) => void;
    processingWidth: number;
    processingHeight: number;
    hasInitializedDeps?: boolean;
    width?: number;
    height?: number;
    scope?: string;
}
interface VideoStreamProcessProps extends Partial<VideoRenderParams>, Required<ProcessorDeps> {
    hasInitialized: boolean;
    contentHint?: VideoContentHint;
}
declare const FEATURE_KEYS: readonly ["backgroundBlurAmount", "backgroundImageUrl", "maskCombineRatio", "edgeBlurAmount", "foregroundThreshold", "frameRate", "videoSegmentation", "videoSegmentationModel", "width", "height", "pan", "tilt", "zoom", "contentHint"];
type FeaturePropKeys = (typeof FEATURE_KEYS)[number];
type FeatureProps = Pick<Partial<VideoStreamProcessProps>, FeaturePropKeys>;
export declare const updateFeatureProps: (constraints: MediaDeviceRequest['video'], props: FeatureProps) => FeatureProps;
export declare const createVideoStreamProcess: ({ trackProcessorAPI, processingWidth, processingHeight, shouldEnable, frameRate, videoSegmentation, foregroundThreshold, backgroundImageUrl, maskCombineRatio, edgeBlurAmount, scope, ...options }: VideoStreamProcessOptions) => Process<Promise<Media>>;
export {};
