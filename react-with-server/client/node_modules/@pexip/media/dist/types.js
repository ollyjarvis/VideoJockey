export var UserMediaStatus;
(function (UserMediaStatus) {
    /**
     * The initial status
     */
    UserMediaStatus["Initial"] = "initial";
    /**
     * When we know the permissions were already granted from permission API
     */
    UserMediaStatus["InitialPermissionsGranted"] = "initial-permissions-granted";
    /**
     * When we do not know the permissions from permission API
     */
    UserMediaStatus["InitialPermissionsNotGranted"] = "initial-permissions-not-granted";
    /**
     * When video input permissions are initially denied in the browser and audio input permissions are unknown
     */
    UserMediaStatus["InitialPermissionsVideoInputDenied"] = "initial-permissions-videoinput-denied";
    /**
     * When audio input permissions are initially denied in the browser and video input permissions are unknown
     */
    UserMediaStatus["InitialPermissionsAudioInputDenied"] = "initial-permissions-audioinput-denied";
    /**
     * When video input permissions are granted in the browser and audio input permissions are unknown
     */
    UserMediaStatus["InitialPermissionsVideoInputGranted"] = "initial-permissions-videoinput-granted";
    /**
     * When audio input permissions are granted in the browser and video input permissions are unknown
     */
    UserMediaStatus["InitialPermissionsAudioInputGranted"] = "initial-permissions-audioinput-granted";
    /**
     * When audio input permissions are granted but video input permissions are initially denied
     */
    UserMediaStatus["InitialPermissionsGrantedVideoInputDenied"] = "initial-permissions-audioinput-granted-videoinput-denied";
    /**
     * When video input permissions are granted but audio input permissions are initially denied
     */
    UserMediaStatus["InitialPermissionsGrantedAudioInputDenied"] = "initial-permissions-videoinput-granted-audioinput-denied";
    /**
     * When there is no any kind of input devices
     */
    UserMediaStatus["NoDevicesFound"] = "no-devices-found";
    /**
     * When there is no any video input devices
     */
    UserMediaStatus["NoVideoDevicesFound"] = "no-video-devices-found";
    /**
     * When there is no any audio input devices
     */
    UserMediaStatus["NoAudioDevicesFound"] = "no-audio-devices-found";
    /**
     * Derived from `MediaDeviceFailure.AudioInputDeviceNotFoundError`
     */
    UserMediaStatus["AudioDeviceNotFound"] = "audio-device-not-found";
    /**
     * Derived from `MediaDeviceFailure.VideoInputDeviceNotFoundError`
     */
    UserMediaStatus["VideoDeviceNotFound"] = "video-device-not-found";
    /**
     * Derived from `MediaDeviceFailure.AudioAndVideoDeviceNotFoundError`
     */
    UserMediaStatus["AudioVideoDevicesNotFound"] = "audio-video-devices-not-found";
    /**
     * When Permission is granted by user for both video and audio, and both
     * devices are exactly matched with the request constraints
     */
    UserMediaStatus["PermissionsGranted"] = "permissions-granted";
    /**
     * When Permission is granted by user for both video and audio, and both
     * devices are NOT exactly matched with the request constraints
     */
    UserMediaStatus["PermissionsGrantedFallback"] = "permissions-granted-fallback-devices";
    /**
     * When Permission is granted by user for both video and audio, and audio
     * input is NOT exactly matched with the request constraints
     */
    UserMediaStatus["PermissionsGrantedFallbackAudioinput"] = "permissions-granted-fallback-audioinput";
    /**
     * When Permission is granted by user for both video and audio, and video
     * input is NOT exactly matched with the request constraints
     */
    UserMediaStatus["PermissionsGrantedFallbackVideoinput"] = "permissions-granted-fallback-videoinput";
    /**
     * When Permission for using both audio and video devices are rejected by the user
     * from `PermissionDeniedError`
     */
    UserMediaStatus["PermissionsRejected"] = "permissions-rejected";
    /**
     * When Permission for using the audio device is rejected by the user
     * from `PermissionDeniedError`
     */
    UserMediaStatus["PermissionsRejectedAudioInput"] = "permissions-rejected-audioinput";
    /**
     * When Permission for using the video device is rejected by the user
     * from `PermissionDeniedError`
     */
    UserMediaStatus["PermissionsRejectedVideoInput"] = "permissions-rejected-videoinput";
    /**
     * When only request and return exact audio input device
     */
    UserMediaStatus["PermissionsOnlyAudioinput"] = "permissions-only-audioinput";
    /**
     * When only request audio input device because of no video devices
     * available and returned exact audio input device
     */
    UserMediaStatus["PermissionsOnlyAudioinputNoVideoDevices"] = "permissions-only-audioinput-no-video-devices";
    /**
     * When only request and returned NOT exact audio input device
     */
    UserMediaStatus["PermissionsOnlyAudioinputFallback"] = "permissions-only-fallback-audioinput";
    /**
     * When only request audio input device because of no video devices
     * available and returned NOT exact audio input device
     */
    UserMediaStatus["PermissionsOnlyAudioinputFallbackNoVideoDevices"] = "permissions-only-fallback-audioinput-no-video-devices";
    /**
     * When only request and return exact video input device
     */
    UserMediaStatus["PermissionsOnlyVideoinput"] = "permissions-only-videoinput";
    /**
     * When only request video input device because of no audio devices
     * available and returned exact video input device
     */
    UserMediaStatus["PermissionsOnlyVideoinputNoAudioDevices"] = "permissions-only-videoinput-no-audio-devices";
    /**
     * When only request and returned NOT exact video input device
     */
    UserMediaStatus["PermissionsOnlyVideoinputFallback"] = "permissions-only-fallback-videoinput";
    /**
     * When only request video input device because of no video devices
     * available and returned NOT exact video input device
     */
    UserMediaStatus["PermissionsOnlyVideoinputFallbackNoAudioDevices"] = "permissions-only-fallback-videoinput-no-audio-devices";
    /**
     * When requesting the audio device is used by other application
     */
    UserMediaStatus["AudioDeviceInUse"] = "audio-device-in-use";
    /**
     * When requesting the video device is used by other application
     */
    UserMediaStatus["VideoDeviceInUse"] = "video-device-in-use";
    /**
     * When requesting both audio and video devices are used by other application
     */
    UserMediaStatus["DevicesInUse"] = "devices-in-use";
    /**
     * When requesting both audio and video with over-constrained
     */
    UserMediaStatus["Overconstrained"] = "overconstrained";
    /**
     * When requesting video with over-constrained
     */
    UserMediaStatus["VideoOverconstrained"] = "video-overconstrained";
    /**
     * When requesting audio with over-constrained
     */
    UserMediaStatus["AudioOverconstrained"] = "audio-overconstrained";
    /**
     * When requesting both audio and video with invalid constraints
     */
    UserMediaStatus["InvalidConstraints"] = "invalid-constraints";
    /**
     * When requesting video with invalid constraints
     */
    UserMediaStatus["InvalidVideoConstraints"] = "invalid-video-constraints";
    /**
     * When requesting audio with invalid constraints
     */
    UserMediaStatus["InvalidAudioConstraints"] = "invalid-audio-constraints";
    /**
     * When requesting both audio and video with NotSupportedError
     */
    UserMediaStatus["NotSupportedError"] = "not-supported-error";
    /**
     * When requesting video with NotSupportedError
     */
    UserMediaStatus["NotSupportedErrorOnlyVideoInput"] = "not-supported-error-only-video";
    /**
     * When requesting audio with NotSupportedError
     */
    UserMediaStatus["NotSupportedErrorOnlyAudioInput"] = "not-supported-error-only-audio";
    /**
     * Unknown error from both video and audio
     */
    UserMediaStatus["UnknownError"] = "unknown-error";
    /**
     * Unknown error from audio device
     */
    UserMediaStatus["UnknownErrorOnlyAudioinput"] = "unknown-error-only-audioinput";
    /**
     * Unknown error from video device
     */
    UserMediaStatus["UnknownErrorOnlyVideoinput"] = "unknown-error-only-videoinput";
})(UserMediaStatus || (UserMediaStatus = {}));
export var DeniedDevices;
(function (DeniedDevices) {
    DeniedDevices["Microphone"] = "microphone";
    DeniedDevices["Camera"] = "camera";
    DeniedDevices["Both"] = "microphone-and-camera";
})(DeniedDevices || (DeniedDevices = {}));
/**
 * Audio content hints are only applicable when the MediaStreamTrack contains an
 * audio track
 *
 * {@link https://www.w3.org/TR/mst-content-hint/#audio-content-hints}
 */
export const AUDIO_CONTENT_HINTS = {
    /**
     * No hint has been provided, the implementation should make its
     * best-informed guess on how to handle contained audio data. This may be
     * inferred from how the track was opened or by doing content analysis
     */
    NoHint: '',
    /**
     * The track should be treated as if it contains speech data. Consuming this
     * signal it may be appropriate to apply noise suppression or boost
     * intelligibility of the incoming signal.
     */
    Speech: 'speech',
    /**
     * The track should be treated as if it contains data for the purpose of
     * speech recognition by a machine. Consuming this signal it may be
     * appropriate to boost intelligibility of the incoming signal for
     * transcription and turn off audio-processing components that are used for
     * human consumption.
     */
    SpeechRecognition: 'speech-recognition',
    /**
     * The track should be treated as if it contains music data. Generally this
     * might imply tuning or turning off audio-processing components that are
     * used to process speech data to prevent the audio from being distorted.
     */
    Music: 'music',
};
/**
 * Video content hints are only applicable when the MediaStreamTrack contains a
 * video track.
 *
 * {@link https://www.w3.org/TR/mst-content-hint/#video-content-hints}
 */
export const VIDEO_CONTENT_HINTS = {
    /**
     * No hint has been provided, the implementation should make its
     * best-informed guess on how contained video content should be treated.
     * This can for example be inferred from how the track was opened or by
     * doing content analysis.
     */
    NoHint: '',
    /**
     * The track should be treated as if it contains video where motion is
     * important. This is normally webcam video, movies or video games.
     * Quantization artefacts and downscaling are acceptable in order to
     * preserve motion as well as possible while still retaining target
     * bitrates. During low bitrates when compromises have to be made, more
     * effort is spent on preserving frame rate than edge quality and details.
     */
    Motion: 'motion',
    /**
     * The track should be treated as if video details are extra important.
     * This is generally applicable to presentations or web pages with text
     * content, painting or line art. This setting would normally optimize for
     * detail in the resulting individual frames rather than smooth playback.
     * Artefacts from quantization or downscaling that make small text or line
     * art unintelligible should be avoided.
     */
    Detail: 'detail',
    /**
     * The track should be treated as if video details are extra important, and
     * that significant sharp edges and areas of consistent color can occur
     * frequently. This is generally applicable to presentations or web pages
     * with text content. This setting would normally optimize for detail in the
     * resulting individual frames rather than smooth playback, and may take
     * advantage of encoder tools that optimize for text rendering. Artefacts
     * from quantization or downscaling that make small text or line art
     * unintelligible should be avoided.
     */
    Text: 'text',
};
