import type { MediaDeviceRequest, MediaDeviceInfoLike } from '@pexip/media-control';
import type { Process, Media } from './types';
import { UserMediaStatus } from './types';
import { makeDeriveDeviceStatus } from './utils';
export type UserMedia = [MediaStream | undefined, UserMediaStatus];
export type GetUserMedia<T extends Promise<Iterable<unknown>> = Promise<UserMedia>> = (constraints: MediaDeviceRequest) => T;
export declare const toErrorDeviceStatus: (error: Error, deriveDeviceStatus: ReturnType<typeof makeDeriveDeviceStatus>) => UserMediaStatus;
export declare const mapErrorStatus: (status: UserMediaStatus) => (constraints: MediaDeviceRequest) => UserMediaStatus;
export declare const toSameDeviceStatus: ({ audio, video, }: {
    audio: boolean;
    video: boolean;
}) => UserMediaStatus.PermissionsGranted | UserMediaStatus.PermissionsGrantedFallback | UserMediaStatus.PermissionsGrantedFallbackAudioinput | UserMediaStatus.PermissionsGrantedFallbackVideoinput;
export declare const toOnlyDeviceStatus: (kind: Extract<MediaDeviceKind, 'audioinput' | 'videoinput'>, matched: boolean, devices: MediaDeviceInfoLike[]) => UserMediaStatus.PermissionsOnlyAudioinput | UserMediaStatus.PermissionsOnlyAudioinputNoVideoDevices | UserMediaStatus.PermissionsOnlyAudioinputFallback | UserMediaStatus.PermissionsOnlyAudioinputFallbackNoVideoDevices | UserMediaStatus.PermissionsOnlyVideoinput | UserMediaStatus.PermissionsOnlyVideoinputNoAudioDevices | UserMediaStatus.PermissionsOnlyVideoinputFallback | UserMediaStatus.PermissionsOnlyVideoinputFallbackNoAudioDevices;
/**
 * Try to come up with an error level according to provided UserMediaStatus and
 * MediaDeviceRequest
 *
 * @param error - The error thrown from media request
 * @param status - The status in result
 * @param constraints - The constraints used for the request
 */
export declare const deriveErrorLevel: (error: Error, status: UserMediaStatus, constraints: MediaDeviceRequest) => "error" | "warn";
export declare const requestUserMedia: (currentDevices?: MediaDeviceInfoLike[], getMedia?: ({ audio, video, }: MediaDeviceRequest) => Promise<MediaStream>) => GetUserMedia;
export declare const mergeNoDeviceStatus: (constraints: MediaDeviceRequest, anyDevices: {
    audio: boolean;
    video: boolean;
}, status: UserMediaStatus) => UserMediaStatus;
export declare const requestUserMediaWithRetry: (currentDevices?: MediaDeviceInfoLike[], createRequestUserMedia?: (currentDevices?: MediaDeviceInfoLike[], getMedia?: ({ audio, video, }: MediaDeviceRequest) => Promise<MediaStream>) => GetUserMedia) => GetUserMedia;
interface Options {
    initialMedia: Media;
    scope?: string;
}
type CreateGetUserMediaProcess = (getUserMedia: GetUserMedia, getCurrentDevices: () => MediaDeviceInfoLike[], options: Options) => Process<MediaDeviceRequest>;
/**
 * A process to get user media
 */
export declare const createGetUserMediaProcess: CreateGetUserMediaProcess;
export {};
