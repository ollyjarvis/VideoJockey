import type { Signal, SignalVariant } from '@pexip/signal';
import type { MediaSignals } from './types';
/**
 * Create a general signal with consistent scoped name
 *
 * @param name - Signal name
 * @param crucial - Signify if the signal is unmissable. @defaultValue true
 * @param variant - The variant of the signal @see Signal @defaultValue 'generic'
 */
export declare const createMediaSignal: <T = undefined>(name: string, crucial?: boolean, variant?: SignalVariant) => Signal<T>;
export declare const REQUIRED_SIGNAL_KEYS: readonly ["onMediaChanged", "onVAD", "onSilentDetected"];
/**
 * Create and return all required and optional (if specified with `more`),
 * signals for media to work
 *
 * @param more - Keys from `MediaSignalsOptional`, @see MediaSignalsOptional
 * @param scope - any scope prefix for the generated signal name, @see Signal
 *
 * The following signals created by default
 * - 'onMediaChanged',
 * - 'onVAD',
 *
 * @see REQUIRED_SIGNAL_KEYS
 */
export declare const createMediaSignals: <K extends "onDevicesChanged" | "onStatusChanged" | "onAudioMuteStateChanged" | "onVideoMuteStateChanged" | keyof import("./types").StreamTrackSignals>(more: K[], scope?: string) => Pick<Required<MediaSignals>, "onMediaChanged" | "onVAD" | "onSilentDetected" | K>;
