import type { MediaDeviceRequest } from '@pexip/media-control';
import type { AudioGraph, AudioNodeInit } from '@pexip/media-processor';
import type { Process, Media } from './types';
interface AudioStreamProcessorProps {
    mixWithAdditionalMedia?: boolean;
    merger?: AudioNodeInit<ChannelMergerNode, ChannelMergerNode>;
    displaySource?: AudioNodeInit<MediaStreamAudioSourceNode, MediaStreamAudioSourceNode>;
    audioGraph?: AudioGraph;
}
declare const FEATURE_KEYS: ['mixWithAdditionalMedia'];
type FeaturePropKeys = (typeof FEATURE_KEYS)[number];
type FeatureProps = Pick<AudioStreamProcessorProps, FeaturePropKeys>;
export declare const updateFeatureProps: (constraints: MediaDeviceRequest['audio'], props: FeatureProps) => FeatureProps;
/**
 * Create a Audio Mixing Processor and will own the stream passed-in
 */
export declare const createAudioMixingProcess: (getCurrrentMedia: () => MediaStream | undefined, scope?: string) => Process<Promise<Media>>;
export {};
