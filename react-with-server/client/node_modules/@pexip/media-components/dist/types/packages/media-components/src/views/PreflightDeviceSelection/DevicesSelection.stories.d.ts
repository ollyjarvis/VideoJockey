import React from 'react';
declare const _default: {
    component: React.FC<{
        requestedVideo?: boolean | undefined;
        requestedAudio?: boolean | undefined;
        videoInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
        audioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
        audioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
        devices: import("@pexip/media-control").MediaDeviceInfoLike[];
        videoInputError: import("../..").DeviceError;
        audioInputError: import("../..").DeviceError;
        onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
        onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
        onVideoInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
        isLoading?: boolean | undefined;
        inputAudioTester?: React.ReactNode;
        outputAudioTester?: React.ReactNode;
        learnHowToGrantAccessURL?: string | undefined;
        permissionInfoType?: import("../..").BlockedBrowserPermissionsInfoType | undefined;
        setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
    } & Pick<Omit<Omit<React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
        ref?: ((instance: HTMLSelectElement | null) => void) | React.RefObject<HTMLSelectElement> | null | undefined;
    }, "disabled"> & {
        colorScheme?: "light" | "dark" | undefined;
        errorText?: string | undefined;
        errorTextTestId?: string | undefined;
        hasError?: boolean | undefined;
        iconType?: import("@pexip/components").IconSource | undefined;
        id?: string | undefined;
        isDisabled?: boolean | undefined;
        isFullWidth?: boolean | undefined;
        label: string;
        labelModifier?: "hidden" | "inline" | undefined;
        onValueChange: (id: string) => void;
        options: import("@pexip/components").Option[];
        sizeModifier?: "medium" | "small" | "compact" | undefined;
        value: string;
        wrapContent?: boolean | undefined;
    }, "sizeModifier">>;
    title: string;
};
export default _default;
export declare const Main: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    requestedVideo?: boolean | undefined;
    requestedAudio?: boolean | undefined;
    videoInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    audioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    audioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    devices: import("@pexip/media-control").MediaDeviceInfoLike[];
    videoInputError: import("../..").DeviceError;
    audioInputError: import("../..").DeviceError;
    onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onVideoInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    isLoading?: boolean | undefined;
    inputAudioTester?: React.ReactNode;
    outputAudioTester?: React.ReactNode;
    learnHowToGrantAccessURL?: string | undefined;
    permissionInfoType?: import("../..").BlockedBrowserPermissionsInfoType | undefined;
    setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
} & Pick<Omit<Omit<React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void) | React.RefObject<HTMLSelectElement> | null | undefined;
}, "disabled"> & {
    colorScheme?: "light" | "dark" | undefined;
    errorText?: string | undefined;
    errorTextTestId?: string | undefined;
    hasError?: boolean | undefined;
    iconType?: import("@pexip/components").IconSource | undefined;
    id?: string | undefined;
    isDisabled?: boolean | undefined;
    isFullWidth?: boolean | undefined;
    label: string;
    labelModifier?: "hidden" | "inline" | undefined;
    onValueChange: (id: string) => void;
    options: import("@pexip/components").Option[];
    sizeModifier?: "medium" | "small" | "compact" | undefined;
    value: string;
    wrapContent?: boolean | undefined;
}, "sizeModifier">>;
export declare const VideoInputError: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    requestedVideo?: boolean | undefined;
    requestedAudio?: boolean | undefined;
    videoInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    audioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    audioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    devices: import("@pexip/media-control").MediaDeviceInfoLike[];
    videoInputError: import("../..").DeviceError;
    audioInputError: import("../..").DeviceError;
    onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onVideoInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    isLoading?: boolean | undefined;
    inputAudioTester?: React.ReactNode;
    outputAudioTester?: React.ReactNode;
    learnHowToGrantAccessURL?: string | undefined;
    permissionInfoType?: import("../..").BlockedBrowserPermissionsInfoType | undefined;
    setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
} & Pick<Omit<Omit<React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void) | React.RefObject<HTMLSelectElement> | null | undefined;
}, "disabled"> & {
    colorScheme?: "light" | "dark" | undefined;
    errorText?: string | undefined;
    errorTextTestId?: string | undefined;
    hasError?: boolean | undefined;
    iconType?: import("@pexip/components").IconSource | undefined;
    id?: string | undefined;
    isDisabled?: boolean | undefined;
    isFullWidth?: boolean | undefined;
    label: string;
    labelModifier?: "hidden" | "inline" | undefined;
    onValueChange: (id: string) => void;
    options: import("@pexip/components").Option[];
    sizeModifier?: "medium" | "small" | "compact" | undefined;
    value: string;
    wrapContent?: boolean | undefined;
}, "sizeModifier">>;
export declare const AudioInputError: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    requestedVideo?: boolean | undefined;
    requestedAudio?: boolean | undefined;
    videoInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    audioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    audioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    devices: import("@pexip/media-control").MediaDeviceInfoLike[];
    videoInputError: import("../..").DeviceError;
    audioInputError: import("../..").DeviceError;
    onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onVideoInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    isLoading?: boolean | undefined;
    inputAudioTester?: React.ReactNode;
    outputAudioTester?: React.ReactNode;
    learnHowToGrantAccessURL?: string | undefined;
    permissionInfoType?: import("../..").BlockedBrowserPermissionsInfoType | undefined;
    setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
} & Pick<Omit<Omit<React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void) | React.RefObject<HTMLSelectElement> | null | undefined;
}, "disabled"> & {
    colorScheme?: "light" | "dark" | undefined;
    errorText?: string | undefined;
    errorTextTestId?: string | undefined;
    hasError?: boolean | undefined;
    iconType?: import("@pexip/components").IconSource | undefined;
    id?: string | undefined;
    isDisabled?: boolean | undefined;
    isFullWidth?: boolean | undefined;
    label: string;
    labelModifier?: "hidden" | "inline" | undefined;
    onValueChange: (id: string) => void;
    options: import("@pexip/components").Option[];
    sizeModifier?: "medium" | "small" | "compact" | undefined;
    value: string;
    wrapContent?: boolean | undefined;
}, "sizeModifier">>;
export declare const AudioVideoInputsError: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    requestedVideo?: boolean | undefined;
    requestedAudio?: boolean | undefined;
    videoInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    audioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    audioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    devices: import("@pexip/media-control").MediaDeviceInfoLike[];
    videoInputError: import("../..").DeviceError;
    audioInputError: import("../..").DeviceError;
    onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onVideoInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    isLoading?: boolean | undefined;
    inputAudioTester?: React.ReactNode;
    outputAudioTester?: React.ReactNode;
    learnHowToGrantAccessURL?: string | undefined;
    permissionInfoType?: import("../..").BlockedBrowserPermissionsInfoType | undefined;
    setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
} & Pick<Omit<Omit<React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void) | React.RefObject<HTMLSelectElement> | null | undefined;
}, "disabled"> & {
    colorScheme?: "light" | "dark" | undefined;
    errorText?: string | undefined;
    errorTextTestId?: string | undefined;
    hasError?: boolean | undefined;
    iconType?: import("@pexip/components").IconSource | undefined;
    id?: string | undefined;
    isDisabled?: boolean | undefined;
    isFullWidth?: boolean | undefined;
    label: string;
    labelModifier?: "hidden" | "inline" | undefined;
    onValueChange: (id: string) => void;
    options: import("@pexip/components").Option[];
    sizeModifier?: "medium" | "small" | "compact" | undefined;
    value: string;
    wrapContent?: boolean | undefined;
}, "sizeModifier">>;
//# sourceMappingURL=DevicesSelection.stories.d.ts.map