import React from 'react';
declare const _default: {
    component: React.FC<Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
        isDirectMedia?: boolean | undefined;
        displayName: string;
        handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
        handleTransfer?: ((identity: string) => void) | undefined;
        handleDTMF?: ((identity: string) => void) | undefined;
        handleFecc?: ((identity: string) => void) | undefined;
        isCurrentPeer: boolean;
        canPerformHostActions?: boolean | undefined;
        isHost: boolean;
        participant: import("../..").InMeetingParticipant;
        additionalMenuContent: import("@pexip/components").MenuItem[];
    } & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        participant: import("../..").InMeetingParticipant;
        isCurrentPeer?: boolean | undefined;
        onMouseEnter: () => void;
        onMouseLeave: () => void;
    }, "participant">>;
    title: string;
};
export default _default;
export declare const Main: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
export declare const Speaking: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
export declare const SpeakingAndCameraMuted: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
export declare const CameraMuted: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
export declare const PeerMutedCurrentNotHost: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
export declare const PeerMutedCurrentHost: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
export declare const PeerMutedCurrentHostWithExtraActions: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
export declare const CurrentPeer: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
export declare const MultiCalls: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Pick<import("../ParticipantRowActions/ParticipantRowActions.module").RowActionState, "isSpeaking"> & {
    isDirectMedia?: boolean | undefined;
    displayName: string;
    handleRemoveUserRequest: (participant: import("../..").InMeetingParticipant, displayName: string) => void;
    handleTransfer?: ((identity: string) => void) | undefined;
    handleDTMF?: ((identity: string) => void) | undefined;
    handleFecc?: ((identity: string) => void) | undefined;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean | undefined;
    isHost: boolean;
    participant: import("../..").InMeetingParticipant;
    additionalMenuContent: import("@pexip/components").MenuItem[];
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    participant: import("../..").InMeetingParticipant;
    isCurrentPeer?: boolean | undefined;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, "participant">>;
//# sourceMappingURL=ParticipantRow.stories.d.ts.map