import React from 'react';
import type { BreakoutRoomId, BreakoutRoomName, InMeetingParticipant } from '../../types';
import { BreakoutRoomVariant } from '../../types';
export declare const BreakoutRoom: React.ForwardRefExoticComponent<Omit<Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    hasBackground?: boolean | undefined;
    headerContent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    footerContent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    bgColor?: string | undefined;
    isRounded?: boolean | undefined;
    isWithBorder?: boolean | undefined;
    isWithShadow?: boolean | undefined;
    shadowModifier?: "light" | "dark" | undefined;
    padding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
    headerPadding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
    footerPadding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
    colorScheme?: "light" | "dark" | undefined;
} & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    padding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
    hasFooterShadow?: boolean | undefined;
}, "hasFooterShadow">, "ref"> & React.RefAttributes<HTMLDivElement> & {
    id: BreakoutRoomId;
    name: BreakoutRoomName;
    participants: InMeetingParticipant[];
    myIdentity?: string | undefined;
    rooms?: Record<string, string> | undefined;
    variant?: BreakoutRoomVariant | undefined;
    isDragTarget?: boolean | undefined;
    scrollElementRef?: React.RefObject<HTMLElement> | undefined;
    onNameChanged?: ((id: string, name: string) => boolean | undefined) | undefined;
    onParticipantDragging?: ((participantDiv: HTMLDivElement) => void) | undefined;
    onParticipantDrag?: ((participantDiv: HTMLDivElement) => void) | undefined;
    onParticipantRoomChange?: ((targetParticipantUuid: string, targetRoomId: string) => void) | undefined;
    _onAssignParticipants?: (() => void) | undefined;
    onJoinRoom?: ((id: string) => void) | undefined;
    onCloseRoom?: ((id: string) => void) | undefined;
    onRemoveRoom?: ((id: string) => void) | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=BreakoutRoom.view.d.ts.map