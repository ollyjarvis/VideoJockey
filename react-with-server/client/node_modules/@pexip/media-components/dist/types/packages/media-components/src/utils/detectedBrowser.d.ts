export type UserAgents = 'Chrome' | 'Edge Chromium' | 'Firefox' | 'Safari Mac' | 'Safari iPad' | 'Safari iPhone' | 'Android' | 'Internet Explorer 10' | 'Internet Explorer 11' | 'EdgeHTML (Microsoft Edge Legacy)';
/**
 * Extract browser version out of the provided user agent string.
 *
 * @param userAgentString - userAgent string.
 * @param expr - Regular expression used as match criteria.
 * @param pos - position in the version string to be returned.
 * @returns browser version.
 */
export declare const extractVersion: (userAgentString: string, expr: RegExp, pos: number) => number;
interface BrowserDetails {
    browser: '' | 'Not a browser.' | 'chrome' | 'firefox' | 'safari' | 'Not a supported browser.';
    version: number;
    supportsUnifiedPlan: boolean;
}
type WebRTC = Pick<typeof window, 'navigator' | 'RTCPeerConnection' | 'RTCRtpTransceiver'>;
type WebRTCTransceiver = Pick<typeof window, 'RTCRtpTransceiver'>;
type SecureContext = Pick<typeof window, 'isSecureContext'>;
interface FirefoxWebRTCFeatures extends WebRTC {
    mozGetUserMedia?: MediaDevices;
}
interface ChromiumWebRTC extends SecureContext {
    webkitGetUserMedia?: MediaDevices;
    webkitRTCPeerConnection?: RTCPeerConnection;
    RTCIceGatherer?: never;
}
type SafariWebRTC = WebRTC;
export declare const isWebRTCBrowser: (win?: WebRTC) => boolean;
export declare const isFirefoxWebRTC: (win?: FirefoxWebRTCFeatures) => boolean;
/**
 * Chrome, Chromium, Webview, Opera.
 * Version matches Chrome/WebRTC version.
 * Chrome 74 removed webkitGetUserMedia on http as well so we need the
 * more complicated fallback to webkitRTCPeerConnection.
 */
export declare const isChromiumWebRTC: (win?: ChromiumWebRTC) => boolean;
export declare const isSafariWebRTC: (win?: SafariWebRTC) => boolean;
export declare const supportUnifiedPlan: (win?: Partial<WebRTCTransceiver>) => boolean;
interface BrowserDetectionDependencies {
    hasWebRTC: typeof isWebRTCBrowser;
    isFirefox: typeof isFirefoxWebRTC;
    isChromium: typeof isChromiumWebRTC;
    isSafari: typeof isSafariWebRTC;
    hasUnifiedPlan: typeof supportUnifiedPlan;
}
/**
 * Browser detector from webrtc-adapter
 *
 * https://github.com/webrtcHacks/adapter/blob/18a8b4127cbc1376320cac5742d817b5b7dd0085/src/js/utils.js#L151
 */
export declare function detectBrowser({ hasWebRTC, isFirefox, isChromium, isSafari, hasUnifiedPlan, }?: Partial<BrowserDetectionDependencies>): BrowserDetails;
/**
 * returns the browser name based on given userAgent.
 *
 * `adapter.browserDetails.browser` does not support all browser (eg. Edge Chromium).
 * this detection can be extended when needed for more specific browsers (eg. Safari IOS)
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent
 */
export declare const getBrowserName: (userAgent: string) => UserAgents | undefined;
/**
 * Detects weather the current browser is supported
 *
 * The detection logic based on `webrtc-adapter` library, which will return browser name or `Not a browser.` or `Not a supported browser.` message.
 */
export declare const isBrowserSupported: (detect?: typeof detectBrowser) => boolean;
export declare const isCurrentBrowserSupported: boolean;
export declare const isScreenShareSupported: boolean;
export declare const isFirefox: boolean;
export declare const browserVersion: number;
export declare const currentBrowserName: UserAgents | undefined;
export {};
//# sourceMappingURL=detectedBrowser.d.ts.map