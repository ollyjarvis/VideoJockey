import React from 'react';
declare const _default: {
    title: string;
    component: React.FC<React.PropsWithChildren<React.PropsWithChildren<(((Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
        className?: string | undefined;
        disabled?: boolean | undefined;
        htmlTag?: import("@pexip/components").InteractiveElementHTMLTag | undefined;
        href?: string | undefined;
    }) & ((React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
        colorScheme?: "light" | "dark" | undefined;
        fontVariant?: import("@pexip/components").FontVariant | undefined;
        htmlTag?: "p" | "span" | undefined;
        isTruncated?: boolean | undefined;
        isUnderlined?: boolean | undefined;
        isUppercase?: boolean | undefined;
        variant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
        whiteSpace?: "pre" | "normal" | "nowrap" | "preLine" | "preWrap" | undefined;
        wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
    }) & {
        href?: string | undefined;
        target?: "_self" | "_blank" | undefined;
        isUnderlined?: boolean | undefined;
        isDisabled?: boolean | undefined;
    }) & {
        displayInviteesModal?: (() => void) | undefined;
    }> & {
        descriptionFontVariant?: import("@pexip/components").FontVariant | undefined;
        descriptionVariant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
        isGuest?: boolean | undefined;
        inMeetingCount?: number | undefined;
        headingFontVariant?: import("@pexip/components").FontVariant | undefined;
        headingClassName?: string | undefined;
    }>>;
    parameters: {
        layout: string;
    };
};
export default _default;
export declare const Guest: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, React.PropsWithChildren<React.PropsWithChildren<(((Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    htmlTag?: import("@pexip/components").InteractiveElementHTMLTag | undefined;
    href?: string | undefined;
}) & ((React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
    colorScheme?: "light" | "dark" | undefined;
    fontVariant?: import("@pexip/components").FontVariant | undefined;
    htmlTag?: "p" | "span" | undefined;
    isTruncated?: boolean | undefined;
    isUnderlined?: boolean | undefined;
    isUppercase?: boolean | undefined;
    variant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    whiteSpace?: "pre" | "normal" | "nowrap" | "preLine" | "preWrap" | undefined;
    wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
}) & {
    href?: string | undefined;
    target?: "_self" | "_blank" | undefined;
    isUnderlined?: boolean | undefined;
    isDisabled?: boolean | undefined;
}) & {
    displayInviteesModal?: (() => void) | undefined;
}> & {
    descriptionFontVariant?: import("@pexip/components").FontVariant | undefined;
    descriptionVariant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    isGuest?: boolean | undefined;
    inMeetingCount?: number | undefined;
    headingFontVariant?: import("@pexip/components").FontVariant | undefined;
    headingClassName?: string | undefined;
}>>;
export declare const NotGuestWithInMeetingCount: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, React.PropsWithChildren<React.PropsWithChildren<(((Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    htmlTag?: import("@pexip/components").InteractiveElementHTMLTag | undefined;
    href?: string | undefined;
}) & ((React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
    colorScheme?: "light" | "dark" | undefined;
    fontVariant?: import("@pexip/components").FontVariant | undefined;
    htmlTag?: "p" | "span" | undefined;
    isTruncated?: boolean | undefined;
    isUnderlined?: boolean | undefined;
    isUppercase?: boolean | undefined;
    variant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    whiteSpace?: "pre" | "normal" | "nowrap" | "preLine" | "preWrap" | undefined;
    wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
}) & {
    href?: string | undefined;
    target?: "_self" | "_blank" | undefined;
    isUnderlined?: boolean | undefined;
    isDisabled?: boolean | undefined;
}) & {
    displayInviteesModal?: (() => void) | undefined;
}> & {
    descriptionFontVariant?: import("@pexip/components").FontVariant | undefined;
    descriptionVariant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    isGuest?: boolean | undefined;
    inMeetingCount?: number | undefined;
    headingFontVariant?: import("@pexip/components").FontVariant | undefined;
    headingClassName?: string | undefined;
}>>;
export declare const NotGuestWithoutInMeetingCount: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, React.PropsWithChildren<React.PropsWithChildren<(((Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    htmlTag?: import("@pexip/components").InteractiveElementHTMLTag | undefined;
    href?: string | undefined;
}) & ((React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
    colorScheme?: "light" | "dark" | undefined;
    fontVariant?: import("@pexip/components").FontVariant | undefined;
    htmlTag?: "p" | "span" | undefined;
    isTruncated?: boolean | undefined;
    isUnderlined?: boolean | undefined;
    isUppercase?: boolean | undefined;
    variant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    whiteSpace?: "pre" | "normal" | "nowrap" | "preLine" | "preWrap" | undefined;
    wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
}) & {
    href?: string | undefined;
    target?: "_self" | "_blank" | undefined;
    isUnderlined?: boolean | undefined;
    isDisabled?: boolean | undefined;
}) & {
    displayInviteesModal?: (() => void) | undefined;
}> & {
    descriptionFontVariant?: import("@pexip/components").FontVariant | undefined;
    descriptionVariant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    isGuest?: boolean | undefined;
    inMeetingCount?: number | undefined;
    headingFontVariant?: import("@pexip/components").FontVariant | undefined;
    headingClassName?: string | undefined;
}>>;
//# sourceMappingURL=JoinDetailsText.stories.d.ts.map