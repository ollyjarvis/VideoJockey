import React from 'react';
import type { Story } from '@storybook/react';
import { ModalType } from '@pexip/components';
declare const _default: {
    title: string;
    Component: React.FC<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        canDrag?: boolean | undefined;
        closeButtonAriaLabel?: string | undefined;
        closeOnOutsideClick?: boolean | undefined;
        colorScheme?: "light" | "dark" | undefined;
        hasBackground?: boolean | undefined;
        isOpen: boolean;
        modalType?: ModalType | undefined;
        onClose?: (() => void) | undefined;
        padding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        scrollbarsAriaLabel?: string | undefined;
        sizeModifier?: "large" | "medium" | "auto" | "small" | "compact" | undefined;
        testIdCloseButton?: string | undefined;
        uniqueTitle?: string | undefined;
        withCloseButton?: boolean | undefined;
        withScrollbars?: boolean | undefined;
        wrapperClassName?: string | undefined;
        withMask?: boolean | undefined;
    } & Pick<Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        hasBackground?: boolean | undefined;
        headerContent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        footerContent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        bgColor?: string | undefined;
        isRounded?: boolean | undefined;
        isWithBorder?: boolean | undefined;
        isWithShadow?: boolean | undefined;
        shadowModifier?: "light" | "dark" | undefined;
        padding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        headerPadding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        footerPadding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        colorScheme?: "light" | "dark" | undefined;
    } & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        padding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        hasFooterShadow?: boolean | undefined;
    }, "hasFooterShadow">, "ref"> & React.RefAttributes<HTMLDivElement>, "hasFooterShadow" | "headerContent" | "footerContent" | "headerPadding" | "footerPadding"> & {
        modalType?: ModalType | undefined;
    }>;
};
export default _default;
export declare const Main: Story<React.ComponentProps<typeof Content>>;
export declare const Empty: Story<React.ComponentProps<typeof Content>>;
export declare const AutoOpen: Story<React.ComponentProps<typeof Content>>;
declare const Content: React.FC<{
    fakeSearchValue: string;
    invitationLink: string;
    isInvitationCopied: boolean;
    onInviteeAdd: () => void;
    onInviteLinkClick: () => void;
    canInvite: boolean;
}>;
//# sourceMappingURL=InvitationModal.stories.d.ts.map