import React from 'react';
export { ExternalVideo } from '../views/MeetingVideo/ExternalVideo.view';
import type { AutoHideButtonCallbacks } from '../types';
import type { MeetingVideoRef } from '../views';
import { StreamStatus } from '../types';
export declare const PresentationMeetingVideo: React.ForwardRefExoticComponent<Omit<{
    autoHideProps: AutoHideButtonCallbacks;
    status: StreamStatus;
    localIsPresenting: boolean;
    localMediaStream?: MediaStream | undefined;
    remoteIsPresenting: boolean;
    remoteMediaStream?: MediaStream | undefined;
    remotePopOut?: Window | undefined;
    handleVideoClick: () => void;
    setIsPresentationBrowserPip: React.Dispatch<React.SetStateAction<boolean>>;
    setIsPresentationPoppedOut: React.Dispatch<React.SetStateAction<boolean>>;
    isSidePanelVisible: boolean;
    floatRoot?: React.RefObject<HTMLDivElement> | undefined;
    videoElementId?: string | undefined;
    tabIndex?: number | undefined;
    onKeyDown?: React.KeyboardEventHandler<HTMLElement> | undefined;
} & Pick<Omit<Omit<{
    mediaStream?: MediaStream | undefined;
    selectedAudioOutputDeviceId?: string | undefined;
    className?: string | undefined;
    isPresentation?: boolean | undefined;
    status: StreamStatus;
    isFullHeight?: boolean | undefined;
    isFullWidth?: boolean | undefined;
    handleVideoClick?: (() => void) | undefined;
    onVideoPlaying?: (() => void) | undefined;
    onPictureInPictureChange?: ((isPip: boolean) => void) | undefined;
    onDoubleClick?: (() => void) | undefined;
    isContainerWide?: boolean | undefined;
    splashScreen?: {
        text: string;
        background: string;
    } | undefined;
    videoElementId?: string | undefined;
    onKeyDown?: React.KeyboardEventHandler<HTMLElement> | undefined;
    tabIndex?: number | undefined;
} & React.RefAttributes<MeetingVideoRef>, "isContainerWide"> & {
    autoHideProps?: AutoHideButtonCallbacks | undefined;
    isSidePanelVisible: boolean;
    floatRoot?: React.RefObject<HTMLDivElement> | undefined;
    videoElementId?: string | undefined;
}, "ref"> & React.RefAttributes<MeetingVideoRef>, "ref">, "ref"> & React.RefAttributes<MeetingVideoRef>>;
//# sourceMappingURL=PresentationMeetingVideo.viewModel.d.ts.map