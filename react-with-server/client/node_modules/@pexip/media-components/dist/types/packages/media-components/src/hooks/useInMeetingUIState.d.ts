import type { Signal } from '@pexip/signal';
import type { AutoHideButtonCallbacks, EnableInMeetingUIAutoHideState } from '../types';
/**
 * Returns an callback update function for `InMeetingUIState`.
 */
export declare const useUpdateMeetingUIStateCallback: (enableAutoHide: (value: React.SetStateAction<boolean>) => void) => (isFocused: boolean, propName: string) => void;
/**
 * Updates `InMeetingUIState` for any dialogs/user-menu and meeting panels state changes.
 *
 * Example: About dialog is open, Chat panel is open and etc.
 */
export declare const useMeetingComponentStateChanges: (updateUIState: (isFocused: boolean, propName: string) => void, showSidePanel: boolean, enableInMeetingUIAutoHide: Signal<EnableInMeetingUIAutoHideState>) => void;
/**
 * Returns `AutoHideButtonCallbacks` with `onFocus/onBlur/onMouseEnter/onMouseLeave` events.
 */
export declare const useAutoHideButtonCallbacks: (updateUIState: (isFocused: boolean, propName: string) => void) => {
    onMouseEnter: () => void;
    onFocus: () => void;
    onMouseLeave: () => void;
    onBlur: () => void;
};
/**
 * Encapsulates the logic of updating the `InMeetingUIState`.
 *
 * @returns `AutoHideButtonCallbacks`.
 */
export declare const useInMeetingUIState: (showSidePanel: boolean, enableAutoHide: (value: React.SetStateAction<boolean>) => void, enableInMeetingUIAutoHide: Signal<EnableInMeetingUIAutoHideState>) => {
    isAutoHideUIVisible: boolean;
    autoHideProps: AutoHideButtonCallbacks;
};
//# sourceMappingURL=useInMeetingUIState.d.ts.map