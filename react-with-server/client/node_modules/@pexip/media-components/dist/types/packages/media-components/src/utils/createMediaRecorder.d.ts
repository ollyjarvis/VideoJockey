export declare const AUDIO_OGG_OPUS = "audio/ogg; codecs=opus";
export declare const AUDIO_WEBM_OPUS = "audio/webm; codecs=opus";
export declare const AUDIO_MP4 = "audio/mp4";
export declare const getAudioMimeType: () => string;
export interface MediaStore {
    add(blob: Blob): void;
    clear(): void;
    get(): Blob[];
}
export interface RecorderEvents {
    onDataAvailable?: (data: Blob) => void;
    onPause?: () => void;
    onStart?: () => void;
    onStop?: () => void;
    onResume?: () => void;
    onError?: () => void;
}
export interface Recorder extends RecorderEvents, Pick<MediaRecorder, 'state' | 'mimeType' | 'stream' | 'audioBitsPerSecond' | 'videoBitsPerSecond' | 'start' | 'stop' | 'requestData' | 'pause' | 'resume'> {
    clean(): void;
}
export declare const createMediaRecorder: (tracks: MediaStreamTrack[], mimeType: string, store?: Pick<MediaStore, 'add'>) => Recorder;
export declare const createInMemoryMediaSourceStore: () => MediaStore;
//# sourceMappingURL=createMediaRecorder.d.ts.map