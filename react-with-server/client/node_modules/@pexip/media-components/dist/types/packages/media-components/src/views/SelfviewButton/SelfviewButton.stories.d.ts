import React from 'react';
import type { Story } from '@storybook/react';
import type { SelfviewButtonProps } from './SelfviewButton.view';
declare const _default: {
    title: string;
    components: {
        InMeetingSelfviewButton: React.FC<React.PropsWithChildren<{
            ariaLabel?: string | undefined;
            className?: string | undefined;
            hasError?: boolean | undefined;
            iconClassName?: string | undefined;
            isDisabled?: boolean | undefined;
            isActive?: boolean | undefined;
            isMobileDevice?: boolean | undefined;
            onClick?: (() => void) | undefined;
            onPointerDownCapture?: ((e: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
            source?: import("@pexip/components").IconSource | undefined;
        } & ((((Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
            className?: string | undefined;
            disabled?: boolean | undefined;
            htmlTag?: import("@pexip/components").InteractiveElementHTMLTag | undefined;
            href?: string | undefined;
        }) & {
            colorScheme?: "light" | "dark" | undefined;
            isActive?: boolean | undefined;
            isDisabled?: boolean | undefined;
            modifier?: "fullWidth" | "square" | "fluid" | "disc" | undefined;
            noBorderRadius?: boolean | undefined;
            noHover?: boolean | undefined;
            size?: "none" | "large" | "medium" | "small" | "compact" | undefined;
            variant?: "primary" | "secondary" | "text" | "success" | "tertiary" | "neutral" | "translucent" | "bordered" | "transparent" | "transparentAlternative" | "danger" | "dangerBordered" | "obvious" | undefined;
        }) & import("@pexip/components").EnhancerProps & import("@pexip/components").LoadingBoxProps & Pick<(React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
            colorScheme?: "light" | "dark" | undefined;
            fontVariant?: import("@pexip/components").FontVariant | undefined;
            htmlTag?: "p" | "span" | undefined;
            isTruncated?: boolean | undefined;
            isUnderlined?: boolean | undefined;
            isUppercase?: boolean | undefined;
            variant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
            whiteSpace?: "pre" | "normal" | "nowrap" | "preLine" | "preWrap" | undefined;
            wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
        }, "colorScheme" | "fontVariant"> & {
            hideChildren?: boolean | undefined;
            textVariant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
            underlineText?: boolean | undefined;
            useTextComponent?: boolean | undefined;
        })>>;
    };
    parameters: {
        layout: string;
    };
    chromatic: {
        disable: boolean;
    };
};
export default _default;
export declare const Main: Story<SelfviewButtonProps>;
export declare const Error: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, React.PropsWithChildren<{
    ariaLabel?: string | undefined;
    className?: string | undefined;
    hasError?: boolean | undefined;
    iconClassName?: string | undefined;
    isDisabled?: boolean | undefined;
    isActive?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    onClick?: (() => void) | undefined;
    onPointerDownCapture?: ((e: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    source?: import("@pexip/components").IconSource | undefined;
} & ((((Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    htmlTag?: import("@pexip/components").InteractiveElementHTMLTag | undefined;
    href?: string | undefined;
}) & {
    colorScheme?: "light" | "dark" | undefined;
    isActive?: boolean | undefined;
    isDisabled?: boolean | undefined;
    modifier?: "fullWidth" | "square" | "fluid" | "disc" | undefined;
    noBorderRadius?: boolean | undefined;
    noHover?: boolean | undefined;
    size?: "none" | "large" | "medium" | "small" | "compact" | undefined;
    variant?: "primary" | "secondary" | "text" | "success" | "tertiary" | "neutral" | "translucent" | "bordered" | "transparent" | "transparentAlternative" | "danger" | "dangerBordered" | "obvious" | undefined;
}) & import("@pexip/components").EnhancerProps & import("@pexip/components").LoadingBoxProps & Pick<(React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
    colorScheme?: "light" | "dark" | undefined;
    fontVariant?: import("@pexip/components").FontVariant | undefined;
    htmlTag?: "p" | "span" | undefined;
    isTruncated?: boolean | undefined;
    isUnderlined?: boolean | undefined;
    isUppercase?: boolean | undefined;
    variant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    whiteSpace?: "pre" | "normal" | "nowrap" | "preLine" | "preWrap" | undefined;
    wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
}, "colorScheme" | "fontVariant"> & {
    hideChildren?: boolean | undefined;
    textVariant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    underlineText?: boolean | undefined;
    useTextComponent?: boolean | undefined;
})>>;
export declare const Mobile: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, React.PropsWithChildren<{
    ariaLabel?: string | undefined;
    className?: string | undefined;
    hasError?: boolean | undefined;
    iconClassName?: string | undefined;
    isDisabled?: boolean | undefined;
    isActive?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    onClick?: (() => void) | undefined;
    onPointerDownCapture?: ((e: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    source?: import("@pexip/components").IconSource | undefined;
} & ((((Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    htmlTag?: import("@pexip/components").InteractiveElementHTMLTag | undefined;
    href?: string | undefined;
}) & {
    colorScheme?: "light" | "dark" | undefined;
    isActive?: boolean | undefined;
    isDisabled?: boolean | undefined;
    modifier?: "fullWidth" | "square" | "fluid" | "disc" | undefined;
    noBorderRadius?: boolean | undefined;
    noHover?: boolean | undefined;
    size?: "none" | "large" | "medium" | "small" | "compact" | undefined;
    variant?: "primary" | "secondary" | "text" | "success" | "tertiary" | "neutral" | "translucent" | "bordered" | "transparent" | "transparentAlternative" | "danger" | "dangerBordered" | "obvious" | undefined;
}) & import("@pexip/components").EnhancerProps & import("@pexip/components").LoadingBoxProps & Pick<(React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
    colorScheme?: "light" | "dark" | undefined;
    fontVariant?: import("@pexip/components").FontVariant | undefined;
    htmlTag?: "p" | "span" | undefined;
    isTruncated?: boolean | undefined;
    isUnderlined?: boolean | undefined;
    isUppercase?: boolean | undefined;
    variant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    whiteSpace?: "pre" | "normal" | "nowrap" | "preLine" | "preWrap" | undefined;
    wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
}, "colorScheme" | "fontVariant"> & {
    hideChildren?: boolean | undefined;
    textVariant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    underlineText?: boolean | undefined;
    useTextComponent?: boolean | undefined;
})>>;
export declare const Disabled: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, React.PropsWithChildren<{
    ariaLabel?: string | undefined;
    className?: string | undefined;
    hasError?: boolean | undefined;
    iconClassName?: string | undefined;
    isDisabled?: boolean | undefined;
    isActive?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    onClick?: (() => void) | undefined;
    onPointerDownCapture?: ((e: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    source?: import("@pexip/components").IconSource | undefined;
} & ((((Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> | Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> | Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    htmlTag?: import("@pexip/components").InteractiveElementHTMLTag | undefined;
    href?: string | undefined;
}) & {
    colorScheme?: "light" | "dark" | undefined;
    isActive?: boolean | undefined;
    isDisabled?: boolean | undefined;
    modifier?: "fullWidth" | "square" | "fluid" | "disc" | undefined;
    noBorderRadius?: boolean | undefined;
    noHover?: boolean | undefined;
    size?: "none" | "large" | "medium" | "small" | "compact" | undefined;
    variant?: "primary" | "secondary" | "text" | "success" | "tertiary" | "neutral" | "translucent" | "bordered" | "transparent" | "transparentAlternative" | "danger" | "dangerBordered" | "obvious" | undefined;
}) & import("@pexip/components").EnhancerProps & import("@pexip/components").LoadingBoxProps & Pick<(React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> | React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>) & {
    colorScheme?: "light" | "dark" | undefined;
    fontVariant?: import("@pexip/components").FontVariant | undefined;
    htmlTag?: "p" | "span" | undefined;
    isTruncated?: boolean | undefined;
    isUnderlined?: boolean | undefined;
    isUppercase?: boolean | undefined;
    variant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    whiteSpace?: "pre" | "normal" | "nowrap" | "preLine" | "preWrap" | undefined;
    wordBreak?: "normal" | "breakAll" | "keepAll" | "overflowWrap" | undefined;
}, "colorScheme" | "fontVariant"> & {
    hideChildren?: boolean | undefined;
    textVariant?: "hidden" | "link" | "success" | "inherit" | "disabled" | "danger" | "warning" | "tinted" | "standard" | "subtle" | undefined;
    underlineText?: boolean | undefined;
    useTextComponent?: boolean | undefined;
})>>;
//# sourceMappingURL=SelfviewButton.stories.d.ts.map