import React from 'react';
import { UserMediaStatus } from '@pexip/media';
declare const _default: {
    title: string;
    Component: React.FC<{
        audioInputControl?: React.ReactNode;
        inputStatusInfo: import("../..").DeviceStatusInfo;
        isAudioInputMuted: boolean;
        isAudioInputUnavailable: boolean;
        isBlurred?: boolean | undefined;
        isMobileDevice: boolean;
        isVideoInputMuted: boolean;
        isVideoInputUnavailable: boolean;
        requestMediaPermissions: () => void;
        segmentationEnabled?: boolean | undefined;
        shouldCenter: boolean;
        shouldShowVideoStatus?: boolean | undefined;
        silentTooltipInfo?: import("../..").DeviceStatusInfo | undefined;
        streamStatus?: UserMediaStatus | undefined;
        toggleAudioInput?: (() => void) | undefined;
        toggleBlur?: (() => void) | undefined;
        toggleVideoInput?: (() => void) | undefined;
        toggleFacingMode?: (() => void) | undefined;
        deviceError: import("../..").DeviceError;
        setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
        learnHowToGrantAccessURL?: string | undefined;
        permissionInfoType: import("../..").BlockedBrowserPermissionsInfoType;
    }>;
    parameters: {
        layout: string;
    };
};
export default _default;
export declare const Main: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    audioInputControl?: React.ReactNode;
    inputStatusInfo: import("../..").DeviceStatusInfo;
    isAudioInputMuted: boolean;
    isAudioInputUnavailable: boolean;
    isBlurred?: boolean | undefined;
    isMobileDevice: boolean;
    isVideoInputMuted: boolean;
    isVideoInputUnavailable: boolean;
    requestMediaPermissions: () => void;
    segmentationEnabled?: boolean | undefined;
    shouldCenter: boolean;
    shouldShowVideoStatus?: boolean | undefined;
    silentTooltipInfo?: import("../..").DeviceStatusInfo | undefined;
    streamStatus?: UserMediaStatus | undefined;
    toggleAudioInput?: (() => void) | undefined;
    toggleBlur?: (() => void) | undefined;
    toggleVideoInput?: (() => void) | undefined;
    toggleFacingMode?: (() => void) | undefined;
    deviceError: import("../..").DeviceError;
    setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
    learnHowToGrantAccessURL?: string | undefined;
    permissionInfoType: import("../..").BlockedBrowserPermissionsInfoType;
} & {
    isPhone: boolean;
    position: "relative" | "absoluteBottom" | "absoluteTop";
    shouldCenter: boolean;
} & {
    children?: React.ReactNode;
}>;
export declare const Centered: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    audioInputControl?: React.ReactNode;
    inputStatusInfo: import("../..").DeviceStatusInfo;
    isAudioInputMuted: boolean;
    isAudioInputUnavailable: boolean;
    isBlurred?: boolean | undefined;
    isMobileDevice: boolean;
    isVideoInputMuted: boolean;
    isVideoInputUnavailable: boolean;
    requestMediaPermissions: () => void;
    segmentationEnabled?: boolean | undefined;
    shouldCenter: boolean;
    shouldShowVideoStatus?: boolean | undefined;
    silentTooltipInfo?: import("../..").DeviceStatusInfo | undefined;
    streamStatus?: UserMediaStatus | undefined;
    toggleAudioInput?: (() => void) | undefined;
    toggleBlur?: (() => void) | undefined;
    toggleVideoInput?: (() => void) | undefined;
    toggleFacingMode?: (() => void) | undefined;
    deviceError: import("../..").DeviceError;
    setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
    learnHowToGrantAccessURL?: string | undefined;
    permissionInfoType: import("../..").BlockedBrowserPermissionsInfoType;
} & {
    isPhone: boolean;
    position: "relative" | "absoluteBottom" | "absoluteTop";
    shouldCenter: boolean;
} & {
    children?: React.ReactNode;
}>;
export declare const Mobile: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    audioInputControl?: React.ReactNode;
    inputStatusInfo: import("../..").DeviceStatusInfo;
    isAudioInputMuted: boolean;
    isAudioInputUnavailable: boolean;
    isBlurred?: boolean | undefined;
    isMobileDevice: boolean;
    isVideoInputMuted: boolean;
    isVideoInputUnavailable: boolean;
    requestMediaPermissions: () => void;
    segmentationEnabled?: boolean | undefined;
    shouldCenter: boolean;
    shouldShowVideoStatus?: boolean | undefined;
    silentTooltipInfo?: import("../..").DeviceStatusInfo | undefined;
    streamStatus?: UserMediaStatus | undefined;
    toggleAudioInput?: (() => void) | undefined;
    toggleBlur?: (() => void) | undefined;
    toggleVideoInput?: (() => void) | undefined;
    toggleFacingMode?: (() => void) | undefined;
    deviceError: import("../..").DeviceError;
    setShowHelpVideo: React.Dispatch<React.SetStateAction<boolean>>;
    learnHowToGrantAccessURL?: string | undefined;
    permissionInfoType: import("../..").BlockedBrowserPermissionsInfoType;
} & {
    isPhone: boolean;
    position: "relative" | "absoluteBottom" | "absoluteTop";
    shouldCenter: boolean;
} & {
    children?: React.ReactNode;
}>;
//# sourceMappingURL=PreflightMediaControls.stories.d.ts.map