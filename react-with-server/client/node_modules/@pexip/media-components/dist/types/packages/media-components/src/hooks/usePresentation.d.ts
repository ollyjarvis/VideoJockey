/// <reference types="react" />
import type { GetDisplayMedia } from '@pexip/media';
import type { Signal } from '@pexip/signal';
import type { PresentationEvent, PresentationState } from '../types';
import { PresentationEmphasis, PresentationSize } from '../types';
export declare const presentationReducer: (state: PresentationState, action: PresentationEvent) => PresentationState;
export declare const usePresentation: ({ presentationConnectionStateChangeSignal, presentationPresenterNameSignal, presentationReceiveStreamSignal, present, stopPresentation, handleGetDisplayMedia, presentationStreamCleanup, handlaGetDisplayMediaError, }: {
    presentationConnectionStateChangeSignal: Signal<{
        send: RTCPeerConnectionState;
        recv: RTCPeerConnectionState;
    }>;
    presentationPresenterNameSignal?: Signal<string> | undefined;
    presentationReceiveStreamSignal: Signal<MediaStream>;
    present: (stream: MediaStream) => void;
    stopPresentation: () => void;
    handleGetDisplayMedia: GetDisplayMedia;
    presentationStreamCleanup?: (() => void) | undefined;
    handlaGetDisplayMediaError?: ((error: Error) => void) | undefined;
}) => {
    emphasis: PresentationEmphasis | undefined;
    isPrimaryExpanded: boolean;
    isShowSteal: boolean;
    isPresenting: boolean;
    size: PresentationSize | undefined;
    localIsPresenting: boolean;
    localMediaStream: MediaStream | undefined;
    remoteIsPresenting: boolean;
    remoteMediaStream: MediaStream | undefined;
    activity: import("../types").PresentationActivityState | undefined;
    presenterName: string | undefined;
    handlePresentationRequest: () => void;
    setEmphasis: (emphasis: PresentationEmphasis) => void;
    setExpandPrimary: (expandPrimary: boolean) => void;
    setShowSteal: (showSteal: boolean) => void;
    setSize: (size: PresentationSize) => void;
    startPresentation: () => Promise<void>;
    stopPresentation: () => void;
    poppedOut: {
        isPresentationPoppedOut: boolean;
        remotePopOutRef: import("react").MutableRefObject<Window | undefined>;
        setIsPresentationPoppedOut: import("react").Dispatch<import("react").SetStateAction<boolean>>;
        toggleIsPresentationPoppedOut: () => void;
    };
};
//# sourceMappingURL=usePresentation.d.ts.map