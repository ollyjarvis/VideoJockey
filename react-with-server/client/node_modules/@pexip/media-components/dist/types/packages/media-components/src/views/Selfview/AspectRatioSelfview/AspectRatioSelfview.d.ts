import React from 'react';
import type { SelfviewAspectRatios } from '../../../types';
export interface WithAspectRatioSelfviewProps {
    className?: string;
    aspectRatioType?: SelfviewAspectRatios;
}
export declare function withAspectRatioSelfview<P>(Component: React.ComponentType<P>): (props: P & WithAspectRatioSelfviewProps) => React.JSX.Element;
export declare const AspectRatioSelfview: (props: Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    size?: "large" | "full" | "medium" | "small" | undefined;
    background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
    borderRadius?: "none" | "box" | undefined;
    border?: boolean | undefined;
    alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
    flexDirection?: "row" | "column" | undefined;
    justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
    isFullHeight?: boolean | undefined;
    isFullWidth?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement> & {
    overlayClassName?: string | undefined;
    isMirrored?: boolean | undefined;
    isVideoInputMuted: boolean;
    localMediaStream?: MediaStream | undefined;
    shouldShowUserAvatar: boolean;
    sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
    shouldShowBorder?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    username: string;
    shouldShowErrorBorder?: boolean | undefined;
    showOverlayShadow?: boolean | undefined;
} & {
    children?: React.ReactNode;
} & WithAspectRatioSelfviewProps) => React.JSX.Element;
export type SelfviewAspectRatioProps = React.ComponentProps<typeof AspectRatioSelfview>;
//# sourceMappingURL=AspectRatioSelfview.d.ts.map