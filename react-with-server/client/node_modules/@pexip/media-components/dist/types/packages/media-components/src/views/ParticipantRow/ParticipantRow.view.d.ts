import type { ComponentProps } from 'react';
import React from 'react';
import type { MenuItem } from '@pexip/components';
import type { InMeetingParticipant } from '../../types';
import type { RowActionState } from '../ParticipantRowActions/ParticipantRowActions.module';
export declare const ParticipantRowWrapper: React.FC<ComponentProps<'div'> & {
    participant: InMeetingParticipant;
    isCurrentPeer?: boolean;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}>;
export declare const BreakoutParticipantRow: React.FC<ComponentProps<'div'> & Pick<ComponentProps<typeof ParticipantRowWrapper>, 'participant' | 'isCurrentPeer'> & {
    onParticipantRoomChange?: (targetParticipantUuid: string, targetRoomId: string) => void;
    rooms?: Record<string, string>;
    isDragging: boolean;
}>;
export declare const ParticipantRow: React.FC<Pick<RowActionState, 'isSpeaking'> & {
    isDirectMedia?: boolean;
    displayName: string;
    handleRemoveUserRequest: (participant: InMeetingParticipant, displayName: string) => void;
    handleTransfer?: (identity: string) => void;
    handleDTMF?: (identity: string) => void;
    handleFecc?: (identity: string) => void;
    isCurrentPeer: boolean;
    canPerformHostActions?: boolean;
    isHost: boolean;
    participant: InMeetingParticipant;
    additionalMenuContent: MenuItem[];
} & Pick<ComponentProps<typeof ParticipantRowWrapper>, 'participant'>>;
//# sourceMappingURL=ParticipantRow.view.d.ts.map