import type { Dispatch, SetStateAction } from 'react';
import type { PreviewStreamController } from '@pexip/media';
import { UserMediaStatus } from '@pexip/media';
import type { DeviceError, DeviceErrors, DeviceStatusInfo } from '../types';
export declare const useDeviceErrorMessageState: () => {
    videoInputError: DeviceError;
    setVideoInputError: Dispatch<SetStateAction<DeviceError>>;
    audioInputError: DeviceError;
    setAudioInputError: Dispatch<SetStateAction<DeviceError>>;
};
export declare const useSubscribeToInputError: (setAudioInputError: Dispatch<SetStateAction<DeviceError>>, setVideoInputError: Dispatch<SetStateAction<DeviceError>>, controller?: PreviewStreamController) => void;
export declare const buildErrorMessages: (deviceStatusInfo: DeviceStatusInfo, deviceErrors?: DeviceErrors) => DeviceErrors;
export declare const getDeviceErrorMessageSetter: (deviceStatusInfo: DeviceStatusInfo, setAudioInputError: Dispatch<SetStateAction<DeviceError>>, setVideoInputError: Dispatch<SetStateAction<DeviceError>>) => (deviceErrors: DeviceErrors) => (() => void) | undefined;
/**
 * Sets `DeviceError` when device is missing or its permissions are rejected.
 */
export declare const useDeviceErrorMessage: ({ setAudioInputError, setVideoInputError, streamStatus, requested, }: {
    setAudioInputError: Dispatch<SetStateAction<DeviceError>>;
    setVideoInputError: Dispatch<SetStateAction<DeviceError>>;
    streamStatus: UserMediaStatus;
    requested: {
        audio: boolean;
        video: boolean;
    };
}) => void;
//# sourceMappingURL=useDeviceErrorMessage.d.ts.map