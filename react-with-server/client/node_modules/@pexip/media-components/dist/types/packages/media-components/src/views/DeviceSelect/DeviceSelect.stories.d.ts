import React from 'react';
declare const _default: {
    component: React.FC<{
        devices: import("@pexip/media-control").MediaDeviceInfoLike[];
        iconType?: import("@pexip/components").IconSource | undefined;
        isDisabled: boolean;
        label: string;
        mediaDeviceInfoLike?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
        onDeviceChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    } & Partial<Omit<Omit<React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
        ref?: ((instance: HTMLSelectElement | null) => void) | React.RefObject<HTMLSelectElement> | null | undefined;
    }, "disabled"> & {
        colorScheme?: "light" | "dark" | undefined;
        errorText?: string | undefined;
        errorTextTestId?: string | undefined;
        hasError?: boolean | undefined;
        iconType?: import("@pexip/components").IconSource | undefined;
        id?: string | undefined;
        isDisabled?: boolean | undefined;
        isFullWidth?: boolean | undefined;
        label: string;
        labelModifier?: "hidden" | "inline" | undefined;
        onValueChange: (id: string) => void;
        options: import("@pexip/components").Option[];
        sizeModifier?: "medium" | "small" | "compact" | undefined;
        value: string;
        wrapContent?: boolean | undefined;
    }>>;
    title: string;
};
export default _default;
export declare const Main: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Omit<{
    devices: import("@pexip/media-control").MediaDeviceInfoLike[];
    iconType?: import("@pexip/components").IconSource | undefined;
    isDisabled: boolean;
    label: string;
    mediaDeviceInfoLike?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    onDeviceChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
} & Partial<Omit<Omit<React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void) | React.RefObject<HTMLSelectElement> | null | undefined;
}, "disabled"> & {
    colorScheme?: "light" | "dark" | undefined;
    errorText?: string | undefined;
    errorTextTestId?: string | undefined;
    hasError?: boolean | undefined;
    iconType?: import("@pexip/components").IconSource | undefined;
    id?: string | undefined;
    isDisabled?: boolean | undefined;
    isFullWidth?: boolean | undefined;
    label: string;
    labelModifier?: "hidden" | "inline" | undefined;
    onValueChange: (id: string) => void;
    options: import("@pexip/components").Option[];
    sizeModifier?: "medium" | "small" | "compact" | undefined;
    value: string;
    wrapContent?: boolean | undefined;
}>, "ref">>;
export declare const Empty: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Omit<{
    devices: import("@pexip/media-control").MediaDeviceInfoLike[];
    iconType?: import("@pexip/components").IconSource | undefined;
    isDisabled: boolean;
    label: string;
    mediaDeviceInfoLike?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    onDeviceChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
} & Partial<Omit<Omit<React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void) | React.RefObject<HTMLSelectElement> | null | undefined;
}, "disabled"> & {
    colorScheme?: "light" | "dark" | undefined;
    errorText?: string | undefined;
    errorTextTestId?: string | undefined;
    hasError?: boolean | undefined;
    iconType?: import("@pexip/components").IconSource | undefined;
    id?: string | undefined;
    isDisabled?: boolean | undefined;
    isFullWidth?: boolean | undefined;
    label: string;
    labelModifier?: "hidden" | "inline" | undefined;
    onValueChange: (id: string) => void;
    options: import("@pexip/components").Option[];
    sizeModifier?: "medium" | "small" | "compact" | undefined;
    value: string;
    wrapContent?: boolean | undefined;
}>, "ref">>;
//# sourceMappingURL=DeviceSelect.stories.d.ts.map