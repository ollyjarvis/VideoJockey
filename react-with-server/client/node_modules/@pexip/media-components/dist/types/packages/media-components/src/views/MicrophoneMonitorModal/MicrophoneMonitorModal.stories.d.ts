import React from 'react';
import type { Story } from '@storybook/react';
import type { MicrophoneMonitorModalProps } from './MicrophoneMonitorModal.view';
import { TestYourMicStages } from './MicrophoneMonitorModal.view';
declare const _default: {
    component: React.FC<{
        audioMeter?: React.ReactNode;
        className?: string | undefined;
        closeOnOutsideClick?: boolean | undefined;
        currentStage: TestYourMicStages;
        audioInputs: import("@pexip/media-control").MediaDeviceInfoLike[];
        audioOutputs: import("@pexip/media-control").MediaDeviceInfoLike[];
        isOpen: boolean;
        onClose?: (() => void) | undefined;
        onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
        onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
        selectedAudioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
        selectedAudioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
        startTest: () => void;
        tryAgain?: (() => void) | undefined;
        replay?: (() => void) | undefined;
    }>;
    title: string;
    parameters: {
        layout: string;
        chromatic: {
            pauseAnimationAtEnd: boolean;
        };
    };
};
export default _default;
export declare const BeforeTesting: Story<MicrophoneMonitorModalProps>;
export declare const GetReady: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    audioMeter?: React.ReactNode;
    className?: string | undefined;
    closeOnOutsideClick?: boolean | undefined;
    currentStage: TestYourMicStages;
    audioInputs: import("@pexip/media-control").MediaDeviceInfoLike[];
    audioOutputs: import("@pexip/media-control").MediaDeviceInfoLike[];
    isOpen: boolean;
    onClose?: (() => void) | undefined;
    onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    selectedAudioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    selectedAudioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    startTest: () => void;
    tryAgain?: (() => void) | undefined;
    replay?: (() => void) | undefined;
}>;
export declare const Recording: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    audioMeter?: React.ReactNode;
    className?: string | undefined;
    closeOnOutsideClick?: boolean | undefined;
    currentStage: TestYourMicStages;
    audioInputs: import("@pexip/media-control").MediaDeviceInfoLike[];
    audioOutputs: import("@pexip/media-control").MediaDeviceInfoLike[];
    isOpen: boolean;
    onClose?: (() => void) | undefined;
    onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    selectedAudioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    selectedAudioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    startTest: () => void;
    tryAgain?: (() => void) | undefined;
    replay?: (() => void) | undefined;
}>;
export declare const PlayingBack: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    audioMeter?: React.ReactNode;
    className?: string | undefined;
    closeOnOutsideClick?: boolean | undefined;
    currentStage: TestYourMicStages;
    audioInputs: import("@pexip/media-control").MediaDeviceInfoLike[];
    audioOutputs: import("@pexip/media-control").MediaDeviceInfoLike[];
    isOpen: boolean;
    onClose?: (() => void) | undefined;
    onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    selectedAudioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    selectedAudioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    startTest: () => void;
    tryAgain?: (() => void) | undefined;
    replay?: (() => void) | undefined;
}>;
export declare const PlayingBackFinished: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, {
    audioMeter?: React.ReactNode;
    className?: string | undefined;
    closeOnOutsideClick?: boolean | undefined;
    currentStage: TestYourMicStages;
    audioInputs: import("@pexip/media-control").MediaDeviceInfoLike[];
    audioOutputs: import("@pexip/media-control").MediaDeviceInfoLike[];
    isOpen: boolean;
    onClose?: (() => void) | undefined;
    onAudioInputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    onAudioOutputChange: (device: import("@pexip/media-control").MediaDeviceInfoLike) => void;
    selectedAudioInput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    selectedAudioOutput?: import("@pexip/media-control").MediaDeviceInfoLike | undefined;
    startTest: () => void;
    tryAgain?: (() => void) | undefined;
    replay?: (() => void) | undefined;
}>;
//# sourceMappingURL=MicrophoneMonitorModal.stories.d.ts.map