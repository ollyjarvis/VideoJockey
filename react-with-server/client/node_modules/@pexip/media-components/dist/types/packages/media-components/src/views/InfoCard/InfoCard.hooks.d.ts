import type React from 'react';
import type { ImageSrc } from '@pexip/components';
import type { InfoCardOrientation } from './InfoCard.types';
import { InfoCardWidth } from './InfoCard.constants';
export declare const useInfoCardOrientation: () => InfoCardOrientation | undefined;
export declare const useInfoCardWidth: () => InfoCardWidth | undefined;
export declare enum CardAnimateState {
    NoAnimation = "",
    VerticalOpen = "verticalOpen",
    VerticalClose = "verticalClose",
    HorizontalOpen = "horizontalOpen",
    HorizontalClose = "horizontalClose"
}
export declare const useAnimateInfoCard: ({ isVertical, shouldAnimate, updateStates, onAnimateComplete, }: {
    isVertical: boolean;
    shouldAnimate: boolean;
    updateStates: () => void;
    onAnimateComplete: () => void;
}) => [CardAnimateState, () => void];
export declare const useInfoCardStates: ({ orientation, width, imageUrl, logoUrl, imageContent, headerText, bodyContent, }: {
    orientation: InfoCardOrientation | undefined;
    width: InfoCardWidth | undefined;
    imageUrl: string;
    logoUrl?: ImageSrc | undefined;
    imageContent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    headerText: string;
    bodyContent: React.ReactNode;
}) => readonly [{
    readonly isVertical: boolean;
    readonly cardWidth: InfoCardWidth | undefined;
    readonly cardImageUrl: string;
    readonly cardLogoUrl: string | import("@pexip/components/dist/types/src/types/images").SrcSet | undefined;
    readonly cardImageContent: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    readonly cardHeaderText: string;
    readonly cardBodyContent: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | Iterable<React.ReactNode> | React.ReactPortal | null | undefined;
}, () => void];
//# sourceMappingURL=InfoCard.hooks.d.ts.map