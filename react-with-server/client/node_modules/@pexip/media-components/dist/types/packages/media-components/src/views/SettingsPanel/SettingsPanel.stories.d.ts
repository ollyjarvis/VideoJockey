import React from 'react';
declare const _default: {
    component: React.FC<{
        children?: React.ReactNode;
    } & {
        fillHeight?: boolean | undefined;
        overflowHidden?: boolean | undefined;
        scrollElementRef?: React.RefObject<HTMLElement> | undefined;
    } & Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        hasBackground?: boolean | undefined;
        headerContent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        footerContent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        bgColor?: string | undefined;
        isRounded?: boolean | undefined;
        isWithBorder?: boolean | undefined;
        isWithShadow?: boolean | undefined;
        shadowModifier?: "light" | "dark" | undefined;
        padding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        headerPadding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        footerPadding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        colorScheme?: "light" | "dark" | undefined;
    } & Pick<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        padding?: "none" | "large" | "medium" | "small" | "compact" | undefined;
        hasFooterShadow?: boolean | undefined;
    }, "hasFooterShadow">, "ref"> & React.RefAttributes<HTMLDivElement>>;
    title: string;
};
export default _default;
export declare const Main: {
    (): React.JSX.Element;
    parameters: {
        chromatic: {
            disable: boolean;
        };
    };
};
//# sourceMappingURL=SettingsPanel.stories.d.ts.map