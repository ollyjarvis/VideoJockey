import React from 'react';
import { UserMediaStatus } from '@pexip/media';
declare const _default: {
    component: React.FC<Omit<Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        size?: "large" | "full" | "medium" | "small" | undefined;
        background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
        borderRadius?: "none" | "box" | undefined;
        border?: boolean | undefined;
        alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
        flexDirection?: "row" | "column" | undefined;
        justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
        isFullHeight?: boolean | undefined;
        isFullWidth?: boolean | undefined;
    }, "ref"> & React.RefAttributes<HTMLDivElement> & {
        overlayClassName?: string | undefined;
        isMirrored?: boolean | undefined;
        isVideoInputMuted: boolean;
        localMediaStream?: MediaStream | undefined;
        shouldShowUserAvatar: boolean;
        sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
        shouldShowBorder?: boolean | undefined;
        isMobileDevice?: boolean | undefined;
        username: string;
        shouldShowErrorBorder?: boolean | undefined;
        showOverlayShadow?: boolean | undefined;
    } & {
        children?: React.ReactNode;
    }, "shouldShowUserAvatar"> & {
        aspectRatioType?: "camera-step" | "in-meeting" | "ready-to-join-express" | "ready-to-join-step" | "force-landscape" | undefined;
        isMobileDevice?: boolean | undefined;
        segmentationEnabled?: boolean | undefined;
        shouldShowBorder: boolean;
        streamStatus: UserMediaStatus | undefined;
        preflightControls?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        requestedAudio?: boolean | undefined;
        requestedVideo?: boolean | undefined;
    }>;
    title: string;
};
export default _default;
export declare const Main: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Omit<Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    size?: "large" | "full" | "medium" | "small" | undefined;
    background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
    borderRadius?: "none" | "box" | undefined;
    border?: boolean | undefined;
    alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
    flexDirection?: "row" | "column" | undefined;
    justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
    isFullHeight?: boolean | undefined;
    isFullWidth?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement> & {
    overlayClassName?: string | undefined;
    isMirrored?: boolean | undefined;
    isVideoInputMuted: boolean;
    localMediaStream?: MediaStream | undefined;
    shouldShowUserAvatar: boolean;
    sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
    shouldShowBorder?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    username: string;
    shouldShowErrorBorder?: boolean | undefined;
    showOverlayShadow?: boolean | undefined;
} & {
    children?: React.ReactNode;
}, "shouldShowUserAvatar"> & {
    aspectRatioType?: "camera-step" | "in-meeting" | "ready-to-join-express" | "ready-to-join-step" | "force-landscape" | undefined;
    isMobileDevice?: boolean | undefined;
    segmentationEnabled?: boolean | undefined;
    shouldShowBorder: boolean;
    streamStatus: UserMediaStatus | undefined;
    preflightControls?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    requestedAudio?: boolean | undefined;
    requestedVideo?: boolean | undefined;
}>;
export declare const WithError: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Omit<Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    size?: "large" | "full" | "medium" | "small" | undefined;
    background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
    borderRadius?: "none" | "box" | undefined;
    border?: boolean | undefined;
    alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
    flexDirection?: "row" | "column" | undefined;
    justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
    isFullHeight?: boolean | undefined;
    isFullWidth?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement> & {
    overlayClassName?: string | undefined;
    isMirrored?: boolean | undefined;
    isVideoInputMuted: boolean;
    localMediaStream?: MediaStream | undefined;
    shouldShowUserAvatar: boolean;
    sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
    shouldShowBorder?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    username: string;
    shouldShowErrorBorder?: boolean | undefined;
    showOverlayShadow?: boolean | undefined;
} & {
    children?: React.ReactNode;
}, "shouldShowUserAvatar"> & {
    aspectRatioType?: "camera-step" | "in-meeting" | "ready-to-join-express" | "ready-to-join-step" | "force-landscape" | undefined;
    isMobileDevice?: boolean | undefined;
    segmentationEnabled?: boolean | undefined;
    shouldShowBorder: boolean;
    streamStatus: UserMediaStatus | undefined;
    preflightControls?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    requestedAudio?: boolean | undefined;
    requestedVideo?: boolean | undefined;
}>;
//# sourceMappingURL=Selfview.stories.d.ts.map