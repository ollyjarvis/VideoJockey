import type { IScrollbars } from '@pexip/components';
import type { ChatMessage } from '../types';
export declare enum NewChatMessageAction {
    ScrollToLastMessage = "scroll-to-last-message",
    DisplayNewMessageToast = "display-new-message-toast"
}
/**
 * calculates wether the new chat messages Pill should be displayed
 *
 * @param isLastMessageRead - boolean
 * @param currentUserId - string
 * @param messageAuthorId - string
 */
export declare const calculateNewChatMessageAction: (isMessageByCurrentUser: boolean, isLastMessageVisible: boolean) => NewChatMessageAction;
/**
 * detect wether the last message posted by current user
 *
 * @param messages - `Messages[]` chat messages
 * @param currentUserId - `string` the current user id
 */
export declare const isLastMessageByCurrentUser: (messages: ChatMessage[], currentUserId: string) => boolean;
/**
 * Scrolls to last chat message
 *
 * @param scrollbarRef - RefObject<IScrollbars>
 */
export declare const scrollToLastMessage: (scrollbarRef: React.RefObject<IScrollbars>, animateScroll?: boolean) => void;
/**
 * Return function to detect wether the last chat message is visible to the user.
 */
export declare const getIsLastNewMessageVisibleFn: (bottomOffset?: number) => (scrollbars?: IScrollbars | null) => boolean;
/**
 * calculate how many unread chat messages
 *
 * @param messages - `Messages[]` chat messages
 * @param lastVisibleMessageId - boolean
 */
export declare const calculateHowManyUnreadMessages: (messages: ChatMessage[], lastVisibleMessageId: string) => number;
/**
 * Check if we should ignore incoming message when it arrives
 */
export declare const shouldEmitNewMessage: (message: string, limit: number) => boolean | "";
//# sourceMappingURL=chat.d.ts.map