import { DeviceError } from '../src/types';
export declare const createMediaDevice: (info: Partial<Omit<MediaDeviceInfo, 'toJSON'>>) => MediaDeviceInfo;
interface Devices {
    camera: MediaDeviceInfo;
    fauxCamera: MediaDeviceInfo;
    fauxMicrophone: MediaDeviceInfo;
    microphone: MediaDeviceInfo;
    speaker: MediaDeviceInfo;
    sameLabelCamera: MediaDeviceInfo;
    sameLabelMicrophone: MediaDeviceInfo;
}
export declare const createDevices: (permissionsNotGranted?: boolean) => Devices;
export declare const mediaStreamTracks: MediaStreamTrack[];
export declare const defaultErrorStateMock: DeviceError;
export declare class MediaStreamTrackMock implements MediaStreamTrack {
    contentHint: string;
    readonly id: string;
    readonly kind: 'audio' | 'video';
    readonly label: string;
    readonly muted: boolean;
    readonly readonly: boolean;
    readonly remote: boolean;
    private deviceId;
    private internalEnabled;
    private internalReadyState;
    private internalOnEndedFn;
    private internalOnMuteFn;
    private internalOnUnmuteFn;
    private onEndedFn;
    private onMuteFn;
    private onUnmuteFn;
    constructor({ kind, id, muted, enabled, readyState, deviceId, label, }: {
        kind: 'audio' | 'video';
        label: string;
        id?: string | null;
        muted?: boolean;
        enabled?: boolean;
        readyState?: MediaStreamTrackState;
        deviceId?: string;
    });
    get readyState(): MediaStreamTrackState;
    get enabled(): boolean;
    set enabled(enable: boolean);
    set onended(fn: (event: Event) => void);
    set onmute(fn: (event: Event) => void);
    set onunmute(fn: (event: Event) => void);
    applyConstraints(_constraints?: MediaTrackConstraints | undefined): Promise<void>;
    getCapabilities(): MediaTrackCapabilities;
    getConstraints(): MediaTrackConstraints;
    addEventListener<K extends 'ended' | 'mute' | 'unmute'>(type: K, listener: (this: MediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => void, _options: unknown): void;
    removeEventListener<K extends 'ended' | 'mute' | 'unmute'>(type: K, _listener: (this: MediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => void, _options: unknown): void;
    dispatchEvent(_event: Event): boolean;
    stop(): void;
    getSettings(): {
        deviceId: string;
    };
    clone(): MediaStreamTrackMock;
}
export declare class MediaStreamMock {
    private tracks;
    constructor(tracks?: MediaStreamTrack[]);
    getAudioTracks(): MediaStreamTrack[];
    getVideoTracks(): MediaStreamTrack[];
    getTrackById(id: string): MediaStreamTrack | undefined;
    getTracks(): MediaStreamTrack[];
}
export {};
//# sourceMappingURL=mocks.d.ts.map