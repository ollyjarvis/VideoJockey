import React from 'react';
declare const _default: {
    title: string;
    component: React.FC<Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        size?: "large" | "full" | "medium" | "small" | undefined;
        background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
        borderRadius?: "none" | "box" | undefined;
        border?: boolean | undefined;
        alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
        flexDirection?: "row" | "column" | undefined;
        justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
        isFullHeight?: boolean | undefined;
        isFullWidth?: boolean | undefined;
    }, "ref"> & React.RefAttributes<HTMLDivElement> & {
        overlayClassName?: string | undefined;
        isMirrored?: boolean | undefined;
        isVideoInputMuted: boolean;
        localMediaStream?: MediaStream | undefined;
        shouldShowUserAvatar: boolean;
        sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
        shouldShowBorder?: boolean | undefined;
        isMobileDevice?: boolean | undefined;
        username: string;
        shouldShowErrorBorder?: boolean | undefined;
        showOverlayShadow?: boolean | undefined;
    } & {
        children?: React.ReactNode;
    } & {
        quality: import("@pexip/peer-connection-stats").Quality;
        callQualityPosition: "topRight" | "bottomRight";
        overlayClassName?: string | undefined;
        isAudioInputMuted?: boolean | undefined;
        isAudioInputMissing?: boolean | undefined;
        isMobileDevice?: boolean | undefined;
        areEffectsEnabled: boolean;
        areEffectsApplied: boolean;
        onCollapseSelfview: () => void;
        onToggleAudioClick: () => void;
        toggleFacingMode?: (() => void) | undefined;
        openEffectsModal: () => void;
    } & {
        isAudioInputMuted: boolean;
        isVideoInputMuted: boolean;
        isAudioInputMissing?: boolean | undefined;
        isVideoInputMissing?: boolean | undefined;
        onExpandSelfview: () => void;
        onToggleVideoClick: () => void;
        onToggleAudioClick: () => void;
        showSelfviewTooltip: boolean;
        setShowSelfviewTooltip: (shouldShow: boolean) => void;
        notificationTooltipPos?: import("@pexip/components").NotificationTooltipPosition | undefined;
        selfviewBtnTooltipPos?: "left" | "top" | "topRight" | "topLeft" | "topStart" | "bottomRight" | "bottomLeft" | "bottomStart" | "right" | "bottom" | "endBottom" | undefined;
    } & {
        autoHideProps: import("../../..").AutoHideButtonCallbacks;
        isFolded: boolean;
        floatRoot?: React.RefObject<HTMLDivElement> | undefined;
        isSidePanelVisible: boolean;
    }>;
    parameters: {
        layout: string;
    };
};
export default _default;
export declare const Desktop: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    size?: "large" | "full" | "medium" | "small" | undefined;
    background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
    borderRadius?: "none" | "box" | undefined;
    border?: boolean | undefined;
    alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
    flexDirection?: "row" | "column" | undefined;
    justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
    isFullHeight?: boolean | undefined;
    isFullWidth?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement> & {
    overlayClassName?: string | undefined;
    isMirrored?: boolean | undefined;
    isVideoInputMuted: boolean;
    localMediaStream?: MediaStream | undefined;
    shouldShowUserAvatar: boolean;
    sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
    shouldShowBorder?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    username: string;
    shouldShowErrorBorder?: boolean | undefined;
    showOverlayShadow?: boolean | undefined;
} & {
    children?: React.ReactNode;
} & {
    quality: import("@pexip/peer-connection-stats").Quality;
    callQualityPosition: "topRight" | "bottomRight";
    overlayClassName?: string | undefined;
    isAudioInputMuted?: boolean | undefined;
    isAudioInputMissing?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    areEffectsEnabled: boolean;
    areEffectsApplied: boolean;
    onCollapseSelfview: () => void;
    onToggleAudioClick: () => void;
    toggleFacingMode?: (() => void) | undefined;
    openEffectsModal: () => void;
} & {
    isAudioInputMuted: boolean;
    isVideoInputMuted: boolean;
    isAudioInputMissing?: boolean | undefined;
    isVideoInputMissing?: boolean | undefined;
    onExpandSelfview: () => void;
    onToggleVideoClick: () => void;
    onToggleAudioClick: () => void;
    showSelfviewTooltip: boolean;
    setShowSelfviewTooltip: (shouldShow: boolean) => void;
    notificationTooltipPos?: import("@pexip/components").NotificationTooltipPosition | undefined;
    selfviewBtnTooltipPos?: "left" | "top" | "topRight" | "topLeft" | "topStart" | "bottomRight" | "bottomLeft" | "bottomStart" | "right" | "bottom" | "endBottom" | undefined;
} & {
    autoHideProps: import("../../..").AutoHideButtonCallbacks;
    isFolded: boolean;
    floatRoot?: React.RefObject<HTMLDivElement> | undefined;
    isSidePanelVisible: boolean;
}>;
export declare const Mobile: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    size?: "large" | "full" | "medium" | "small" | undefined;
    background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
    borderRadius?: "none" | "box" | undefined;
    border?: boolean | undefined;
    alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
    flexDirection?: "row" | "column" | undefined;
    justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
    isFullHeight?: boolean | undefined;
    isFullWidth?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement> & {
    overlayClassName?: string | undefined;
    isMirrored?: boolean | undefined;
    isVideoInputMuted: boolean;
    localMediaStream?: MediaStream | undefined;
    shouldShowUserAvatar: boolean;
    sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
    shouldShowBorder?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    username: string;
    shouldShowErrorBorder?: boolean | undefined;
    showOverlayShadow?: boolean | undefined;
} & {
    children?: React.ReactNode;
} & {
    quality: import("@pexip/peer-connection-stats").Quality;
    callQualityPosition: "topRight" | "bottomRight";
    overlayClassName?: string | undefined;
    isAudioInputMuted?: boolean | undefined;
    isAudioInputMissing?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    areEffectsEnabled: boolean;
    areEffectsApplied: boolean;
    onCollapseSelfview: () => void;
    onToggleAudioClick: () => void;
    toggleFacingMode?: (() => void) | undefined;
    openEffectsModal: () => void;
} & {
    isAudioInputMuted: boolean;
    isVideoInputMuted: boolean;
    isAudioInputMissing?: boolean | undefined;
    isVideoInputMissing?: boolean | undefined;
    onExpandSelfview: () => void;
    onToggleVideoClick: () => void;
    onToggleAudioClick: () => void;
    showSelfviewTooltip: boolean;
    setShowSelfviewTooltip: (shouldShow: boolean) => void;
    notificationTooltipPos?: import("@pexip/components").NotificationTooltipPosition | undefined;
    selfviewBtnTooltipPos?: "left" | "top" | "topRight" | "topLeft" | "topStart" | "bottomRight" | "bottomLeft" | "bottomStart" | "right" | "bottom" | "endBottom" | undefined;
} & {
    autoHideProps: import("../../..").AutoHideButtonCallbacks;
    isFolded: boolean;
    floatRoot?: React.RefObject<HTMLDivElement> | undefined;
    isSidePanelVisible: boolean;
}>;
export declare const FoldedDesktop: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    size?: "large" | "full" | "medium" | "small" | undefined;
    background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
    borderRadius?: "none" | "box" | undefined;
    border?: boolean | undefined;
    alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
    flexDirection?: "row" | "column" | undefined;
    justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
    isFullHeight?: boolean | undefined;
    isFullWidth?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement> & {
    overlayClassName?: string | undefined;
    isMirrored?: boolean | undefined;
    isVideoInputMuted: boolean;
    localMediaStream?: MediaStream | undefined;
    shouldShowUserAvatar: boolean;
    sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
    shouldShowBorder?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    username: string;
    shouldShowErrorBorder?: boolean | undefined;
    showOverlayShadow?: boolean | undefined;
} & {
    children?: React.ReactNode;
} & {
    quality: import("@pexip/peer-connection-stats").Quality;
    callQualityPosition: "topRight" | "bottomRight";
    overlayClassName?: string | undefined;
    isAudioInputMuted?: boolean | undefined;
    isAudioInputMissing?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    areEffectsEnabled: boolean;
    areEffectsApplied: boolean;
    onCollapseSelfview: () => void;
    onToggleAudioClick: () => void;
    toggleFacingMode?: (() => void) | undefined;
    openEffectsModal: () => void;
} & {
    isAudioInputMuted: boolean;
    isVideoInputMuted: boolean;
    isAudioInputMissing?: boolean | undefined;
    isVideoInputMissing?: boolean | undefined;
    onExpandSelfview: () => void;
    onToggleVideoClick: () => void;
    onToggleAudioClick: () => void;
    showSelfviewTooltip: boolean;
    setShowSelfviewTooltip: (shouldShow: boolean) => void;
    notificationTooltipPos?: import("@pexip/components").NotificationTooltipPosition | undefined;
    selfviewBtnTooltipPos?: "left" | "top" | "topRight" | "topLeft" | "topStart" | "bottomRight" | "bottomLeft" | "bottomStart" | "right" | "bottom" | "endBottom" | undefined;
} & {
    autoHideProps: import("../../..").AutoHideButtonCallbacks;
    isFolded: boolean;
    floatRoot?: React.RefObject<HTMLDivElement> | undefined;
    isSidePanelVisible: boolean;
}>;
export declare const FoldedMobile: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0fc72a6d").R, Omit<React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
    size?: "large" | "full" | "medium" | "small" | undefined;
    background?: "none" | "primary" | "secondary" | "light" | "black" | undefined;
    borderRadius?: "none" | "box" | undefined;
    border?: boolean | undefined;
    alignItems?: "center" | "stretch" | "flex-end" | "flex-start" | undefined;
    flexDirection?: "row" | "column" | undefined;
    justifyContent?: "center" | "flex-end" | "flex-start" | undefined;
    isFullHeight?: boolean | undefined;
    isFullWidth?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLDivElement> & {
    overlayClassName?: string | undefined;
    isMirrored?: boolean | undefined;
    isVideoInputMuted: boolean;
    localMediaStream?: MediaStream | undefined;
    shouldShowUserAvatar: boolean;
    sizeModifier?: "large" | "full" | "medium" | "small" | undefined;
    shouldShowBorder?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    username: string;
    shouldShowErrorBorder?: boolean | undefined;
    showOverlayShadow?: boolean | undefined;
} & {
    children?: React.ReactNode;
} & {
    quality: import("@pexip/peer-connection-stats").Quality;
    callQualityPosition: "topRight" | "bottomRight";
    overlayClassName?: string | undefined;
    isAudioInputMuted?: boolean | undefined;
    isAudioInputMissing?: boolean | undefined;
    isMobileDevice?: boolean | undefined;
    areEffectsEnabled: boolean;
    areEffectsApplied: boolean;
    onCollapseSelfview: () => void;
    onToggleAudioClick: () => void;
    toggleFacingMode?: (() => void) | undefined;
    openEffectsModal: () => void;
} & {
    isAudioInputMuted: boolean;
    isVideoInputMuted: boolean;
    isAudioInputMissing?: boolean | undefined;
    isVideoInputMissing?: boolean | undefined;
    onExpandSelfview: () => void;
    onToggleVideoClick: () => void;
    onToggleAudioClick: () => void;
    showSelfviewTooltip: boolean;
    setShowSelfviewTooltip: (shouldShow: boolean) => void;
    notificationTooltipPos?: import("@pexip/components").NotificationTooltipPosition | undefined;
    selfviewBtnTooltipPos?: "left" | "top" | "topRight" | "topLeft" | "topStart" | "bottomRight" | "bottomLeft" | "bottomStart" | "right" | "bottom" | "endBottom" | undefined;
} & {
    autoHideProps: import("../../..").AutoHideButtonCallbacks;
    isFolded: boolean;
    floatRoot?: React.RefObject<HTMLDivElement> | undefined;
    isSidePanelVisible: boolean;
}>;
//# sourceMappingURL=DraggableFoldableInMeetingSelfview.stories.d.ts.map