import { useCallback, useEffect, useState } from 'react';
import { throttle } from '@pexip/utils';
import { createSignal } from '@pexip/signal';
export const UI_INACTIVITY_TIMEOUT = 5000;
export const autoHideUIInterfacesStateSignal = createSignal({
    name: 'autoHideUIInterfaces:state',
});
/**
 * Hook to signal display state (show/hide) based on UI inactivity timeout
 * @param isStreamReady - only apply autoHide if we've got a ready stream
 * @param shouldDisplay - callback to signal when to hide and when to show
 * @returns control to enable/disable auto hide functionality
 */
export const useAutoHideUIInterfaces = (isStreamReady, shouldDisplay) => {
    const [enabled, setEnabled] = useState(true);
    const enableAutoHideConstraintBased = useCallback((constraint) => {
        if (!constraint) {
            setEnabled(true);
        }
    }, [setEnabled]);
    useEffect(() => {
        let ignore = false;
        let timeout;
        const timeoutHandler = () => {
            if (!ignore) {
                shouldDisplay?.(false);
                document.body.dataset.uiHidden = '';
                autoHideUIInterfacesStateSignal.emit('hidden');
                document.addEventListener('keydown', tabKeydown, { once: true });
            }
        };
        const onMouseMoveCallback = () => {
            clearTimeout(timeout);
            if (!ignore) {
                shouldDisplay?.(true);
                delete document.body.dataset.uiHidden;
                autoHideUIInterfacesStateSignal.emit('visible');
            }
            timeout = setTimeout(timeoutHandler, UI_INACTIVITY_TIMEOUT);
        };
        const throttled = throttle(onMouseMoveCallback, 500);
        const tabKeydown = (e) => {
            if (e.code === 'Tab') {
                onMouseMoveCallback();
            }
        };
        if (isStreamReady && enabled) {
            timeout = setTimeout(timeoutHandler, UI_INACTIVITY_TIMEOUT);
            document.addEventListener('mousemove', throttled);
        }
        return () => {
            ignore = true;
            delete document.body.dataset.uiHidden;
            autoHideUIInterfacesStateSignal.emit('visible');
            clearTimeout(timeout);
            document.removeEventListener('keydown', tabKeydown);
            document.removeEventListener('mousemove', throttled);
        };
    }, [shouldDisplay, enabled, isStreamReady]);
    return { enableAutoHide: setEnabled, enableAutoHideConstraintBased };
};
