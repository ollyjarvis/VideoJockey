import { useEffect } from 'react';
import { createSignal } from '@pexip/signal';
export const keydownSignal = createSignal({
    allowEmittingWithoutObserver: true,
    name: 'useHotKey:keydownEvent',
});
export const excludedElements = ['INPUT', 'TEXTAREA'];
const emitKeydownSignal = (event) => keydownSignal.emit(event);
const defaultDisallowedKeys = { metaKey: true, ctrlKey: true };
export const useHotKey = (key, handler, disallowedKeys = defaultDisallowedKeys) => {
    if (key.length !== 1) {
        throw new Error('Hotkey length is limited to 1 currently');
    }
    useEffect(() => {
        document.addEventListener('keydown', emitKeydownSignal);
        return () => document.removeEventListener('keydown', emitKeydownSignal);
    }, []);
    useEffect(() => keydownSignal.add(event => {
        if (event.repeat) {
            return;
        }
        if (excludedElements.includes(document.activeElement?.tagName || '')) {
            return;
        }
        let k;
        for (k in disallowedKeys) {
            if (disallowedKeys[k] && event[k]) {
                return;
            }
        }
        const capsLockIsOn = event.getModifierState
            ? event.getModifierState('CapsLock')
            : false;
        if (capsLockIsOn) {
            const pressedKey = event.shiftKey
                ? event.key.toUpperCase()
                : event.key.toLowerCase();
            if (key === pressedKey) {
                return handler();
            }
        }
        else if (key === event.key) {
            return handler();
        }
    }), [key, handler, disallowedKeys]);
};
