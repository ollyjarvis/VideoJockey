import { useMemo } from 'react';
const standard = {
    exitFullscreen: 'exitFullscreen',
    fullscreenchange: 'fullscreenchange',
    fullscreenElement: 'fullscreenElement',
    fullscreenEnabled: 'fullscreenEnabled',
    requestFullscreen: 'requestFullscreen',
};
const webkit = {
    exitFullscreen: 'webkitExitFullscreen',
    fullscreenchange: 'webkitfullscreenchange',
    fullscreenElement: 'webkitFullscreenElement',
    fullscreenEnabled: 'webkitFullscreenEnabled',
    requestFullscreen: 'webkitRequestFullscreen',
};
const moz = {
    exitFullscreen: 'mozCancelFullScreen',
    fullscreenchange: 'mozfullscreenchange',
    fullscreenElement: 'mozFullScreenElement',
    fullscreenEnabled: 'mozFullScreenEnabled',
    requestFullscreen: 'mozRequestFullScreen',
};
export const browserApi = (standard.fullscreenEnabled in document && standard) ||
    (webkit.fullscreenEnabled in document && webkit) ||
    (moz.fullscreenEnabled in document && moz) ||
    {};
const getBrowserAPIMethodName = (methodName) => browserApi[methodName];
/**
 * returns a Browser API agnostic access to the Fullscreen API.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide#prefixing
 */
export const useFullscreenApi = () => useMemo(() => {
    const fullscreenEnabled = getBrowserAPIMethodName(standard.fullscreenEnabled);
    const exitFullscreen = getBrowserAPIMethodName(standard.exitFullscreen);
    const fullscreenElement = getBrowserAPIMethodName(standard.fullscreenElement);
    const requestFullscreen = getBrowserAPIMethodName(standard.requestFullscreen);
    return {
        fullscreenEnabled: document[fullscreenEnabled],
        exitFullscreen: document[exitFullscreen]?.bind(document),
        get fullscreenElement() {
            return document[fullscreenElement];
        },
        requestFullscreen: (element = document.documentElement, options) => element[requestFullscreen]?.bind(element)(options),
        fullscreenchange: browserApi[standard.fullscreenchange],
    };
}, []);
