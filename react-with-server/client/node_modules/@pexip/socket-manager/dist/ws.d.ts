import type { Observer, Signal } from '@pexip/signal';
declare const eventTypes: readonly ["open", "close", "error", "message"];
type EventType = (typeof eventTypes)[number];
type Listener = Observer<Event>;
export declare const setShouldError: (_shouldError: boolean) => void;
export declare const serverSignals: Record<"error" | "close" | "open" | "message", Signal<Event>>;
export declare class FakeWebSocket implements WebSocket {
    readonly url: string;
    readonly protocols?: string | string[] | undefined;
    static readonly CONNECTING = 0;
    static readonly OPEN = 1;
    static readonly CLOSING = 2;
    static readonly CLOSED = 3;
    readonly CLOSED = 3;
    readonly CLOSING = 2;
    readonly CONNECTING = 0;
    readonly OPEN = 1;
    binaryType: BinaryType;
    readonly bufferedAmount: number;
    readonly extensions: string;
    readonly protocol: string;
    private _closeEmitTimeout;
    readyState: number;
    onopen: Listener | null;
    onmessage: Listener | null;
    onerror: Listener | null;
    onclose: Listener | null;
    constructor(url: string, protocols?: string | string[] | undefined);
    addEventListener(_type: EventType, _listener: Listener): void;
    removeEventListener(_type: EventType, _listener: Listener): void;
    dispatchEvent(_event: Event): boolean;
    close(code?: number, reason?: string): void;
    error(): void;
    send(data: string): void;
    set closeEmitTimeout(emitAfter: number);
}
export {};
