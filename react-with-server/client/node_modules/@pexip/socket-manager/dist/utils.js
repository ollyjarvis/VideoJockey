import { createSignal } from '@pexip/signal';
/**
 *  indicates wether the given close code in the error range
 *
 * @param WebSocket-internal error code
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
 */
export const isWebSocketClosedWithError = (errorCode) => errorCode > 1000 && errorCode < 1017;
export const isOpen = (readyState) => readyState === WebSocket.OPEN;
export const isClosed = (readyState) => readyState === WebSocket.CLOSED;
export const isConnecting = (readyState) => readyState === WebSocket.CONNECTING;
/**
 * Create a general signal with consistent scoped name
 *
 * @param name - Signal name
 * @param scope - The scope of the signal for better logging
 * @param variant - The variant of the signal @see Signal @defaultValue 'generic'
 */
const createSocketSignal = (name, scope = '', variant = 'generic') => createSignal({
    name: `socket-manager/${scope ? `${scope}/` : ''}${name}`,
    allowEmittingWithoutObserver: allowEmittingWithoutObserver(name),
    variant,
});
const allowEmittingWithoutObserver = (signal) => [
    'onConnecting',
    'onConnected',
    'onReconnecting',
    'onReconnected',
    'onDisconnected',
    'onError',
    'onMessage',
].includes(signal);
const REQUIRED_SOCKET_SIGNAL_KEYS = [
    'onConnecting',
    'onConnected',
    'onReconnecting',
    'onReconnected',
    'onDisconnected',
    'onError',
    'onMessage',
];
/**
 * Create and return all required and optional (if specified with `more`),
 * signals for call to work
 *
 * @param scope - any scope prefix for the generated signal name, @see Signal
 * @param more - Keys from `SocketSignalsOptional`, @see SocketSignalsOptional
 *
 * The following signals created by default
 * - 'onRemoteStream',
 *
 * @see REQUIRED_SOCKET_SIGNAL_KEYS
 */
export const createSocketSignals = (scope = '') => {
    return REQUIRED_SOCKET_SIGNAL_KEYS.reduce((signals, key) => ({
        ...signals,
        [key]: createSocketSignal(key, scope),
    }), {});
};
