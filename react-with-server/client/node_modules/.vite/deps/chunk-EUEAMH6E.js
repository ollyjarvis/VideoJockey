// node_modules/@pexip/signal/dist/baseLogger.js
var LogLevels;
(function(LogLevels2) {
  LogLevels2[LogLevels2["trace"] = 10] = "trace";
  LogLevels2[LogLevels2["debug"] = 20] = "debug";
  LogLevels2[LogLevels2["info"] = 30] = "info";
  LogLevels2[LogLevels2["warn"] = 40] = "warn";
  LogLevels2[LogLevels2["error"] = 50] = "error";
  LogLevels2[LogLevels2["fatal"] = 60] = "fatal";
  LogLevels2[LogLevels2["silent"] = Number.MAX_SAFE_INTEGER] = "silent";
})(LogLevels || (LogLevels = {}));
function createConsoleLogger() {
  return Object.freeze({
    /* eslint-disable no-console -- set logger to console */
    fatal: (meta, message) => console.error(message, meta),
    error: (meta, message) => console.error(message, meta),
    warn: (meta, message) => console.warn(message, meta),
    info: (meta, message) => console.info(message, meta),
    debug: (meta, message) => console.debug(message, meta),
    trace() {
    },
    // Noop
    silent() {
    },
    // Noop
    redact() {
    }
    // Noop
    /* eslint-enable no-console -- set logger to console */
  });
}

// node_modules/@pexip/signal/dist/logger.js
var logger = createConsoleLogger();
var flags = {};

// node_modules/@pexip/signal/dist/buffer.js
var createBuffer = (size) => {
  let buffer = new Array();
  return {
    add: (value) => {
      if (size === 0) {
        return [];
      } else if (buffer.length < size) {
        buffer.splice(size, 0, value);
      } else {
        buffer = [...buffer.slice(1), value];
      }
    },
    entries: () => buffer.slice(0),
    forEach: (cb) => {
      buffer.forEach(cb);
    }
  };
};

// node_modules/@pexip/signal/dist/signal.js
var NAMELESS_OBSERVER = "Anonymous";
var NAMELESS_SIGNAL = "AnonymousSignal";
function getName(observer) {
  return observer.name || NAMELESS_OBSERVER;
}
function createSignal(options = {}) {
  const { allowEmittingWithoutObserver = false, variant = "generic", bufferSize = 2, name = NAMELESS_SIGNAL } = options;
  const observers = /* @__PURE__ */ new Set();
  const contexts = /* @__PURE__ */ new WeakMap();
  const onces = /* @__PURE__ */ new WeakSet();
  const buffers = variant !== "generic" ? createBuffer(variant === "behavior" ? 1 : bufferSize) : void 0;
  function emitOne(observer, subject) {
    try {
      const context = contexts.get(observer);
      logger.trace({ signal: name, subject, observer, context }, `Emitting a subject to observer ${getName(observer)}`);
      observer.call(context, subject);
      if (onces.has(observer)) {
        remove(observer);
      }
    } catch (e) {
      logger.error({ signal: name, error: e, observer, subject }, `emit with error for observer ${getName(observer)}`);
      if (e instanceof RangeError) {
        throw new RangeError(`RangeError: Possible recursive call when calling ${getName(observer)} for ${name}`);
      }
      throw e;
    }
  }
  const add = (observer, context) => {
    if (observers.has(observer)) {
      const msg = `Observer ${getName(observer)} has already been added!`;
      logger.error({ signal: name, observer }, msg);
      throw new Error(`DuplicatedObserver: ${msg}`);
    }
    logger.trace({ signal: name, observer }, `Adding ${getName(observer)} to ${name}`);
    observers.add(observer);
    if (context) {
      contexts.set(observer, context);
    }
    buffers == null ? void 0 : buffers.forEach((subject) => {
      emitOne(observer, subject);
    });
    return () => remove(observer);
  };
  const addOnce = (observer, context) => {
    if (onces.has(observer)) {
      const msg = `${getName(observer)} has already been added once to ${name}!`;
      logger.error({ signal: name, observer }, msg);
      throw new Error(`NoOnceAgain: ${msg}`);
    }
    onces.add(observer);
    return add(observer, context);
  };
  const remove = (observer) => {
    if (!observers.delete(observer)) {
      logger.error({ signal: name, observer }, `Unable to remove observer ${getName(observer)}`);
      throw new Error(`UnableToRemove: ${getName(observer)}`);
    }
    onces.delete(observer);
    contexts.delete(observer);
    logger.trace({ signal: name, observer }, `Removed ${getName(observer)} from ${name}`);
  };
  const size = () => observers.size;
  function emit(subject) {
    if (buffers) {
      buffers.add(subject);
    } else if (!observers.size && !allowEmittingWithoutObserver) {
      const { stack } = flags.debug ? new Error() : { stack: void 0 };
      logger.warn({ signal: name, subject, stack }, `Emitting ${name} without any observer! This may be a mistake.`);
    }
    observers.forEach((obs) => {
      emitOne(obs, subject);
    });
  }
  return {
    name,
    get size() {
      return size();
    },
    add,
    addOnce,
    remove,
    emit
  };
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = "0123456789abcdef";
  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 255;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));
  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  const lsw = (x & 65535) + (y & 65535);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35("v3", 48, md5_default);

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);

// node_modules/@pexip/utils/dist/isDefined.js
function isDefined(t) {
  if (t === void 0) {
    throw new Error(`typeof t = ${typeof t}, expected value`);
  }
  return t;
}

// node_modules/@pexip/utils/dist/noop.js
var noop = () => void 0;

// node_modules/@pexip/utils/dist/nth.js
function nthThrows(list, index) {
  return isDefined(list[index >= 0 ? index : list.length + index]);
}
function nthOr(list, index, defaultValue) {
  try {
    return nthThrows(list, index);
  } catch {
    return defaultValue;
  }
}
function lastOr(list, defaultValue) {
  return nthOr(list, -1, defaultValue);
}

// node_modules/@pexip/utils/dist/identity.js
var identity = (x) => x;

// node_modules/@pexip/utils/dist/pipe.js
var pipe = (fn1, ...fns) => {
  const piped = fns.reduce((prevFn, nextFn) => (value) => nextFn(prevFn(value)), identity);
  return (...args) => piped(fn1(...args));
};

// node_modules/@pexip/utils/dist/prig.js
var p1 = 24317;
var p2 = 32141;
var p3 = 63629;
function prig(baseIndex, shuffleID, listSize) {
  const randR = shuffleID + 131 * Math.floor(baseIndex / listSize);
  let si = (baseIndex + randR) % listSize;
  const r1 = randR % p1;
  const r2 = (randR * 137 ^ r1) % p2;
  const r3 = (r1 + r2 + p3) % listSize;
  const r4 = r1 ^ r2 ^ r3;
  if (si % 3 === 0) {
    si = (si / 3 * p1 + r1) % Math.floor((listSize + 2) / 3) * 3;
  }
  if (si % 2 === 0) {
    si = (si / 2 * p2 + r2) % Math.floor((listSize + 1) / 2) * 2;
  }
  if (si < Math.floor(listSize / 2)) {
    si = (si * p3 + r4) % Math.floor(listSize / 2);
  }
  si = (si * p3 + r3) % listSize;
  return si;
}

// node_modules/@pexip/utils/dist/getTimeLeft.js
var getTimeLeft = (futureTimestampSeconds, earlierTimestampSeconds) => {
  const differenceInSeconds = futureTimestampSeconds - earlierTimestampSeconds;
  if (differenceInSeconds <= 0) {
    return "00:00";
  }
  let hoursLeft = String(Math.floor(differenceInSeconds / 60 / 60));
  hoursLeft = hoursLeft.length === 1 ? "0" + hoursLeft : hoursLeft;
  let minutesLeft = String(Math.floor(differenceInSeconds / 60 % 60));
  minutesLeft = minutesLeft.length === 1 ? "0" + minutesLeft : minutesLeft;
  let secondsLeft = String(Math.floor(differenceInSeconds % 60));
  secondsLeft = secondsLeft.length === 1 ? "0" + secondsLeft : secondsLeft;
  return `${hoursLeft === "00" ? "" : hoursLeft + ":"}${minutesLeft}:${secondsLeft}`;
};

// node_modules/@pexip/utils/dist/Backoff.js
var Backoff = class {
  constructor(opts) {
    this.attempts = 0;
    this.ms = 100;
    this.max = 1e4;
    this.factor = 2;
    this.jitter = 0;
    if (!opts) {
      return;
    }
    if (opts.min !== void 0) {
      this.ms = opts.min;
    }
    if (opts.max !== void 0) {
      this.max = opts.max;
    }
    if (opts.factor !== void 0) {
      this.factor = opts.factor;
    }
    if (opts.jitter !== void 0 && opts.jitter > 0 && opts.jitter <= 1) {
      this.jitter = opts.jitter;
    }
    this.duration = this.duration.bind(this);
    this.reset = this.reset.bind(this);
  }
  duration() {
    let ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      const rand = Math.random();
      const deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) === 0 ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
  }
  promise() {
    return new Promise((res) => setTimeout(res, this.duration()));
  }
  reset() {
    this.attempts = 0;
  }
};

// node_modules/@pexip/utils/dist/queue.js
var QUEUE_SIZE = 5;
var QUEUE_DROP_LAST = false;
var createQueue = (maxSize = QUEUE_SIZE, initial = [], dropLast = QUEUE_DROP_LAST) => {
  if (initial.length > maxSize || 0 >= maxSize) {
    throw new Error("InvalidQueueSize");
  }
  let queue = initial;
  const enqueue = (item) => {
    if (queue.length >= maxSize) {
      if (dropLast) {
        queue.splice(-1, 1, item);
      } else {
        queue.shift();
        queue.push(item);
      }
      return queue.length;
    }
    return queue.push(item);
  };
  const enqueueAt = (start, item, replace = false) => {
    if (replace) {
      queue.splice(start, 1, item);
    } else {
      if (queue.length >= maxSize) {
        if (dropLast) {
          queue.splice(-1, 1);
        } else {
          queue.shift();
        }
      }
      queue.splice(start, 0, item);
    }
    return queue.length;
  };
  const dequeue = () => {
    return queue.shift();
  };
  const dequeueAll = () => {
    const tmp = queue;
    queue = [];
    return tmp;
  };
  const empty = () => {
    queue = [];
  };
  return {
    get size() {
      return queue.length;
    },
    get maxSize() {
      return maxSize;
    },
    empty,
    enqueue,
    enqueueAt,
    dequeue,
    dequeueAll
  };
};

// node_modules/@pexip/utils/dist/asyncQueue.js
var QUEUE_THROTTLE_IN_MS = 100;
var QUEUE_DELAY_IN_MS = 0;
var createAsyncQueue = ({ throttleInMS = QUEUE_THROTTLE_IN_MS, delayInMS = QUEUE_DELAY_IN_MS, size = QUEUE_SIZE, dropLast = QUEUE_DROP_LAST } = {}) => {
  if (size < 1) {
    throw new Error("InvalidQueueSize");
  }
  const queue = createQueue(size, [], dropLast);
  const props = {
    currentJob: void 0,
    processId: 0,
    lastOperatingTime: 0
  };
  const clearTimeout2 = () => {
    if (props.processId) {
      window.clearTimeout(props.processId);
      props.processId = 0;
    }
  };
  const execute = async () => {
    if (queue.size && !props.currentJob) {
      props.currentJob = queue.dequeue();
      if (props.currentJob) {
        const now = performance.now();
        try {
          await props.currentJob();
        } catch (error) {
          if (error instanceof Error) {
            throw error;
          }
        } finally {
          const delay = Math.min(performance.now() - now, delayInMS);
          props.currentJob = void 0;
          if (queue.size > 0) {
            await new Promise((resolve, reject) => {
              props.processId = window.setTimeout(() => {
                execute().then(resolve).catch(reject);
              }, delay);
            });
          }
        }
      }
    }
  };
  return {
    get busy() {
      return !!props.currentJob;
    },
    execute,
    enqueue: (job, runImmediately = true) => {
      clearTimeout2();
      if (throttleInMS > 0) {
        const now = window.performance.now();
        const diff = now - props.lastOperatingTime;
        if (diff <= throttleInMS) {
          queue.enqueueAt(-1, job, true);
        } else {
          props.lastOperatingTime = now;
          queue.enqueue(job);
        }
      } else {
        queue.enqueue(job);
      }
      if (runImmediately) {
        void execute();
      }
    }
  };
};

// node_modules/@pexip/utils/dist/hasOwn.js
var hasOwn = (obj, prop) => {
  if ("hasOwn" in Object) {
    return Object.hasOwn(obj, prop);
  }
  return Object.prototype.hasOwnProperty.call(obj, prop);
};

// node_modules/@pexip/utils/dist/patterns.js
var toCapturingGroup = (pattern) => `(${pattern})`;
var toNonCapturingGroup = (pattern) => toCapturingGroup(`?:${pattern}`);
var toOptional = (pattern) => `${toNonCapturingGroup(pattern)}?`;
var toAny = (pattern) => `${toNonCapturingGroup(pattern)}*`;
var toBegin = (pattern) => `^${pattern}`;
var toEnd = (pattern) => `${pattern}$`;
var isCombinator = (t) => {
  if (typeof t === "function") {
    return true;
  }
  return false;
};
var resolvePatternOrCombinator = (combine2) => (patternOrCombinator) => isCombinator(patternOrCombinator) ? patternOrCombinator(combine2) : patternOrCombinator;
var doNothing = () => (pattern) => pattern;
var createCombinator = (map, ic = doNothing) => (patternOrCombinator) => (combine2) => pipe(resolvePatternOrCombinator(combine2), ic(combine2), map)(patternOrCombinator);
var option = createCombinator((pattern) => toOptional(pattern));
var any = createCombinator((pattern) => toAny(pattern));
var begin = createCombinator((pattern) => toBegin(pattern));
var end = createCombinator((pattern) => toEnd(pattern));

export {
  createSignal,
  v4_default,
  Backoff,
  isDefined,
  noop,
  lastOr,
  pipe,
  createAsyncQueue,
  hasOwn,
  prig,
  getTimeLeft
};
//# sourceMappingURL=chunk-EUEAMH6E.js.map
