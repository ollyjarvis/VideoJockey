import type * as types from './api.types.js';
export declare class BadRequestError extends Error {
    constructor(message: string);
}
export declare class UnauthorizedError extends Error {
    constructor(message: string);
}
export declare class ForbiddenError extends Error {
    constructor(message: string);
}
export declare class NotFoundError extends Error {
    constructor(message: string);
}
export declare class GoneError extends Error {
    constructor(message: string);
}
export declare class ServiceUnavailableError extends Error {
    constructor(message: string);
}
export declare class InternalServerError extends Error {
    constructor(message: string);
}
export declare class NotModifiedError extends Error {
    constructor(message: string);
}
export declare class UnknownError extends Error {
    constructor(message: string);
}
export type BadRequest = types.components['responses']['BadRequest']['content']['application/json'];
export type Unauthorized = types.components['responses']['Unauthorized']['content']['application/json'];
export type Forbidden = types.components['responses']['Forbidden']['content']['application/json'];
export type NotFound = types.components['responses']['NotFound']['content']['application/json'];
export type Gone = types.components['responses']['Gone']['content']['application/json'];
export type ServiceUnavailable = types.components['responses']['ServiceUnavailable']['content']['application/json'];
export type Token = types.components['schemas']['AccessToken'];
export type Meeting = types.components['schemas']['Meeting'];
export type Participant = types.components['schemas']['ParticipantWithSecret'];
export type JoinMeeting = types.components['schemas']['JoinDetails'];
export interface Status<T> {
    status: number;
    data: T;
}
export interface Api {
    /**
     * Creates a new meeting via CRUD
     *
     * @returns obj with `access_token`
     */
    token(args: {
        abortSignal?: AbortSignal;
        token: string;
        apiAddress: string;
        headers?: HeadersInit;
    }): Promise<Status<Token>>;
    /**
     * Creates a new meeting via CRUD
     *
     * @returns meeting id
     */
    create(args: {
        accessToken?: string;
        abortSignal?: AbortSignal;
        apiAddress: string;
        headers?: HeadersInit;
    }): Promise<Status<Meeting>>;
    /**
     * Creates `participant_id` and `participant_secret` for the given `meetingId`
     */
    participants(args: {
        accessToken?: string;
        abortSignal?: AbortSignal;
        meetingId: string;
        apiAddress: string;
        headers?: HeadersInit;
    }): Promise<Status<Participant>>;
    /**
     * Joins a meeting for particular `participantId` and `participantSecret`
     *
     * @returns `location` path to be able to connect to WebSocket for all the meeting updates
     */
    join(args: {
        abortSignal?: AbortSignal;
        meetingId: string;
        participantId: string;
        participantSecret: string;
        apiAddress: string;
        headers?: HeadersInit;
    }): Promise<Status<JoinMeeting>>;
    /**
     * Terminates meeting with the specified `meetingId`
     */
    terminate(args: {
        accessToken?: string;
        abortSignal?: AbortSignal;
        meetingId: string;
        apiAddress: string;
        headers?: HeadersInit;
    }): Promise<Status<unknown>>;
}
/**
 * Creates MEE api wrapper for the given `apiAddress` and `token`
 *
 * @privateRemarks  This will be generated from OpenApi schema
 *
 * @returns Api wrapper with all the main CRUD fns
 */
export declare const createApi: () => Api;
export declare const withToken: (createAndSignJWT: () => string, apiAddress: string) => (api: Api) => {
    create: ({ headers }?: {
        headers?: HeadersInit | undefined;
    }) => Promise<Status<{
        id: string;
        status?: "unknown" | "ready" | "running" | "ended" | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
    }>>;
    participants: ({ meetingId, headers, }: {
        meetingId: string;
        headers?: HeadersInit | undefined;
    }) => Promise<Status<{
        id: string;
        meeting_id: string;
        status: "ready" | "joined" | "left" | "removed";
        participant_secret: string;
        created_at: string;
        updated_at: string;
    }>>;
};
